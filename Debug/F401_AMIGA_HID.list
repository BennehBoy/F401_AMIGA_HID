
F401_AMIGA_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000799c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08007b3c  08007b3c  00017b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c5c  08007c5c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007c5c  08007c5c  00017c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c64  08007c64  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c68  08007c68  00017c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000090  08007cfc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  08007cfc  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d19  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a51  00000000  00000000  00039dd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0003d830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0003e538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001958b  00000000  00000000  0003f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011972  00000000  00000000  00058693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b33e  00000000  00000000  0006a005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003834  00000000  00000000  000f5398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b24 	.word	0x08007b24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	08007b24 	.word	0x08007b24

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <USBH_HID_EventCallback>:
/* USER CODE BEGIN 0 */

char Uart_Buf[100];

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af04      	add	r7, sp, #16
 800057e:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_MOUSE)
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f004 fdbb 	bl	80050fc <USBH_HID_GetDeviceType>
 8000586:	4603      	mov	r3, r0
 8000588:	2b01      	cmp	r3, #1
 800058a:	d133      	bne.n	80005f4 <USBH_HID_EventCallback+0x7c>
	{
		HID_MOUSE_Info_TypeDef *Mouse_Info;
		Mouse_Info = USBH_HID_GetMouseInfo(phost);  // Get the info
 800058c:	6878      	ldr	r0, [r7, #4]
 800058e:	f004 ff3b 	bl	8005408 <USBH_HID_GetMouseInfo>
 8000592:	60f8      	str	r0, [r7, #12]
		int X_Val = Mouse_Info->x;  // get the x value
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	617b      	str	r3, [r7, #20]
		int Y_Val = Mouse_Info->y;  // get the y value
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	785b      	ldrb	r3, [r3, #1]
 800059e:	613b      	str	r3, [r7, #16]
		if (X_Val > 127) X_Val -= 255;
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	2b7f      	cmp	r3, #127	; 0x7f
 80005a4:	dd02      	ble.n	80005ac <USBH_HID_EventCallback+0x34>
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3bff      	subs	r3, #255	; 0xff
 80005aa:	617b      	str	r3, [r7, #20]
		if (Y_Val > 127) Y_Val -= 255;
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	2b7f      	cmp	r3, #127	; 0x7f
 80005b0:	dd02      	ble.n	80005b8 <USBH_HID_EventCallback+0x40>
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	3bff      	subs	r3, #255	; 0xff
 80005b6:	613b      	str	r3, [r7, #16]
		int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_Val, Y_Val, \
				                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	789b      	ldrb	r3, [r3, #2]
		int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_Val, Y_Val, \
 80005bc:	461a      	mov	r2, r3
				                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	78db      	ldrb	r3, [r3, #3]
		int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_Val, Y_Val, \
 80005c2:	4619      	mov	r1, r3
				                                Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	791b      	ldrb	r3, [r3, #4]
		int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n", X_Val, Y_Val, \
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	9101      	str	r1, [sp, #4]
 80005cc:	9200      	str	r2, [sp, #0]
 80005ce:	693b      	ldr	r3, [r7, #16]
 80005d0:	697a      	ldr	r2, [r7, #20]
 80005d2:	490a      	ldr	r1, [pc, #40]	; (80005fc <USBH_HID_EventCallback+0x84>)
 80005d4:	480a      	ldr	r0, [pc, #40]	; (8000600 <USBH_HID_EventCallback+0x88>)
 80005d6:	f006 ff31 	bl	800743c <siprintf>
 80005da:	60b8      	str	r0, [r7, #8]
		HAL_UART_Transmit(&huart2, (uint8_t *) Uart_Buf, len, 100);
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	2364      	movs	r3, #100	; 0x64
 80005e2:	4907      	ldr	r1, [pc, #28]	; (8000600 <USBH_HID_EventCallback+0x88>)
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <USBH_HID_EventCallback+0x8c>)
 80005e6:	f002 ffb4 	bl	8003552 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80005ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <USBH_HID_EventCallback+0x90>)
 80005f0:	f000 fd6f 	bl	80010d2 <HAL_GPIO_TogglePin>
	}
}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	08007b3c 	.word	0x08007b3c
 8000600:	20000100 	.word	0x20000100
 8000604:	200000bc 	.word	0x200000bc
 8000608:	40020800 	.word	0x40020800

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fa1a 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f814 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f8a8 	bl	800076c <MX_GPIO_Init>
  MX_USB_HOST_Init();
 800061c:	f006 fb30 	bl	8006c80 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000620:	f000 f87a 	bl	8000718 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000624:	f006 fb52 	bl	8006ccc <MX_USB_HOST_Process>
    HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 8000628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <main+0x30>)
 800062e:	f000 fd50 	bl	80010d2 <HAL_GPIO_TogglePin>
    HAL_Delay (100);   /* Insert delay 100 ms */
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f000 fa7a 	bl	8000b2c <HAL_Delay>
    MX_USB_HOST_Process();
 8000638:	e7f4      	b.n	8000624 <main+0x18>
 800063a:	bf00      	nop
 800063c:	40020800 	.word	0x40020800

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0320 	add.w	r3, r7, #32
 800064a:	2230      	movs	r2, #48	; 0x30
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fe32 	bl	80072b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a28      	ldr	r2, [pc, #160]	; (8000710 <SystemClock_Config+0xd0>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b26      	ldr	r3, [pc, #152]	; (8000710 <SystemClock_Config+0xd0>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	60bb      	str	r3, [r7, #8]
 800067e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b23      	ldr	r3, [pc, #140]	; (8000714 <SystemClock_Config+0xd4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xd4>)
 800068e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a0:	2301      	movs	r3, #1
 80006a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006be:	2304      	movs	r3, #4
 80006c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c2:	2307      	movs	r3, #7
 80006c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0320 	add.w	r3, r7, #32
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fa80 	bl	8002bd0 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d6:	f000 f89b 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006de:	2302      	movs	r3, #2
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fce2 	bl	80030c0 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000702:	f000 f885 	bl	8000810 <Error_Handler>
  }
}
 8000706:	bf00      	nop
 8000708:	3750      	adds	r7, #80	; 0x50
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40007000 	.word	0x40007000

08000718 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART2_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART2_UART_Init+0x4c>)
 8000750:	f002 feb2 	bl	80034b8 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f859 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000bc 	.word	0x200000bc
 8000768:	40004400 	.word	0x40004400

0800076c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_GPIO_Init+0x9c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a1f      	ldr	r2, [pc, #124]	; (8000808 <MX_GPIO_Init+0x9c>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_GPIO_Init+0x9c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_GPIO_Init+0x9c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0xa0>)
 80007de:	f000 fc5f 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0xa0>)
 80007fc:	f000 facc 	bl	8000d98 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020800 	.word	0x40020800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000830:	6453      	str	r3, [r2, #68]	; 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	; (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	; 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <HAL_UART_MspInit+0x84>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d12b      	bne.n	80008e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0x88>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <HAL_UART_MspInit+0x88>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a10      	ldr	r2, [pc, #64]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_UART_MspInit+0x88>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c6:	230c      	movs	r3, #12
 80008c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d6:	2307      	movs	r3, #7
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	; (80008f8 <HAL_UART_MspInit+0x8c>)
 80008e2:	f000 fa59 	bl	8000d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	; 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40004400 	.word	0x40004400
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f8d0 	bl	8000aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <OTG_FS_IRQHandler+0x10>)
 8000956:	f000 fe41 	bl	80015dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000578 	.word	0x20000578

08000964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800096c:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <_sbrk+0x5c>)
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <_sbrk+0x60>)
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000978:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <_sbrk+0x64>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d102      	bne.n	8000986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <_sbrk+0x64>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <_sbrk+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <_sbrk+0x64>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4413      	add	r3, r2
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	429a      	cmp	r2, r3
 8000992:	d207      	bcs.n	80009a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000994:	f006 fc56 	bl	8007244 <__errno>
 8000998:	4603      	mov	r3, r0
 800099a:	220c      	movs	r2, #12
 800099c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e009      	b.n	80009b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <_sbrk+0x64>)
 80009b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009b6:	68fb      	ldr	r3, [r7, #12]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3718      	adds	r7, #24
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20010000 	.word	0x20010000
 80009c4:	00000400 	.word	0x00000400
 80009c8:	200000ac 	.word	0x200000ac
 80009cc:	20000890 	.word	0x20000890

080009d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a10:	4c0b      	ldr	r4, [pc, #44]	; (8000a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a1e:	f7ff ffd7 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a22:	f006 fc15 	bl	8007250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a26:	f7ff fdf1 	bl	800060c <main>
  bx  lr    
 8000a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000a38:	08007c6c 	.word	0x08007c6c
  ldr r2, =_sbss
 8000a3c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000a40:	2000088c 	.word	0x2000088c

08000a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <HAL_Init+0x40>)
 8000a52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_Init+0x40>)
 8000a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <HAL_Init+0x40>)
 8000a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a70:	2003      	movs	r0, #3
 8000a72:	f000 f94f 	bl	8000d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a76:	2000      	movs	r0, #0
 8000a78:	f000 f808 	bl	8000a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a7c:	f7ff fece 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a80:	2300      	movs	r3, #0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023c00 	.word	0x40023c00

08000a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <HAL_InitTick+0x54>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_InitTick+0x58>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f967 	bl	8000d7e <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00e      	b.n	8000ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d80a      	bhi.n	8000ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	6879      	ldr	r1, [r7, #4]
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f000 f92f 	bl	8000d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000acc:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <HAL_InitTick+0x5c>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004

08000aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x20>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_IncTick+0x24>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4413      	add	r3, r2
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <HAL_IncTick+0x24>)
 8000afe:	6013      	str	r3, [r2, #0]
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000164 	.word	0x20000164

08000b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return uwTick;
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <HAL_GetTick+0x14>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000164 	.word	0x20000164

08000b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b34:	f7ff ffee 	bl	8000b14 <HAL_GetTick>
 8000b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b44:	d005      	beq.n	8000b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b46:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <HAL_Delay+0x44>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4413      	add	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b52:	bf00      	nop
 8000b54:	f7ff ffde 	bl	8000b14 <HAL_GetTick>
 8000b58:	4602      	mov	r2, r0
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d8f7      	bhi.n	8000b54 <HAL_Delay+0x28>
  {
  }
}
 8000b64:	bf00      	nop
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4907      	ldr	r1, [pc, #28]	; (8000c10 <__NVIC_EnableIRQ+0x38>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce0:	d301      	bcc.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00f      	b.n	8000d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <SysTick_Config+0x40>)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	210f      	movs	r1, #15
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f7ff ff8e 	bl	8000c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <SysTick_Config+0x40>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cfe:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <SysTick_Config+0x40>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	e000e010 	.word	0xe000e010

08000d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff29 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b086      	sub	sp, #24
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3c:	f7ff ff3e 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	6978      	ldr	r0, [r7, #20]
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_EncodePriority>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff ff5d 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d5a:	bf00      	nop
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff31 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff ffa2 	bl	8000cd0 <SysTick_Config>
 8000d8c:	4603      	mov	r3, r0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	e159      	b.n	8001068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f040 8148 	bne.w	8001062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d005      	beq.n	8000dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d130      	bne.n	8000e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	f003 0201 	and.w	r2, r3, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d017      	beq.n	8000e88 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d123      	bne.n	8000edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	69b9      	ldr	r1, [r7, #24]
 8000ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0203 	and.w	r2, r3, #3
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80a2 	beq.w	8001062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b57      	ldr	r3, [pc, #348]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a56      	ldr	r2, [pc, #344]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b54      	ldr	r3, [pc, #336]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3a:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a49      	ldr	r2, [pc, #292]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x202>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a48      	ldr	r2, [pc, #288]	; (800108c <HAL_GPIO_Init+0x2f4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x1fe>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a47      	ldr	r2, [pc, #284]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a46      	ldr	r2, [pc, #280]	; (8001094 <HAL_GPIO_Init+0x2fc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x1f6>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a45      	ldr	r2, [pc, #276]	; (8001098 <HAL_GPIO_Init+0x300>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x1f2>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_GPIO_Init+0x304>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fde:	4a2f      	ldr	r2, [pc, #188]	; (800109c <HAL_GPIO_Init+0x304>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_GPIO_Init+0x304>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001008:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_GPIO_Init+0x304>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_GPIO_Init+0x304>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <HAL_GPIO_Init+0x304>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_GPIO_Init+0x304>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_GPIO_Init+0x304>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f67f aea2 	bls.w	8000db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40013800 	.word	0x40013800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40013c00 	.word	0x40013c00

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b085      	sub	sp, #20
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	460b      	mov	r3, r1
 80010dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4013      	ands	r3, r2
 80010ea:	041a      	lsls	r2, r3, #16
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	887b      	ldrh	r3, [r7, #2]
 80010f2:	400b      	ands	r3, r1
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	3714      	adds	r7, #20
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001108:	b08f      	sub	sp, #60	; 0x3c
 800110a:	af0a      	add	r7, sp, #40	; 0x28
 800110c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e054      	b.n	80011c2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f005 fe02 	bl	8006d3c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2203      	movs	r2, #3
 800113c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fd12 	bl	8003b80 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	687e      	ldr	r6, [r7, #4]
 8001164:	466d      	mov	r5, sp
 8001166:	f106 0410 	add.w	r4, r6, #16
 800116a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800116c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001172:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001176:	e885 0003 	stmia.w	r5, {r0, r1}
 800117a:	1d33      	adds	r3, r6, #4
 800117c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117e:	6838      	ldr	r0, [r7, #0]
 8001180:	f002 fc8c 	bl	8003a9c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2101      	movs	r1, #1
 800118a:	4618      	mov	r0, r3
 800118c:	f002 fd09 	bl	8003ba2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	687e      	ldr	r6, [r7, #4]
 8001198:	466d      	mov	r5, sp
 800119a:	f106 0410 	add.w	r4, r6, #16
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80011ae:	1d33      	adds	r3, r6, #4
 80011b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b2:	6838      	ldr	r0, [r7, #0]
 80011b4:	f002 fe1c 	bl	8003df0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80011ca:	b590      	push	{r4, r7, lr}
 80011cc:	b089      	sub	sp, #36	; 0x24
 80011ce:	af04      	add	r7, sp, #16
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	4608      	mov	r0, r1
 80011d4:	4611      	mov	r1, r2
 80011d6:	461a      	mov	r2, r3
 80011d8:	4603      	mov	r3, r0
 80011da:	70fb      	strb	r3, [r7, #3]
 80011dc:	460b      	mov	r3, r1
 80011de:	70bb      	strb	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d101      	bne.n	80011f2 <HAL_HCD_HC_Init+0x28>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e076      	b.n	80012e0 <HAL_HCD_HC_Init+0x116>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2201      	movs	r2, #1
 80011f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	212c      	movs	r1, #44	; 0x2c
 8001200:	fb01 f303 	mul.w	r3, r1, r3
 8001204:	4413      	add	r3, r2
 8001206:	333d      	adds	r3, #61	; 0x3d
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	212c      	movs	r1, #44	; 0x2c
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	4413      	add	r3, r2
 8001218:	3338      	adds	r3, #56	; 0x38
 800121a:	787a      	ldrb	r2, [r7, #1]
 800121c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800121e:	78fb      	ldrb	r3, [r7, #3]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	212c      	movs	r1, #44	; 0x2c
 8001224:	fb01 f303 	mul.w	r3, r1, r3
 8001228:	4413      	add	r3, r2
 800122a:	3340      	adds	r3, #64	; 0x40
 800122c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800122e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001230:	78fb      	ldrb	r3, [r7, #3]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	212c      	movs	r1, #44	; 0x2c
 8001236:	fb01 f303 	mul.w	r3, r1, r3
 800123a:	4413      	add	r3, r2
 800123c:	3339      	adds	r3, #57	; 0x39
 800123e:	78fa      	ldrb	r2, [r7, #3]
 8001240:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	212c      	movs	r1, #44	; 0x2c
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	4413      	add	r3, r2
 800124e:	333f      	adds	r3, #63	; 0x3f
 8001250:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001254:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	78ba      	ldrb	r2, [r7, #2]
 800125a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800125e:	b2d0      	uxtb	r0, r2
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	212c      	movs	r1, #44	; 0x2c
 8001264:	fb01 f303 	mul.w	r3, r1, r3
 8001268:	4413      	add	r3, r2
 800126a:	333a      	adds	r3, #58	; 0x3a
 800126c:	4602      	mov	r2, r0
 800126e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001270:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001274:	2b00      	cmp	r3, #0
 8001276:	da09      	bge.n	800128c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	212c      	movs	r1, #44	; 0x2c
 800127e:	fb01 f303 	mul.w	r3, r1, r3
 8001282:	4413      	add	r3, r2
 8001284:	333b      	adds	r3, #59	; 0x3b
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e008      	b.n	800129e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800128c:	78fb      	ldrb	r3, [r7, #3]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	212c      	movs	r1, #44	; 0x2c
 8001292:	fb01 f303 	mul.w	r3, r1, r3
 8001296:	4413      	add	r3, r2
 8001298:	333b      	adds	r3, #59	; 0x3b
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	212c      	movs	r1, #44	; 0x2c
 80012a4:	fb01 f303 	mul.w	r3, r1, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	333c      	adds	r3, #60	; 0x3c
 80012ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80012b0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	787c      	ldrb	r4, [r7, #1]
 80012b8:	78ba      	ldrb	r2, [r7, #2]
 80012ba:	78f9      	ldrb	r1, [r7, #3]
 80012bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80012be:	9302      	str	r3, [sp, #8]
 80012c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	4623      	mov	r3, r4
 80012ce:	f002 ff11 	bl	80040f4 <USB_HC_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80012de:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}

080012e8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	460b      	mov	r3, r1
 80012f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_HCD_HC_Halt+0x1e>
 8001302:	2302      	movs	r3, #2
 8001304:	e00f      	b.n	8001326 <HAL_HCD_HC_Halt+0x3e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f003 f94d 	bl	80045b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001324:	7bfb      	ldrb	r3, [r7, #15]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	4608      	mov	r0, r1
 800133a:	4611      	mov	r1, r2
 800133c:	461a      	mov	r2, r3
 800133e:	4603      	mov	r3, r0
 8001340:	70fb      	strb	r3, [r7, #3]
 8001342:	460b      	mov	r3, r1
 8001344:	70bb      	strb	r3, [r7, #2]
 8001346:	4613      	mov	r3, r2
 8001348:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	212c      	movs	r1, #44	; 0x2c
 8001350:	fb01 f303 	mul.w	r3, r1, r3
 8001354:	4413      	add	r3, r2
 8001356:	333b      	adds	r3, #59	; 0x3b
 8001358:	78ba      	ldrb	r2, [r7, #2]
 800135a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	212c      	movs	r1, #44	; 0x2c
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	4413      	add	r3, r2
 8001368:	333f      	adds	r3, #63	; 0x3f
 800136a:	787a      	ldrb	r2, [r7, #1]
 800136c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800136e:	7c3b      	ldrb	r3, [r7, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d112      	bne.n	800139a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	212c      	movs	r1, #44	; 0x2c
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	4413      	add	r3, r2
 8001380:	3342      	adds	r3, #66	; 0x42
 8001382:	2203      	movs	r2, #3
 8001384:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	212c      	movs	r1, #44	; 0x2c
 800138c:	fb01 f303 	mul.w	r3, r1, r3
 8001390:	4413      	add	r3, r2
 8001392:	333d      	adds	r3, #61	; 0x3d
 8001394:	7f3a      	ldrb	r2, [r7, #28]
 8001396:	701a      	strb	r2, [r3, #0]
 8001398:	e008      	b.n	80013ac <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	212c      	movs	r1, #44	; 0x2c
 80013a0:	fb01 f303 	mul.w	r3, r1, r3
 80013a4:	4413      	add	r3, r2
 80013a6:	3342      	adds	r3, #66	; 0x42
 80013a8:	2202      	movs	r2, #2
 80013aa:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	f200 80c6 	bhi.w	8001540 <HAL_HCD_HC_SubmitRequest+0x210>
 80013b4:	a201      	add	r2, pc, #4	; (adr r2, 80013bc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80013b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ba:	bf00      	nop
 80013bc:	080013cd 	.word	0x080013cd
 80013c0:	0800152d 	.word	0x0800152d
 80013c4:	08001431 	.word	0x08001431
 80013c8:	080014af 	.word	0x080014af
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80013cc:	7c3b      	ldrb	r3, [r7, #16]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	f040 80b8 	bne.w	8001544 <HAL_HCD_HC_SubmitRequest+0x214>
 80013d4:	78bb      	ldrb	r3, [r7, #2]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f040 80b4 	bne.w	8001544 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80013dc:	8b3b      	ldrh	r3, [r7, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	212c      	movs	r1, #44	; 0x2c
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	4413      	add	r3, r2
 80013ee:	3355      	adds	r3, #85	; 0x55
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	212c      	movs	r1, #44	; 0x2c
 80013fa:	fb01 f303 	mul.w	r3, r1, r3
 80013fe:	4413      	add	r3, r2
 8001400:	3355      	adds	r3, #85	; 0x55
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d109      	bne.n	800141c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	212c      	movs	r1, #44	; 0x2c
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	4413      	add	r3, r2
 8001414:	3342      	adds	r3, #66	; 0x42
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800141a:	e093      	b.n	8001544 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	212c      	movs	r1, #44	; 0x2c
 8001422:	fb01 f303 	mul.w	r3, r1, r3
 8001426:	4413      	add	r3, r2
 8001428:	3342      	adds	r3, #66	; 0x42
 800142a:	2202      	movs	r2, #2
 800142c:	701a      	strb	r2, [r3, #0]
      break;
 800142e:	e089      	b.n	8001544 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001430:	78bb      	ldrb	r3, [r7, #2]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d11d      	bne.n	8001472 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001436:	78fb      	ldrb	r3, [r7, #3]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	212c      	movs	r1, #44	; 0x2c
 800143c:	fb01 f303 	mul.w	r3, r1, r3
 8001440:	4413      	add	r3, r2
 8001442:	3355      	adds	r3, #85	; 0x55
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d109      	bne.n	800145e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800144a:	78fb      	ldrb	r3, [r7, #3]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	212c      	movs	r1, #44	; 0x2c
 8001450:	fb01 f303 	mul.w	r3, r1, r3
 8001454:	4413      	add	r3, r2
 8001456:	3342      	adds	r3, #66	; 0x42
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800145c:	e073      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	212c      	movs	r1, #44	; 0x2c
 8001464:	fb01 f303 	mul.w	r3, r1, r3
 8001468:	4413      	add	r3, r2
 800146a:	3342      	adds	r3, #66	; 0x42
 800146c:	2202      	movs	r2, #2
 800146e:	701a      	strb	r2, [r3, #0]
      break;
 8001470:	e069      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	212c      	movs	r1, #44	; 0x2c
 8001478:	fb01 f303 	mul.w	r3, r1, r3
 800147c:	4413      	add	r3, r2
 800147e:	3354      	adds	r3, #84	; 0x54
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d109      	bne.n	800149a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001486:	78fb      	ldrb	r3, [r7, #3]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	212c      	movs	r1, #44	; 0x2c
 800148c:	fb01 f303 	mul.w	r3, r1, r3
 8001490:	4413      	add	r3, r2
 8001492:	3342      	adds	r3, #66	; 0x42
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
      break;
 8001498:	e055      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800149a:	78fb      	ldrb	r3, [r7, #3]
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	212c      	movs	r1, #44	; 0x2c
 80014a0:	fb01 f303 	mul.w	r3, r1, r3
 80014a4:	4413      	add	r3, r2
 80014a6:	3342      	adds	r3, #66	; 0x42
 80014a8:	2202      	movs	r2, #2
 80014aa:	701a      	strb	r2, [r3, #0]
      break;
 80014ac:	e04b      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80014ae:	78bb      	ldrb	r3, [r7, #2]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d11d      	bne.n	80014f0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	212c      	movs	r1, #44	; 0x2c
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	4413      	add	r3, r2
 80014c0:	3355      	adds	r3, #85	; 0x55
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d109      	bne.n	80014dc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	212c      	movs	r1, #44	; 0x2c
 80014ce:	fb01 f303 	mul.w	r3, r1, r3
 80014d2:	4413      	add	r3, r2
 80014d4:	3342      	adds	r3, #66	; 0x42
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80014da:	e034      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	212c      	movs	r1, #44	; 0x2c
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	3342      	adds	r3, #66	; 0x42
 80014ea:	2202      	movs	r2, #2
 80014ec:	701a      	strb	r2, [r3, #0]
      break;
 80014ee:	e02a      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	212c      	movs	r1, #44	; 0x2c
 80014f6:	fb01 f303 	mul.w	r3, r1, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	3354      	adds	r3, #84	; 0x54
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d109      	bne.n	8001518 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001504:	78fb      	ldrb	r3, [r7, #3]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	212c      	movs	r1, #44	; 0x2c
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	4413      	add	r3, r2
 8001510:	3342      	adds	r3, #66	; 0x42
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
      break;
 8001516:	e016      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	212c      	movs	r1, #44	; 0x2c
 800151e:	fb01 f303 	mul.w	r3, r1, r3
 8001522:	4413      	add	r3, r2
 8001524:	3342      	adds	r3, #66	; 0x42
 8001526:	2202      	movs	r2, #2
 8001528:	701a      	strb	r2, [r3, #0]
      break;
 800152a:	e00c      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800152c:	78fb      	ldrb	r3, [r7, #3]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	212c      	movs	r1, #44	; 0x2c
 8001532:	fb01 f303 	mul.w	r3, r1, r3
 8001536:	4413      	add	r3, r2
 8001538:	3342      	adds	r3, #66	; 0x42
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]
      break;
 800153e:	e002      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001540:	bf00      	nop
 8001542:	e000      	b.n	8001546 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001544:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001546:	78fb      	ldrb	r3, [r7, #3]
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	212c      	movs	r1, #44	; 0x2c
 800154c:	fb01 f303 	mul.w	r3, r1, r3
 8001550:	4413      	add	r3, r2
 8001552:	3344      	adds	r3, #68	; 0x44
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001558:	78fb      	ldrb	r3, [r7, #3]
 800155a:	8b3a      	ldrh	r2, [r7, #24]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	202c      	movs	r0, #44	; 0x2c
 8001560:	fb00 f303 	mul.w	r3, r0, r3
 8001564:	440b      	add	r3, r1
 8001566:	334c      	adds	r3, #76	; 0x4c
 8001568:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	212c      	movs	r1, #44	; 0x2c
 8001570:	fb01 f303 	mul.w	r3, r1, r3
 8001574:	4413      	add	r3, r2
 8001576:	3360      	adds	r3, #96	; 0x60
 8001578:	2200      	movs	r2, #0
 800157a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	212c      	movs	r1, #44	; 0x2c
 8001582:	fb01 f303 	mul.w	r3, r1, r3
 8001586:	4413      	add	r3, r2
 8001588:	3350      	adds	r3, #80	; 0x50
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800158e:	78fb      	ldrb	r3, [r7, #3]
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	212c      	movs	r1, #44	; 0x2c
 8001594:	fb01 f303 	mul.w	r3, r1, r3
 8001598:	4413      	add	r3, r2
 800159a:	3339      	adds	r3, #57	; 0x39
 800159c:	78fa      	ldrb	r2, [r7, #3]
 800159e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80015a0:	78fb      	ldrb	r3, [r7, #3]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	212c      	movs	r1, #44	; 0x2c
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	3361      	adds	r3, #97	; 0x61
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	78fb      	ldrb	r3, [r7, #3]
 80015b8:	222c      	movs	r2, #44	; 0x2c
 80015ba:	fb02 f303 	mul.w	r3, r2, r3
 80015be:	3338      	adds	r3, #56	; 0x38
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	18d1      	adds	r1, r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	f002 fea0 	bl	8004310 <USB_HC_StartXfer>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop

080015dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fbb9 	bl	8003d6a <USB_GetMode>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	f040 80ef 	bne.w	80017de <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f002 fb9d 	bl	8003d44 <USB_ReadInterrupts>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80e5 	beq.w	80017dc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f002 fb94 	bl	8003d44 <USB_ReadInterrupts>
 800161c:	4603      	mov	r3, r0
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001626:	d104      	bne.n	8001632 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001630:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f002 fb84 	bl	8003d44 <USB_ReadInterrupts>
 800163c:	4603      	mov	r3, r0
 800163e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001646:	d104      	bne.n	8001652 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fb74 	bl	8003d44 <USB_ReadInterrupts>
 800165c:	4603      	mov	r3, r0
 800165e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001662:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001666:	d104      	bne.n	8001672 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f002 fb64 	bl	8003d44 <USB_ReadInterrupts>
 800167c:	4603      	mov	r3, r0
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b02      	cmp	r3, #2
 8001684:	d103      	bne.n	800168e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2202      	movs	r2, #2
 800168c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fb56 	bl	8003d44 <USB_ReadInterrupts>
 8001698:	4603      	mov	r3, r0
 800169a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800169e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a2:	d115      	bne.n	80016d0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d108      	bne.n	80016d0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f005 fbba 	bl	8006e38 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2101      	movs	r1, #1
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fc4c 	bl	8003f68 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fb35 	bl	8003d44 <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e4:	d102      	bne.n	80016ec <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f001 f9ff 	bl	8002aea <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fb27 	bl	8003d44 <USB_ReadInterrupts>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d106      	bne.n	800170e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f005 fb7d 	bl	8006e00 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2208      	movs	r2, #8
 800170c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fb16 	bl	8003d44 <USB_ReadInterrupts>
 8001718:	4603      	mov	r3, r0
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	2b10      	cmp	r3, #16
 8001720:	d101      	bne.n	8001726 <HAL_HCD_IRQHandler+0x14a>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_HCD_IRQHandler+0x14c>
 8001726:	2300      	movs	r3, #0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d012      	beq.n	8001752 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699a      	ldr	r2, [r3, #24]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0210 	bic.w	r2, r2, #16
 800173a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f001 f902 	bl	8002946 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0210 	orr.w	r2, r2, #16
 8001750:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f002 faf4 	bl	8003d44 <USB_ReadInterrupts>
 800175c:	4603      	mov	r3, r0
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001766:	d13a      	bne.n	80017de <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f002 ff11 	bl	8004594 <USB_HC_ReadInterrupt>
 8001772:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	e025      	b.n	80017c6 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	fa22 f303 	lsr.w	r3, r2, r3
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d018      	beq.n	80017c0 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017a4:	d106      	bne.n	80017b4 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 f8ab 	bl	8001908 <HCD_HC_IN_IRQHandler>
 80017b2:	e005      	b.n	80017c0 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	4619      	mov	r1, r3
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 fcc6 	bl	800214c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3301      	adds	r3, #1
 80017c4:	617b      	str	r3, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d3d4      	bcc.n	800177a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	e000      	b.n	80017de <HAL_HCD_IRQHandler+0x202>
      return;
 80017dc:	bf00      	nop
    }
  }
}
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d101      	bne.n	80017fa <HAL_HCD_Start+0x16>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e013      	b.n	8001822 <HAL_HCD_Start+0x3e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f002 f9a9 	bl	8003b5e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fc0c 	bl	8004030 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_HCD_Stop+0x16>
 800183c:	2302      	movs	r3, #2
 800183e:	e00d      	b.n	800185c <HAL_HCD_Stop+0x32>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f003 f80b 	bl	8004868 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fbb3 	bl	8003fdc <USB_ResetPort>
 8001876:	4603      	mov	r3, r0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	460b      	mov	r3, r1
 800188a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3360      	adds	r3, #96	; 0x60
 800189a:	781b      	ldrb	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3350      	adds	r3, #80	; 0x50
 80018c2:	681b      	ldr	r3, [r3, #0]
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f002 fbf7 	bl	80040d0 <USB_GetCurrentFrame>
 80018e2:	4603      	mov	r3, r0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fbd2 	bl	80040a2 <USB_GetHostSpeed>
 80018fe:	4603      	mov	r3, r0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	015a      	lsls	r2, r3, #5
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	4413      	add	r3, r2
 800192a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b04      	cmp	r3, #4
 8001936:	d119      	bne.n	800196c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	015a      	lsls	r2, r3, #5
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4413      	add	r3, r2
 8001940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001944:	461a      	mov	r2, r3
 8001946:	2304      	movs	r3, #4
 8001948:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	015a      	lsls	r2, r3, #5
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4413      	add	r3, r2
 8001952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	0151      	lsls	r1, r2, #5
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	440a      	add	r2, r1
 8001960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	60d3      	str	r3, [r2, #12]
 800196a:	e101      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	015a      	lsls	r2, r3, #5
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4413      	add	r3, r2
 8001974:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001982:	d12b      	bne.n	80019dc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001990:	461a      	mov	r2, r3
 8001992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001996:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	212c      	movs	r1, #44	; 0x2c
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	3361      	adds	r3, #97	; 0x61
 80019a6:	2207      	movs	r2, #7
 80019a8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	0151      	lsls	r1, r2, #5
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	440a      	add	r2, r1
 80019c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019c4:	f043 0302 	orr.w	r3, r3, #2
 80019c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	4611      	mov	r1, r2
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 fdee 	bl	80045b6 <USB_HC_Halt>
 80019da:	e0c9      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	015a      	lsls	r2, r3, #5
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4413      	add	r3, r2
 80019e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0320 	and.w	r3, r3, #32
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	d109      	bne.n	8001a06 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	015a      	lsls	r2, r3, #5
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019fe:	461a      	mov	r2, r3
 8001a00:	2320      	movs	r3, #32
 8001a02:	6093      	str	r3, [r2, #8]
 8001a04:	e0b4      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	015a      	lsls	r2, r3, #5
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d133      	bne.n	8001a84 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	015a      	lsls	r2, r3, #5
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	0151      	lsls	r1, r2, #5
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	440a      	add	r2, r1
 8001a32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a36:	f043 0302 	orr.w	r3, r3, #2
 8001a3a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	212c      	movs	r1, #44	; 0x2c
 8001a42:	fb01 f303 	mul.w	r3, r1, r3
 8001a46:	4413      	add	r3, r2
 8001a48:	3361      	adds	r3, #97	; 0x61
 8001a4a:	2205      	movs	r2, #5
 8001a4c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2308      	movs	r3, #8
 8001a70:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f002 fd9a 	bl	80045b6 <USB_HC_Halt>
 8001a82:	e075      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	015a      	lsls	r2, r3, #5
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9a:	d134      	bne.n	8001b06 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	015a      	lsls	r2, r3, #5
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	0151      	lsls	r1, r2, #5
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	440a      	add	r2, r1
 8001ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	212c      	movs	r1, #44	; 0x2c
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	4413      	add	r3, r2
 8001ac8:	3361      	adds	r3, #97	; 0x61
 8001aca:	2208      	movs	r2, #8
 8001acc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ada:	461a      	mov	r2, r3
 8001adc:	2310      	movs	r3, #16
 8001ade:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	015a      	lsls	r2, r3, #5
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001aec:	461a      	mov	r2, r3
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f002 fd59 	bl	80045b6 <USB_HC_Halt>
 8001b04:	e034      	b.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	015a      	lsls	r2, r3, #5
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b18:	2b80      	cmp	r3, #128	; 0x80
 8001b1a:	d129      	bne.n	8001b70 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	0151      	lsls	r1, r2, #5
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	440a      	add	r2, r1
 8001b32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b36:	f043 0302 	orr.w	r3, r3, #2
 8001b3a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3361      	adds	r3, #97	; 0x61
 8001b4a:	2206      	movs	r2, #6
 8001b4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	4611      	mov	r1, r2
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 fd2c 	bl	80045b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	015a      	lsls	r2, r3, #5
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4413      	add	r3, r2
 8001b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b86:	d122      	bne.n	8001bce <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	015a      	lsls	r2, r3, #5
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	0151      	lsls	r1, r2, #5
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	440a      	add	r2, r1
 8001b9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f002 fcff 	bl	80045b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	015a      	lsls	r2, r3, #5
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bca:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001bcc:	e2ba      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	015a      	lsls	r2, r3, #5
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	f040 811b 	bne.w	8001e1c <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d019      	beq.n	8001c22 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	212c      	movs	r1, #44	; 0x2c
 8001bf4:	fb01 f303 	mul.w	r3, r1, r3
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3348      	adds	r3, #72	; 0x48
 8001bfc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	0159      	lsls	r1, r3, #5
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	440b      	add	r3, r1
 8001c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001c10:	1ad2      	subs	r2, r2, r3
 8001c12:	6879      	ldr	r1, [r7, #4]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	202c      	movs	r0, #44	; 0x2c
 8001c18:	fb00 f303 	mul.w	r3, r0, r3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	3350      	adds	r3, #80	; 0x50
 8001c20:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	212c      	movs	r1, #44	; 0x2c
 8001c28:	fb01 f303 	mul.w	r3, r1, r3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3361      	adds	r3, #97	; 0x61
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	212c      	movs	r1, #44	; 0x2c
 8001c3a:	fb01 f303 	mul.w	r3, r1, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	335c      	adds	r3, #92	; 0x5c
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	461a      	mov	r2, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	212c      	movs	r1, #44	; 0x2c
 8001c5e:	fb01 f303 	mul.w	r3, r1, r3
 8001c62:	4413      	add	r3, r2
 8001c64:	333f      	adds	r3, #63	; 0x3f
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	212c      	movs	r1, #44	; 0x2c
 8001c72:	fb01 f303 	mul.w	r3, r1, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	333f      	adds	r3, #63	; 0x3f
 8001c7a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d121      	bne.n	8001cc4 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	0151      	lsls	r1, r2, #5
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	440a      	add	r2, r1
 8001c96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fc83 	bl	80045b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	015a      	lsls	r2, r3, #5
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	6093      	str	r3, [r2, #8]
 8001cc2:	e066      	b.n	8001d92 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	212c      	movs	r1, #44	; 0x2c
 8001cca:	fb01 f303 	mul.w	r3, r1, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	333f      	adds	r3, #63	; 0x3f
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d127      	bne.n	8001d28 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	015a      	lsls	r2, r3, #5
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	0151      	lsls	r1, r2, #5
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	440a      	add	r2, r1
 8001cee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cf6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	3360      	adds	r3, #96	; 0x60
 8001d06:	2201      	movs	r2, #1
 8001d08:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	b2d9      	uxtb	r1, r3
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	202c      	movs	r0, #44	; 0x2c
 8001d14:	fb00 f303 	mul.w	r3, r0, r3
 8001d18:	4413      	add	r3, r2
 8001d1a:	3360      	adds	r3, #96	; 0x60
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f005 f897 	bl	8006e54 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d26:	e034      	b.n	8001d92 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	212c      	movs	r1, #44	; 0x2c
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	333f      	adds	r3, #63	; 0x3f
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d12a      	bne.n	8001d92 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	212c      	movs	r1, #44	; 0x2c
 8001d42:	fb01 f303 	mul.w	r3, r1, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	3360      	adds	r3, #96	; 0x60
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	212c      	movs	r1, #44	; 0x2c
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	4413      	add	r3, r2
 8001d5a:	3354      	adds	r3, #84	; 0x54
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f083 0301 	eor.w	r3, r3, #1
 8001d62:	b2d8      	uxtb	r0, r3
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	3354      	adds	r3, #84	; 0x54
 8001d72:	4602      	mov	r2, r0
 8001d74:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	b2d9      	uxtb	r1, r3
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	202c      	movs	r0, #44	; 0x2c
 8001d80:	fb00 f303 	mul.w	r3, r0, r3
 8001d84:	4413      	add	r3, r2
 8001d86:	3360      	adds	r3, #96	; 0x60
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f005 f861 	bl	8006e54 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d12b      	bne.n	8001df2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3348      	adds	r3, #72	; 0x48
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	202c      	movs	r0, #44	; 0x2c
 8001db0:	fb00 f202 	mul.w	r2, r0, r2
 8001db4:	440a      	add	r2, r1
 8001db6:	3240      	adds	r2, #64	; 0x40
 8001db8:	8812      	ldrh	r2, [r2, #0]
 8001dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 81be 	beq.w	8002144 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3354      	adds	r3, #84	; 0x54
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2d8      	uxtb	r0, r3
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	212c      	movs	r1, #44	; 0x2c
 8001de4:	fb01 f303 	mul.w	r3, r1, r3
 8001de8:	4413      	add	r3, r2
 8001dea:	3354      	adds	r3, #84	; 0x54
 8001dec:	4602      	mov	r2, r0
 8001dee:	701a      	strb	r2, [r3, #0]
}
 8001df0:	e1a8      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3354      	adds	r3, #84	; 0x54
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	f083 0301 	eor.w	r3, r3, #1
 8001e06:	b2d8      	uxtb	r0, r3
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3354      	adds	r3, #84	; 0x54
 8001e16:	4602      	mov	r2, r0
 8001e18:	701a      	strb	r2, [r3, #0]
}
 8001e1a:	e193      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	015a      	lsls	r2, r3, #5
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4413      	add	r3, r2
 8001e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	f040 8106 	bne.w	8002040 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	0151      	lsls	r1, r2, #5
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	440a      	add	r2, r1
 8001e4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e4e:	f023 0302 	bic.w	r3, r3, #2
 8001e52:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	212c      	movs	r1, #44	; 0x2c
 8001e5a:	fb01 f303 	mul.w	r3, r1, r3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3361      	adds	r3, #97	; 0x61
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d109      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	212c      	movs	r1, #44	; 0x2c
 8001e6e:	fb01 f303 	mul.w	r3, r1, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	3360      	adds	r3, #96	; 0x60
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
 8001e7a:	e0c9      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3361      	adds	r3, #97	; 0x61
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d109      	bne.n	8001ea4 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3360      	adds	r3, #96	; 0x60
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	e0b5      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	212c      	movs	r1, #44	; 0x2c
 8001eaa:	fb01 f303 	mul.w	r3, r1, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	3361      	adds	r3, #97	; 0x61
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b06      	cmp	r3, #6
 8001eb6:	d009      	beq.n	8001ecc <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	212c      	movs	r1, #44	; 0x2c
 8001ebe:	fb01 f303 	mul.w	r3, r1, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	3361      	adds	r3, #97	; 0x61
 8001ec6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d150      	bne.n	8001f6e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	212c      	movs	r1, #44	; 0x2c
 8001ed2:	fb01 f303 	mul.w	r3, r1, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	335c      	adds	r3, #92	; 0x5c
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	202c      	movs	r0, #44	; 0x2c
 8001ee4:	fb00 f303 	mul.w	r3, r0, r3
 8001ee8:	440b      	add	r3, r1
 8001eea:	335c      	adds	r3, #92	; 0x5c
 8001eec:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	212c      	movs	r1, #44	; 0x2c
 8001ef4:	fb01 f303 	mul.w	r3, r1, r3
 8001ef8:	4413      	add	r3, r2
 8001efa:	335c      	adds	r3, #92	; 0x5c
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d912      	bls.n	8001f28 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	335c      	adds	r3, #92	; 0x5c
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3360      	adds	r3, #96	; 0x60
 8001f22:	2204      	movs	r2, #4
 8001f24:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f26:	e073      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	3360      	adds	r3, #96	; 0x60
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f50:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f58:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f66:	461a      	mov	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001f6c:	e050      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	212c      	movs	r1, #44	; 0x2c
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3361      	adds	r3, #97	; 0x61
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d122      	bne.n	8001fc8 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	212c      	movs	r1, #44	; 0x2c
 8001f88:	fb01 f303 	mul.w	r3, r1, r3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3360      	adds	r3, #96	; 0x60
 8001f90:	2202      	movs	r2, #2
 8001f92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	015a      	lsls	r2, r3, #5
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001faa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e023      	b.n	8002010 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3361      	adds	r3, #97	; 0x61
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b07      	cmp	r3, #7
 8001fda:	d119      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	335c      	adds	r3, #92	; 0x5c
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	202c      	movs	r0, #44	; 0x2c
 8001ff4:	fb00 f303 	mul.w	r3, r0, r3
 8001ff8:	440b      	add	r3, r1
 8001ffa:	335c      	adds	r3, #92	; 0x5c
 8001ffc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	212c      	movs	r1, #44	; 0x2c
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	3360      	adds	r3, #96	; 0x60
 800200c:	2204      	movs	r2, #4
 800200e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	461a      	mov	r2, r3
 800201e:	2302      	movs	r3, #2
 8002020:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	b2d9      	uxtb	r1, r3
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	202c      	movs	r0, #44	; 0x2c
 800202c:	fb00 f303 	mul.w	r3, r0, r3
 8002030:	4413      	add	r3, r2
 8002032:	3360      	adds	r3, #96	; 0x60
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f004 ff0b 	bl	8006e54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800203e:	e081      	b.n	8002144 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	2b10      	cmp	r3, #16
 8002054:	d176      	bne.n	8002144 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	212c      	movs	r1, #44	; 0x2c
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	4413      	add	r3, r2
 8002062:	333f      	adds	r3, #63	; 0x3f
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b03      	cmp	r3, #3
 8002068:	d121      	bne.n	80020ae <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	335c      	adds	r3, #92	; 0x5c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	015a      	lsls	r2, r3, #5
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	4413      	add	r3, r2
 8002084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	0151      	lsls	r1, r2, #5
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	440a      	add	r2, r1
 8002092:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f002 fa85 	bl	80045b6 <USB_HC_Halt>
 80020ac:	e041      	b.n	8002132 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	333f      	adds	r3, #63	; 0x3f
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	333f      	adds	r3, #63	; 0x3f
 80020d0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d12d      	bne.n	8002132 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	335c      	adds	r3, #92	; 0x5c
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d120      	bne.n	8002132 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	212c      	movs	r1, #44	; 0x2c
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	4413      	add	r3, r2
 80020fc:	3361      	adds	r3, #97	; 0x61
 80020fe:	2203      	movs	r2, #3
 8002100:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	015a      	lsls	r2, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4413      	add	r3, r2
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	0151      	lsls	r1, r2, #5
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	440a      	add	r2, r1
 8002118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f002 fa42 	bl	80045b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	461a      	mov	r2, r3
 8002140:	2310      	movs	r3, #16
 8002142:	6093      	str	r3, [r2, #8]
}
 8002144:	bf00      	nop
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4413      	add	r3, r2
 800216e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b04      	cmp	r3, #4
 800217a:	d119      	bne.n	80021b0 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	461a      	mov	r2, r3
 800218a:	2304      	movs	r3, #4
 800218c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	0151      	lsls	r1, r2, #5
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	440a      	add	r2, r1
 80021a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021a8:	f043 0302 	orr.w	r3, r3, #2
 80021ac:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80021ae:	e3c6      	b.n	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d13e      	bne.n	8002244 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	461a      	mov	r2, r3
 80021d4:	2320      	movs	r3, #32
 80021d6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	212c      	movs	r1, #44	; 0x2c
 80021de:	fb01 f303 	mul.w	r3, r1, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	333d      	adds	r3, #61	; 0x3d
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f040 83a8 	bne.w	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	212c      	movs	r1, #44	; 0x2c
 80021f4:	fb01 f303 	mul.w	r3, r1, r3
 80021f8:	4413      	add	r3, r2
 80021fa:	333d      	adds	r3, #61	; 0x3d
 80021fc:	2200      	movs	r2, #0
 80021fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	212c      	movs	r1, #44	; 0x2c
 8002206:	fb01 f303 	mul.w	r3, r1, r3
 800220a:	4413      	add	r3, r2
 800220c:	3360      	adds	r3, #96	; 0x60
 800220e:	2202      	movs	r2, #2
 8002210:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	015a      	lsls	r2, r3, #5
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	4413      	add	r3, r2
 800221a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	0151      	lsls	r1, r2, #5
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	440a      	add	r2, r1
 8002228:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f002 f9ba 	bl	80045b6 <USB_HC_Halt>
}
 8002242:	e37c      	b.n	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	4413      	add	r3, r2
 800224c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800225a:	d122      	bne.n	80022a2 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	4413      	add	r3, r2
 8002264:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	0151      	lsls	r1, r2, #5
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	440a      	add	r2, r1
 8002272:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002276:	f043 0302 	orr.w	r3, r3, #2
 800227a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f002 f995 	bl	80045b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	4413      	add	r3, r2
 8002294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002298:	461a      	mov	r2, r3
 800229a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800229e:	6093      	str	r3, [r2, #8]
}
 80022a0:	e34d      	b.n	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	015a      	lsls	r2, r3, #5
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d150      	bne.n	800235a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	335c      	adds	r3, #92	; 0x5c
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d111      	bne.n	8002304 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	212c      	movs	r1, #44	; 0x2c
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	4413      	add	r3, r2
 80022ec:	333d      	adds	r3, #61	; 0x3d
 80022ee:	2201      	movs	r2, #1
 80022f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	015a      	lsls	r2, r3, #5
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4413      	add	r3, r2
 80022fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fe:	461a      	mov	r2, r3
 8002300:	2340      	movs	r3, #64	; 0x40
 8002302:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	4413      	add	r3, r2
 800230c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	0151      	lsls	r1, r2, #5
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	440a      	add	r2, r1
 800231a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800231e:	f043 0302 	orr.w	r3, r3, #2
 8002322:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	4611      	mov	r1, r2
 800232e:	4618      	mov	r0, r3
 8002330:	f002 f941 	bl	80045b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	4413      	add	r3, r2
 800233c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002340:	461a      	mov	r2, r3
 8002342:	2301      	movs	r3, #1
 8002344:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	3361      	adds	r3, #97	; 0x61
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]
}
 8002358:	e2f1      	b.n	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d13c      	bne.n	80023ea <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	212c      	movs	r1, #44	; 0x2c
 8002376:	fb01 f303 	mul.w	r3, r1, r3
 800237a:	4413      	add	r3, r2
 800237c:	3361      	adds	r3, #97	; 0x61
 800237e:	2204      	movs	r2, #4
 8002380:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	333d      	adds	r3, #61	; 0x3d
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	335c      	adds	r3, #92	; 0x5c
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	0151      	lsls	r1, r2, #5
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	440a      	add	r2, r1
 80023bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c0:	f043 0302 	orr.w	r3, r3, #2
 80023c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f002 f8f0 	bl	80045b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	015a      	lsls	r2, r3, #5
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	4413      	add	r3, r2
 80023de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e2:	461a      	mov	r2, r3
 80023e4:	2340      	movs	r3, #64	; 0x40
 80023e6:	6093      	str	r3, [r2, #8]
}
 80023e8:	e2a9      	b.n	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	015a      	lsls	r2, r3, #5
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4413      	add	r3, r2
 80023f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d12a      	bne.n	8002456 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	2308      	movs	r3, #8
 8002410:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	0151      	lsls	r1, r2, #5
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	440a      	add	r2, r1
 8002428:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f002 f8ba 	bl	80045b6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	212c      	movs	r1, #44	; 0x2c
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	4413      	add	r3, r2
 800244e:	3361      	adds	r3, #97	; 0x61
 8002450:	2205      	movs	r2, #5
 8002452:	701a      	strb	r2, [r3, #0]
}
 8002454:	e273      	b.n	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b10      	cmp	r3, #16
 800246a:	d150      	bne.n	800250e <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	212c      	movs	r1, #44	; 0x2c
 8002472:	fb01 f303 	mul.w	r3, r1, r3
 8002476:	4413      	add	r3, r2
 8002478:	335c      	adds	r3, #92	; 0x5c
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	212c      	movs	r1, #44	; 0x2c
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	4413      	add	r3, r2
 800248a:	3361      	adds	r3, #97	; 0x61
 800248c:	2203      	movs	r2, #3
 800248e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	212c      	movs	r1, #44	; 0x2c
 8002496:	fb01 f303 	mul.w	r3, r1, r3
 800249a:	4413      	add	r3, r2
 800249c:	333d      	adds	r3, #61	; 0x3d
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d112      	bne.n	80024ca <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	212c      	movs	r1, #44	; 0x2c
 80024aa:	fb01 f303 	mul.w	r3, r1, r3
 80024ae:	4413      	add	r3, r2
 80024b0:	333c      	adds	r3, #60	; 0x3c
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d108      	bne.n	80024ca <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	333d      	adds	r3, #61	; 0x3d
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	0151      	lsls	r1, r2, #5
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	440a      	add	r2, r1
 80024e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f002 f85e 	bl	80045b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	461a      	mov	r2, r3
 8002508:	2310      	movs	r3, #16
 800250a:	6093      	str	r3, [r2, #8]
}
 800250c:	e217      	b.n	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002520:	2b80      	cmp	r3, #128	; 0x80
 8002522:	d174      	bne.n	800260e <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d121      	bne.n	8002570 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	212c      	movs	r1, #44	; 0x2c
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	4413      	add	r3, r2
 8002538:	3361      	adds	r3, #97	; 0x61
 800253a:	2206      	movs	r2, #6
 800253c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	0151      	lsls	r1, r2, #5
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	440a      	add	r2, r1
 8002554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f002 f824 	bl	80045b6 <USB_HC_Halt>
 800256e:	e044      	b.n	80025fa <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	212c      	movs	r1, #44	; 0x2c
 8002576:	fb01 f303 	mul.w	r3, r1, r3
 800257a:	4413      	add	r3, r2
 800257c:	335c      	adds	r3, #92	; 0x5c
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	1c5a      	adds	r2, r3, #1
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	202c      	movs	r0, #44	; 0x2c
 8002588:	fb00 f303 	mul.w	r3, r0, r3
 800258c:	440b      	add	r3, r1
 800258e:	335c      	adds	r3, #92	; 0x5c
 8002590:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	212c      	movs	r1, #44	; 0x2c
 8002598:	fb01 f303 	mul.w	r3, r1, r3
 800259c:	4413      	add	r3, r2
 800259e:	335c      	adds	r3, #92	; 0x5c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d920      	bls.n	80025e8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	212c      	movs	r1, #44	; 0x2c
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	335c      	adds	r3, #92	; 0x5c
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3360      	adds	r3, #96	; 0x60
 80025c6:	2204      	movs	r2, #4
 80025c8:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	b2d9      	uxtb	r1, r3
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	202c      	movs	r0, #44	; 0x2c
 80025d4:	fb00 f303 	mul.w	r3, r0, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3360      	adds	r3, #96	; 0x60
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f004 fc37 	bl	8006e54 <HAL_HCD_HC_NotifyURBChange_Callback>
 80025e6:	e008      	b.n	80025fa <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	212c      	movs	r1, #44	; 0x2c
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4413      	add	r3, r2
 80025f4:	3360      	adds	r3, #96	; 0x60
 80025f6:	2202      	movs	r2, #2
 80025f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002606:	461a      	mov	r2, r3
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	6093      	str	r3, [r2, #8]
}
 800260c:	e197      	b.n	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	015a      	lsls	r2, r3, #5
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4413      	add	r3, r2
 8002616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002624:	d134      	bne.n	8002690 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	015a      	lsls	r2, r3, #5
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4413      	add	r3, r2
 800262e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	0151      	lsls	r1, r2, #5
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	440a      	add	r2, r1
 800263c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	4611      	mov	r1, r2
 8002650:	4618      	mov	r0, r3
 8002652:	f001 ffb0 	bl	80045b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	015a      	lsls	r2, r3, #5
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4413      	add	r3, r2
 800265e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002662:	461a      	mov	r2, r3
 8002664:	2310      	movs	r3, #16
 8002666:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800267a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	3361      	adds	r3, #97	; 0x61
 800268a:	2208      	movs	r2, #8
 800268c:	701a      	strb	r2, [r3, #0]
}
 800268e:	e156      	b.n	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	f040 814b 	bne.w	800293e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	015a      	lsls	r2, r3, #5
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	4413      	add	r3, r2
 80026b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	0151      	lsls	r1, r2, #5
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	440a      	add	r2, r1
 80026be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026c2:	f023 0302 	bic.w	r3, r3, #2
 80026c6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3361      	adds	r3, #97	; 0x61
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d179      	bne.n	80027d0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	3360      	adds	r3, #96	; 0x60
 80026ea:	2201      	movs	r2, #1
 80026ec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	333f      	adds	r3, #63	; 0x3f
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d00a      	beq.n	8002718 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	212c      	movs	r1, #44	; 0x2c
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	333f      	adds	r3, #63	; 0x3f
 8002710:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002712:	2b03      	cmp	r3, #3
 8002714:	f040 80fc 	bne.w	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d142      	bne.n	80027a6 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	334c      	adds	r3, #76	; 0x4c
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 80ed 	beq.w	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	212c      	movs	r1, #44	; 0x2c
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	4413      	add	r3, r2
 8002742:	334c      	adds	r3, #76	; 0x4c
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	202c      	movs	r0, #44	; 0x2c
 800274c:	fb00 f202 	mul.w	r2, r0, r2
 8002750:	440a      	add	r2, r1
 8002752:	3240      	adds	r2, #64	; 0x40
 8002754:	8812      	ldrh	r2, [r2, #0]
 8002756:	4413      	add	r3, r2
 8002758:	3b01      	subs	r3, #1
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	202c      	movs	r0, #44	; 0x2c
 8002760:	fb00 f202 	mul.w	r2, r0, r2
 8002764:	440a      	add	r2, r1
 8002766:	3240      	adds	r2, #64	; 0x40
 8002768:	8812      	ldrh	r2, [r2, #0]
 800276a:	fbb3 f3f2 	udiv	r3, r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80ca 	beq.w	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	212c      	movs	r1, #44	; 0x2c
 8002782:	fb01 f303 	mul.w	r3, r1, r3
 8002786:	4413      	add	r3, r2
 8002788:	3355      	adds	r3, #85	; 0x55
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	f083 0301 	eor.w	r3, r3, #1
 8002790:	b2d8      	uxtb	r0, r3
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	212c      	movs	r1, #44	; 0x2c
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	3355      	adds	r3, #85	; 0x55
 80027a0:	4602      	mov	r2, r0
 80027a2:	701a      	strb	r2, [r3, #0]
 80027a4:	e0b4      	b.n	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	212c      	movs	r1, #44	; 0x2c
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	3355      	adds	r3, #85	; 0x55
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	f083 0301 	eor.w	r3, r3, #1
 80027ba:	b2d8      	uxtb	r0, r3
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3355      	adds	r3, #85	; 0x55
 80027ca:	4602      	mov	r2, r0
 80027cc:	701a      	strb	r2, [r3, #0]
 80027ce:	e09f      	b.n	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3361      	adds	r3, #97	; 0x61
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d109      	bne.n	80027f8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3360      	adds	r3, #96	; 0x60
 80027f2:	2202      	movs	r2, #2
 80027f4:	701a      	strb	r2, [r3, #0]
 80027f6:	e08b      	b.n	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3361      	adds	r3, #97	; 0x61
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d109      	bne.n	8002820 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	3360      	adds	r3, #96	; 0x60
 800281a:	2202      	movs	r2, #2
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	e077      	b.n	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	212c      	movs	r1, #44	; 0x2c
 8002826:	fb01 f303 	mul.w	r3, r1, r3
 800282a:	4413      	add	r3, r2
 800282c:	3361      	adds	r3, #97	; 0x61
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d109      	bne.n	8002848 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	212c      	movs	r1, #44	; 0x2c
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	4413      	add	r3, r2
 8002840:	3360      	adds	r3, #96	; 0x60
 8002842:	2205      	movs	r2, #5
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e063      	b.n	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	212c      	movs	r1, #44	; 0x2c
 800284e:	fb01 f303 	mul.w	r3, r1, r3
 8002852:	4413      	add	r3, r2
 8002854:	3361      	adds	r3, #97	; 0x61
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b06      	cmp	r3, #6
 800285a:	d009      	beq.n	8002870 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	212c      	movs	r1, #44	; 0x2c
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4413      	add	r3, r2
 8002868:	3361      	adds	r3, #97	; 0x61
 800286a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800286c:	2b08      	cmp	r3, #8
 800286e:	d14f      	bne.n	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	335c      	adds	r3, #92	; 0x5c
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	202c      	movs	r0, #44	; 0x2c
 8002888:	fb00 f303 	mul.w	r3, r0, r3
 800288c:	440b      	add	r3, r1
 800288e:	335c      	adds	r3, #92	; 0x5c
 8002890:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	212c      	movs	r1, #44	; 0x2c
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	4413      	add	r3, r2
 800289e:	335c      	adds	r3, #92	; 0x5c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d912      	bls.n	80028cc <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	335c      	adds	r3, #92	; 0x5c
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3360      	adds	r3, #96	; 0x60
 80028c6:	2204      	movs	r2, #4
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e021      	b.n	8002910 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	3360      	adds	r3, #96	; 0x60
 80028da:	2202      	movs	r2, #2
 80028dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028f4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028fc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	461a      	mov	r2, r3
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2302      	movs	r3, #2
 8002920:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	b2d9      	uxtb	r1, r3
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	202c      	movs	r0, #44	; 0x2c
 800292c:	fb00 f303 	mul.w	r3, r0, r3
 8002930:	4413      	add	r3, r2
 8002932:	3360      	adds	r3, #96	; 0x60
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f004 fa8b 	bl	8006e54 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800293e:	bf00      	nop
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b08a      	sub	sp, #40	; 0x28
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	0c5b      	lsrs	r3, r3, #17
 800296c:	f003 030f 	and.w	r3, r3, #15
 8002970:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800297a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d004      	beq.n	800298c <HCD_RXQLVL_IRQHandler+0x46>
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b05      	cmp	r3, #5
 8002986:	f000 80a9 	beq.w	8002adc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800298a:	e0aa      	b.n	8002ae2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 80a6 	beq.w	8002ae0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	3344      	adds	r3, #68	; 0x44
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 809b 	beq.w	8002ae0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	3350      	adds	r3, #80	; 0x50
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	441a      	add	r2, r3
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	202c      	movs	r0, #44	; 0x2c
 80029c4:	fb00 f303 	mul.w	r3, r0, r3
 80029c8:	440b      	add	r3, r1
 80029ca:	334c      	adds	r3, #76	; 0x4c
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d87a      	bhi.n	8002ac8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	212c      	movs	r1, #44	; 0x2c
 80029dc:	fb01 f303 	mul.w	r3, r1, r3
 80029e0:	4413      	add	r3, r2
 80029e2:	3344      	adds	r3, #68	; 0x44
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	b292      	uxth	r2, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f001 f981 	bl	8003cf2 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3344      	adds	r3, #68	; 0x44
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	441a      	add	r2, r3
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	202c      	movs	r0, #44	; 0x2c
 8002a0a:	fb00 f303 	mul.w	r3, r0, r3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3344      	adds	r3, #68	; 0x44
 8002a12:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	3350      	adds	r3, #80	; 0x50
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	441a      	add	r2, r3
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	202c      	movs	r0, #44	; 0x2c
 8002a2e:	fb00 f303 	mul.w	r3, r0, r3
 8002a32:	440b      	add	r3, r1
 8002a34:	3350      	adds	r3, #80	; 0x50
 8002a36:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	0cdb      	lsrs	r3, r3, #19
 8002a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a4c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	212c      	movs	r1, #44	; 0x2c
 8002a54:	fb01 f303 	mul.w	r3, r1, r3
 8002a58:	4413      	add	r3, r2
 8002a5a:	3340      	adds	r3, #64	; 0x40
 8002a5c:	881b      	ldrh	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d13c      	bne.n	8002ae0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d039      	beq.n	8002ae0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a82:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a8a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	6a3b      	ldr	r3, [r7, #32]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a98:	461a      	mov	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3354      	adds	r3, #84	; 0x54
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	f083 0301 	eor.w	r3, r3, #1
 8002ab2:	b2d8      	uxtb	r0, r3
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3354      	adds	r3, #84	; 0x54
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	701a      	strb	r2, [r3, #0]
      break;
 8002ac6:	e00b      	b.n	8002ae0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3360      	adds	r3, #96	; 0x60
 8002ad6:	2204      	movs	r2, #4
 8002ad8:	701a      	strb	r2, [r3, #0]
      break;
 8002ada:	e001      	b.n	8002ae0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002adc:	bf00      	nop
 8002ade:	e000      	b.n	8002ae2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ae0:	bf00      	nop
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3728      	adds	r7, #40	; 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b086      	sub	sp, #24
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b16:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d10b      	bne.n	8002b3a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d102      	bne.n	8002b32 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f004 f975 	bl	8006e1c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d132      	bne.n	8002baa <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f043 0308 	orr.w	r3, r3, #8
 8002b4a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d126      	bne.n	8002ba4 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d113      	bne.n	8002b86 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002b64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b68:	d106      	bne.n	8002b78 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2102      	movs	r1, #2
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 f9f9 	bl	8003f68 <USB_InitFSLSPClkSel>
 8002b76:	e011      	b.n	8002b9c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f001 f9f2 	bl	8003f68 <USB_InitFSLSPClkSel>
 8002b84:	e00a      	b.n	8002b9c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d106      	bne.n	8002b9c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b94:	461a      	mov	r2, r3
 8002b96:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002b9a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f004 f967 	bl	8006e70 <HAL_HCD_PortEnabled_Callback>
 8002ba2:	e002      	b.n	8002baa <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f004 f971 	bl	8006e8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d103      	bne.n	8002bbc <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f043 0320 	orr.w	r3, r3, #32
 8002bba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e264      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d075      	beq.n	8002cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bee:	4ba3      	ldr	r3, [pc, #652]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4ba0      	ldr	r3, [pc, #640]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d112      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b9d      	ldr	r3, [pc, #628]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b99      	ldr	r3, [pc, #612]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x108>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d157      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e23f      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x74>
 8002c36:	4b91      	ldr	r3, [pc, #580]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a90      	ldr	r2, [pc, #576]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b8b      	ldr	r3, [pc, #556]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a8a      	ldr	r2, [pc, #552]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b88      	ldr	r3, [pc, #544]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a87      	ldr	r2, [pc, #540]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c68:	4b84      	ldr	r3, [pc, #528]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a83      	ldr	r2, [pc, #524]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b81      	ldr	r3, [pc, #516]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a80      	ldr	r2, [pc, #512]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fd ff44 	bl	8000b14 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fd ff40 	bl	8000b14 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e204      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b76      	ldr	r3, [pc, #472]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fd ff30 	bl	8000b14 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fd ff2c 	bl	8000b14 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1f0      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xe8>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b62      	ldr	r3, [pc, #392]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b5f      	ldr	r3, [pc, #380]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b5c      	ldr	r3, [pc, #368]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1c4      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b56      	ldr	r3, [pc, #344]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4952      	ldr	r1, [pc, #328]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b4f      	ldr	r3, [pc, #316]	; (8002e80 <HAL_RCC_OscConfig+0x2b0>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7fd fee5 	bl	8000b14 <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7fd fee1 	bl	8000b14 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1a5      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b46      	ldr	r3, [pc, #280]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b43      	ldr	r3, [pc, #268]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4940      	ldr	r1, [pc, #256]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b3f      	ldr	r3, [pc, #252]	; (8002e80 <HAL_RCC_OscConfig+0x2b0>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fd fec4 	bl	8000b14 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fd fec0 	bl	8000b14 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e184      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d030      	beq.n	8002e1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_RCC_OscConfig+0x2b4>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fd fea4 	bl	8000b14 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fd fea0 	bl	8000b14 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e164      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x200>
 8002dee:	e015      	b.n	8002e1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCC_OscConfig+0x2b4>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df6:	f7fd fe8d 	bl	8000b14 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	e008      	b.n	8002e10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7fd fe89 	bl	8000b14 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e14d      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f0      	bne.n	8002dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a0 	beq.w	8002f6a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e48:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCC_OscConfig+0x2ac>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_RCC_OscConfig+0x2b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d121      	bne.n	8002eaa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e66:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_RCC_OscConfig+0x2b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <HAL_RCC_OscConfig+0x2b8>)
 8002e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e72:	f7fd fe4f 	bl	8000b14 <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	e011      	b.n	8002e9e <HAL_RCC_OscConfig+0x2ce>
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	42470000 	.word	0x42470000
 8002e84:	42470e80 	.word	0x42470e80
 8002e88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8c:	f7fd fe42 	bl	8000b14 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e106      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9e:	4b85      	ldr	r3, [pc, #532]	; (80030b4 <HAL_RCC_OscConfig+0x4e4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d106      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x2f0>
 8002eb2:	4b81      	ldr	r3, [pc, #516]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebe:	e01c      	b.n	8002efa <HAL_RCC_OscConfig+0x32a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b05      	cmp	r3, #5
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x312>
 8002ec8:	4b7b      	ldr	r3, [pc, #492]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a7a      	ldr	r2, [pc, #488]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	4b78      	ldr	r3, [pc, #480]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	4a77      	ldr	r2, [pc, #476]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee0:	e00b      	b.n	8002efa <HAL_RCC_OscConfig+0x32a>
 8002ee2:	4b75      	ldr	r3, [pc, #468]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a74      	ldr	r2, [pc, #464]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ee8:	f023 0301 	bic.w	r3, r3, #1
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
 8002eee:	4b72      	ldr	r3, [pc, #456]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef2:	4a71      	ldr	r2, [pc, #452]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002ef4:	f023 0304 	bic.w	r3, r3, #4
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d015      	beq.n	8002f2e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7fd fe07 	bl	8000b14 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7fd fe03 	bl	8000b14 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0c5      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	4b65      	ldr	r3, [pc, #404]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ee      	beq.n	8002f0a <HAL_RCC_OscConfig+0x33a>
 8002f2c:	e014      	b.n	8002f58 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fd fdf1 	bl	8000b14 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f34:	e00a      	b.n	8002f4c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fd fded 	bl	8000b14 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d901      	bls.n	8002f4c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e0af      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	4b5a      	ldr	r3, [pc, #360]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1ee      	bne.n	8002f36 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f58:	7dfb      	ldrb	r3, [r7, #23]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a55      	ldr	r2, [pc, #340]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 809b 	beq.w	80030aa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f74:	4b50      	ldr	r3, [pc, #320]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d05c      	beq.n	800303a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d141      	bne.n	800300c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4b4c      	ldr	r3, [pc, #304]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fdc1 	bl	8000b14 <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fd fdbd 	bl	8000b14 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e081      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa8:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1f0      	bne.n	8002f96 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	019b      	lsls	r3, r3, #6
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	085b      	lsrs	r3, r3, #1
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	4937      	ldr	r1, [pc, #220]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fde:	4b37      	ldr	r3, [pc, #220]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fd fd96 	bl	8000b14 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fd fd92 	bl	8000b14 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e056      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f0      	beq.n	8002fec <HAL_RCC_OscConfig+0x41c>
 800300a:	e04e      	b.n	80030aa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300c:	4b2b      	ldr	r3, [pc, #172]	; (80030bc <HAL_RCC_OscConfig+0x4ec>)
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fd fd7f 	bl	8000b14 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301a:	f7fd fd7b 	bl	8000b14 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e03f      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1f0      	bne.n	800301a <HAL_RCC_OscConfig+0x44a>
 8003038:	e037      	b.n	80030aa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e032      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <HAL_RCC_OscConfig+0x4e8>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d028      	beq.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d121      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d11a      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003076:	4013      	ands	r3, r2
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800307c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800307e:	4293      	cmp	r3, r2
 8003080:	d111      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40007000 	.word	0x40007000
 80030b8:	40023800 	.word	0x40023800
 80030bc:	42470060 	.word	0x42470060

080030c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e0cc      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030d4:	4b68      	ldr	r3, [pc, #416]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d90c      	bls.n	80030fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b65      	ldr	r3, [pc, #404]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b63      	ldr	r3, [pc, #396]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0b8      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d020      	beq.n	800314a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003114:	4b59      	ldr	r3, [pc, #356]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a58      	ldr	r2, [pc, #352]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800311e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	4a52      	ldr	r2, [pc, #328]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003138:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	494d      	ldr	r1, [pc, #308]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d044      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315e:	4b47      	ldr	r3, [pc, #284]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d119      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d003      	beq.n	800317e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800317a:	2b03      	cmp	r3, #3
 800317c:	d107      	bne.n	800318e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800317e:	4b3f      	ldr	r3, [pc, #252]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e06f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318e:	4b3b      	ldr	r3, [pc, #236]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e067      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800319e:	4b37      	ldr	r3, [pc, #220]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f023 0203 	bic.w	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4934      	ldr	r1, [pc, #208]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031b0:	f7fd fcb0 	bl	8000b14 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b8:	f7fd fcac 	bl	8000b14 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e04f      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ce:	4b2b      	ldr	r3, [pc, #172]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 020c 	and.w	r2, r3, #12
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	429a      	cmp	r2, r3
 80031de:	d1eb      	bne.n	80031b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d20c      	bcs.n	8003208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_RCC_ClockConfig+0x1b8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d001      	beq.n	8003208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e032      	b.n	800326e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4916      	ldr	r1, [pc, #88]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	490e      	ldr	r1, [pc, #56]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	4313      	orrs	r3, r2
 8003244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003246:	f000 f821 	bl	800328c <HAL_RCC_GetSysClockFreq>
 800324a:	4602      	mov	r2, r0
 800324c:	4b0b      	ldr	r3, [pc, #44]	; (800327c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	091b      	lsrs	r3, r3, #4
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	490a      	ldr	r1, [pc, #40]	; (8003280 <HAL_RCC_ClockConfig+0x1c0>)
 8003258:	5ccb      	ldrb	r3, [r1, r3]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	4a09      	ldr	r2, [pc, #36]	; (8003284 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_ClockConfig+0x1c8>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fd fc10 	bl	8000a8c <HAL_InitTick>

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40023c00 	.word	0x40023c00
 800327c:	40023800 	.word	0x40023800
 8003280:	08007b70 	.word	0x08007b70
 8003284:	20000000 	.word	0x20000000
 8003288:	20000004 	.word	0x20000004

0800328c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800328c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	2300      	movs	r3, #0
 800329e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032a4:	4b67      	ldr	r3, [pc, #412]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d00d      	beq.n	80032cc <HAL_RCC_GetSysClockFreq+0x40>
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	f200 80bd 	bhi.w	8003430 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032be:	e0b7      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032c0:	4b61      	ldr	r3, [pc, #388]	; (8003448 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032c2:	60bb      	str	r3, [r7, #8]
       break;
 80032c4:	e0b7      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032c6:	4b61      	ldr	r3, [pc, #388]	; (800344c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032c8:	60bb      	str	r3, [r7, #8]
      break;
 80032ca:	e0b4      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032cc:	4b5d      	ldr	r3, [pc, #372]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032d6:	4b5b      	ldr	r3, [pc, #364]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d04d      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e2:	4b58      	ldr	r3, [pc, #352]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	099b      	lsrs	r3, r3, #6
 80032e8:	461a      	mov	r2, r3
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032f2:	f04f 0100 	mov.w	r1, #0
 80032f6:	ea02 0800 	and.w	r8, r2, r0
 80032fa:	ea03 0901 	and.w	r9, r3, r1
 80032fe:	4640      	mov	r0, r8
 8003300:	4649      	mov	r1, r9
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	014b      	lsls	r3, r1, #5
 800330c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003310:	0142      	lsls	r2, r0, #5
 8003312:	4610      	mov	r0, r2
 8003314:	4619      	mov	r1, r3
 8003316:	ebb0 0008 	subs.w	r0, r0, r8
 800331a:	eb61 0109 	sbc.w	r1, r1, r9
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	018b      	lsls	r3, r1, #6
 8003328:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800332c:	0182      	lsls	r2, r0, #6
 800332e:	1a12      	subs	r2, r2, r0
 8003330:	eb63 0301 	sbc.w	r3, r3, r1
 8003334:	f04f 0000 	mov.w	r0, #0
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	00d9      	lsls	r1, r3, #3
 800333e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003342:	00d0      	lsls	r0, r2, #3
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	eb12 0208 	adds.w	r2, r2, r8
 800334c:	eb43 0309 	adc.w	r3, r3, r9
 8003350:	f04f 0000 	mov.w	r0, #0
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	0259      	lsls	r1, r3, #9
 800335a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800335e:	0250      	lsls	r0, r2, #9
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	461a      	mov	r2, r3
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	f7fc ff86 	bl	8000280 <__aeabi_uldivmod>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4613      	mov	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e04a      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800337e:	4b31      	ldr	r3, [pc, #196]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	099b      	lsrs	r3, r3, #6
 8003384:	461a      	mov	r2, r3
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	ea02 0400 	and.w	r4, r2, r0
 8003396:	ea03 0501 	and.w	r5, r3, r1
 800339a:	4620      	mov	r0, r4
 800339c:	4629      	mov	r1, r5
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	014b      	lsls	r3, r1, #5
 80033a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033ac:	0142      	lsls	r2, r0, #5
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	1b00      	subs	r0, r0, r4
 80033b4:	eb61 0105 	sbc.w	r1, r1, r5
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	018b      	lsls	r3, r1, #6
 80033c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033c6:	0182      	lsls	r2, r0, #6
 80033c8:	1a12      	subs	r2, r2, r0
 80033ca:	eb63 0301 	sbc.w	r3, r3, r1
 80033ce:	f04f 0000 	mov.w	r0, #0
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	00d9      	lsls	r1, r3, #3
 80033d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033dc:	00d0      	lsls	r0, r2, #3
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	1912      	adds	r2, r2, r4
 80033e4:	eb45 0303 	adc.w	r3, r5, r3
 80033e8:	f04f 0000 	mov.w	r0, #0
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	0299      	lsls	r1, r3, #10
 80033f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033f6:	0290      	lsls	r0, r2, #10
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4610      	mov	r0, r2
 80033fe:	4619      	mov	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	461a      	mov	r2, r3
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f7fc ff3a 	bl	8000280 <__aeabi_uldivmod>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4613      	mov	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	3301      	adds	r3, #1
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	60bb      	str	r3, [r7, #8]
      break;
 800342e:	e002      	b.n	8003436 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003432:	60bb      	str	r3, [r7, #8]
      break;
 8003434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003436:	68bb      	ldr	r3, [r7, #8]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800
 8003448:	00f42400 	.word	0x00f42400
 800344c:	007a1200 	.word	0x007a1200

08003450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_RCC_GetHCLKFreq+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000000 	.word	0x20000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff0 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0a9b      	lsrs	r3, r3, #10
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4903      	ldr	r1, [pc, #12]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5ccb      	ldrb	r3, [r1, r3]
 8003480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	08007b80 	.word	0x08007b80

08003490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003494:	f7ff ffdc 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003498:	4602      	mov	r2, r0
 800349a:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	0b5b      	lsrs	r3, r3, #13
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	4903      	ldr	r1, [pc, #12]	; (80034b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034a6:	5ccb      	ldrb	r3, [r1, r3]
 80034a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	08007b80 	.word	0x08007b80

080034b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e03f      	b.n	800354a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd f9c4 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2224      	movs	r2, #36	; 0x24
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f905 	bl	800370c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003510:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003520:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003530:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b08a      	sub	sp, #40	; 0x28
 8003556:	af02      	add	r7, sp, #8
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b20      	cmp	r3, #32
 8003570:	d17c      	bne.n	800366c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <HAL_UART_Transmit+0x2c>
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e075      	b.n	800366e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_UART_Transmit+0x3e>
 800358c:	2302      	movs	r3, #2
 800358e:	e06e      	b.n	800366e <HAL_UART_Transmit+0x11c>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2221      	movs	r2, #33	; 0x21
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a6:	f7fd fab5 	bl	8000b14 <HAL_GetTick>
 80035aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	88fa      	ldrh	r2, [r7, #6]
 80035b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c0:	d108      	bne.n	80035d4 <HAL_UART_Transmit+0x82>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	e003      	b.n	80035dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035e4:	e02a      	b.n	800363c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2180      	movs	r1, #128	; 0x80
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f840 	bl	8003676 <UART_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e036      	b.n	800366e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10b      	bne.n	800361e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003614:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	3302      	adds	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	e007      	b.n	800362e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	3301      	adds	r3, #1
 800362c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1cf      	bne.n	80035e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	2140      	movs	r1, #64	; 0x40
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f810 	bl	8003676 <UART_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e006      	b.n	800366e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800366c:	2302      	movs	r3, #2
  }
}
 800366e:	4618      	mov	r0, r3
 8003670:	3720      	adds	r7, #32
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b084      	sub	sp, #16
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4613      	mov	r3, r2
 8003684:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003686:	e02c      	b.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d028      	beq.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003696:	f7fd fa3d 	bl	8000b14 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d21d      	bcs.n	80036e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e00f      	b.n	8003702 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	4013      	ands	r3, r2
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	bf0c      	ite	eq
 80036f2:	2301      	moveq	r3, #1
 80036f4:	2300      	movne	r3, #0
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	461a      	mov	r2, r3
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d0c3      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003710:	b09f      	sub	sp, #124	; 0x7c
 8003712:	af00      	add	r7, sp, #0
 8003714:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	68d9      	ldr	r1, [r3, #12]
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	ea40 0301 	orr.w	r3, r0, r1
 800372c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800372e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	431a      	orrs	r2, r3
 8003738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	431a      	orrs	r2, r3
 800373e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	4313      	orrs	r3, r2
 8003744:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003750:	f021 010c 	bic.w	r1, r1, #12
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800375a:	430b      	orrs	r3, r1
 800375c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800375e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376a:	6999      	ldr	r1, [r3, #24]
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	ea40 0301 	orr.w	r3, r0, r1
 8003774:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	4bc5      	ldr	r3, [pc, #788]	; (8003a90 <UART_SetConfig+0x384>)
 800377c:	429a      	cmp	r2, r3
 800377e:	d004      	beq.n	800378a <UART_SetConfig+0x7e>
 8003780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4bc3      	ldr	r3, [pc, #780]	; (8003a94 <UART_SetConfig+0x388>)
 8003786:	429a      	cmp	r2, r3
 8003788:	d103      	bne.n	8003792 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800378a:	f7ff fe81 	bl	8003490 <HAL_RCC_GetPCLK2Freq>
 800378e:	6778      	str	r0, [r7, #116]	; 0x74
 8003790:	e002      	b.n	8003798 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003792:	f7ff fe69 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 8003796:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a0:	f040 80b6 	bne.w	8003910 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037a6:	461c      	mov	r4, r3
 80037a8:	f04f 0500 	mov.w	r5, #0
 80037ac:	4622      	mov	r2, r4
 80037ae:	462b      	mov	r3, r5
 80037b0:	1891      	adds	r1, r2, r2
 80037b2:	6439      	str	r1, [r7, #64]	; 0x40
 80037b4:	415b      	adcs	r3, r3
 80037b6:	647b      	str	r3, [r7, #68]	; 0x44
 80037b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037bc:	1912      	adds	r2, r2, r4
 80037be:	eb45 0303 	adc.w	r3, r5, r3
 80037c2:	f04f 0000 	mov.w	r0, #0
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	00d9      	lsls	r1, r3, #3
 80037cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037d0:	00d0      	lsls	r0, r2, #3
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	1911      	adds	r1, r2, r4
 80037d8:	6639      	str	r1, [r7, #96]	; 0x60
 80037da:	416b      	adcs	r3, r5
 80037dc:	667b      	str	r3, [r7, #100]	; 0x64
 80037de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	1891      	adds	r1, r2, r2
 80037ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80037ec:	415b      	adcs	r3, r3
 80037ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80037f8:	f7fc fd42 	bl	8000280 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4ba5      	ldr	r3, [pc, #660]	; (8003a98 <UART_SetConfig+0x38c>)
 8003802:	fba3 2302 	umull	r2, r3, r3, r2
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	011e      	lsls	r6, r3, #4
 800380a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800380c:	461c      	mov	r4, r3
 800380e:	f04f 0500 	mov.w	r5, #0
 8003812:	4622      	mov	r2, r4
 8003814:	462b      	mov	r3, r5
 8003816:	1891      	adds	r1, r2, r2
 8003818:	6339      	str	r1, [r7, #48]	; 0x30
 800381a:	415b      	adcs	r3, r3
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
 800381e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003822:	1912      	adds	r2, r2, r4
 8003824:	eb45 0303 	adc.w	r3, r5, r3
 8003828:	f04f 0000 	mov.w	r0, #0
 800382c:	f04f 0100 	mov.w	r1, #0
 8003830:	00d9      	lsls	r1, r3, #3
 8003832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003836:	00d0      	lsls	r0, r2, #3
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	1911      	adds	r1, r2, r4
 800383e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003840:	416b      	adcs	r3, r5
 8003842:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	461a      	mov	r2, r3
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	1891      	adds	r1, r2, r2
 8003850:	62b9      	str	r1, [r7, #40]	; 0x28
 8003852:	415b      	adcs	r3, r3
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800385a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800385e:	f7fc fd0f 	bl	8000280 <__aeabi_uldivmod>
 8003862:	4602      	mov	r2, r0
 8003864:	460b      	mov	r3, r1
 8003866:	4b8c      	ldr	r3, [pc, #560]	; (8003a98 <UART_SetConfig+0x38c>)
 8003868:	fba3 1302 	umull	r1, r3, r3, r2
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	2164      	movs	r1, #100	; 0x64
 8003870:	fb01 f303 	mul.w	r3, r1, r3
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	3332      	adds	r3, #50	; 0x32
 800387a:	4a87      	ldr	r2, [pc, #540]	; (8003a98 <UART_SetConfig+0x38c>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	095b      	lsrs	r3, r3, #5
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003888:	441e      	add	r6, r3
 800388a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800388c:	4618      	mov	r0, r3
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	1894      	adds	r4, r2, r2
 8003898:	623c      	str	r4, [r7, #32]
 800389a:	415b      	adcs	r3, r3
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
 800389e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038a2:	1812      	adds	r2, r2, r0
 80038a4:	eb41 0303 	adc.w	r3, r1, r3
 80038a8:	f04f 0400 	mov.w	r4, #0
 80038ac:	f04f 0500 	mov.w	r5, #0
 80038b0:	00dd      	lsls	r5, r3, #3
 80038b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038b6:	00d4      	lsls	r4, r2, #3
 80038b8:	4622      	mov	r2, r4
 80038ba:	462b      	mov	r3, r5
 80038bc:	1814      	adds	r4, r2, r0
 80038be:	653c      	str	r4, [r7, #80]	; 0x50
 80038c0:	414b      	adcs	r3, r1
 80038c2:	657b      	str	r3, [r7, #84]	; 0x54
 80038c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	461a      	mov	r2, r3
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	1891      	adds	r1, r2, r2
 80038d0:	61b9      	str	r1, [r7, #24]
 80038d2:	415b      	adcs	r3, r3
 80038d4:	61fb      	str	r3, [r7, #28]
 80038d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80038de:	f7fc fccf 	bl	8000280 <__aeabi_uldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4b6c      	ldr	r3, [pc, #432]	; (8003a98 <UART_SetConfig+0x38c>)
 80038e8:	fba3 1302 	umull	r1, r3, r3, r2
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	2164      	movs	r1, #100	; 0x64
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	3332      	adds	r3, #50	; 0x32
 80038fa:	4a67      	ldr	r2, [pc, #412]	; (8003a98 <UART_SetConfig+0x38c>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	f003 0207 	and.w	r2, r3, #7
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4432      	add	r2, r6
 800390c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800390e:	e0b9      	b.n	8003a84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003910:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003912:	461c      	mov	r4, r3
 8003914:	f04f 0500 	mov.w	r5, #0
 8003918:	4622      	mov	r2, r4
 800391a:	462b      	mov	r3, r5
 800391c:	1891      	adds	r1, r2, r2
 800391e:	6139      	str	r1, [r7, #16]
 8003920:	415b      	adcs	r3, r3
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003928:	1912      	adds	r2, r2, r4
 800392a:	eb45 0303 	adc.w	r3, r5, r3
 800392e:	f04f 0000 	mov.w	r0, #0
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	00d9      	lsls	r1, r3, #3
 8003938:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800393c:	00d0      	lsls	r0, r2, #3
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	eb12 0804 	adds.w	r8, r2, r4
 8003946:	eb43 0905 	adc.w	r9, r3, r5
 800394a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4618      	mov	r0, r3
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	008b      	lsls	r3, r1, #2
 800395e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003962:	0082      	lsls	r2, r0, #2
 8003964:	4640      	mov	r0, r8
 8003966:	4649      	mov	r1, r9
 8003968:	f7fc fc8a 	bl	8000280 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4b49      	ldr	r3, [pc, #292]	; (8003a98 <UART_SetConfig+0x38c>)
 8003972:	fba3 2302 	umull	r2, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	011e      	lsls	r6, r3, #4
 800397a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397c:	4618      	mov	r0, r3
 800397e:	f04f 0100 	mov.w	r1, #0
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	1894      	adds	r4, r2, r2
 8003988:	60bc      	str	r4, [r7, #8]
 800398a:	415b      	adcs	r3, r3
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003992:	1812      	adds	r2, r2, r0
 8003994:	eb41 0303 	adc.w	r3, r1, r3
 8003998:	f04f 0400 	mov.w	r4, #0
 800399c:	f04f 0500 	mov.w	r5, #0
 80039a0:	00dd      	lsls	r5, r3, #3
 80039a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80039a6:	00d4      	lsls	r4, r2, #3
 80039a8:	4622      	mov	r2, r4
 80039aa:	462b      	mov	r3, r5
 80039ac:	1814      	adds	r4, r2, r0
 80039ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80039b0:	414b      	adcs	r3, r1
 80039b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f04f 0100 	mov.w	r1, #0
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	008b      	lsls	r3, r1, #2
 80039c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039cc:	0082      	lsls	r2, r0, #2
 80039ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80039d2:	f7fc fc55 	bl	8000280 <__aeabi_uldivmod>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <UART_SetConfig+0x38c>)
 80039dc:	fba3 1302 	umull	r1, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	2164      	movs	r1, #100	; 0x64
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	3332      	adds	r3, #50	; 0x32
 80039ee:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <UART_SetConfig+0x38c>)
 80039f0:	fba2 2303 	umull	r2, r3, r2, r3
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039fa:	441e      	add	r6, r3
 80039fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039fe:	4618      	mov	r0, r3
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	1894      	adds	r4, r2, r2
 8003a0a:	603c      	str	r4, [r7, #0]
 8003a0c:	415b      	adcs	r3, r3
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a14:	1812      	adds	r2, r2, r0
 8003a16:	eb41 0303 	adc.w	r3, r1, r3
 8003a1a:	f04f 0400 	mov.w	r4, #0
 8003a1e:	f04f 0500 	mov.w	r5, #0
 8003a22:	00dd      	lsls	r5, r3, #3
 8003a24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a28:	00d4      	lsls	r4, r2, #3
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	eb12 0a00 	adds.w	sl, r2, r0
 8003a32:	eb43 0b01 	adc.w	fp, r3, r1
 8003a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	f04f 0200 	mov.w	r2, #0
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	008b      	lsls	r3, r1, #2
 8003a4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a4e:	0082      	lsls	r2, r0, #2
 8003a50:	4650      	mov	r0, sl
 8003a52:	4659      	mov	r1, fp
 8003a54:	f7fc fc14 	bl	8000280 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <UART_SetConfig+0x38c>)
 8003a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2164      	movs	r1, #100	; 0x64
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	011b      	lsls	r3, r3, #4
 8003a6e:	3332      	adds	r3, #50	; 0x32
 8003a70:	4a09      	ldr	r2, [pc, #36]	; (8003a98 <UART_SetConfig+0x38c>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	f003 020f 	and.w	r2, r3, #15
 8003a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4432      	add	r2, r6
 8003a82:	609a      	str	r2, [r3, #8]
}
 8003a84:	bf00      	nop
 8003a86:	377c      	adds	r7, #124	; 0x7c
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8e:	bf00      	nop
 8003a90:	40011000 	.word	0x40011000
 8003a94:	40011400 	.word	0x40011400
 8003a98:	51eb851f 	.word	0x51eb851f

08003a9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b084      	sub	sp, #16
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	f107 001c 	add.w	r0, r7, #28
 8003aaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d122      	bne.n	8003afa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d105      	bne.n	8003aee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f94a 	bl	8003d88 <USB_CoreReset>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e01a      	b.n	8003b30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f93e 	bl	8003d88 <USB_CoreReset>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	639a      	str	r2, [r3, #56]	; 0x38
 8003b22:	e005      	b.n	8003b30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10b      	bne.n	8003b4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f043 0206 	orr.w	r2, r3, #6
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f043 0220 	orr.w	r2, r3, #32
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b5a:	b004      	add	sp, #16
 8003b5c:	4770      	bx	lr

08003b5e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f043 0201 	orr.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f023 0201 	bic.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b082      	sub	sp, #8
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	460b      	mov	r3, r1
 8003bac:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d106      	bne.n	8003bce <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e00b      	b.n	8003be6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]
 8003be0:	e001      	b.n	8003be6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e003      	b.n	8003bee <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003be6:	2032      	movs	r0, #50	; 0x32
 8003be8:	f7fc ffa0 	bl	8000b2c <HAL_Delay>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	019b      	lsls	r3, r3, #6
 8003c0a:	f043 0220 	orr.w	r2, r3, #32
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3301      	adds	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a09      	ldr	r2, [pc, #36]	; (8003c40 <USB_FlushTxFifo+0x48>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e006      	b.n	8003c32 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d0f0      	beq.n	8003c12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	00030d40 	.word	0x00030d40

08003c44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2210      	movs	r2, #16
 8003c54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <USB_FlushRxFifo+0x40>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d901      	bls.n	8003c68 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e006      	b.n	8003c76 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f003 0310 	and.w	r3, r3, #16
 8003c70:	2b10      	cmp	r3, #16
 8003c72:	d0f0      	beq.n	8003c56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	00030d40 	.word	0x00030d40

08003c88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b089      	sub	sp, #36	; 0x24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4611      	mov	r1, r2
 8003c94:	461a      	mov	r2, r3
 8003c96:	460b      	mov	r3, r1
 8003c98:	71fb      	strb	r3, [r7, #7]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003ca6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d11a      	bne.n	8003ce4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003cae:	88bb      	ldrh	r3, [r7, #4]
 8003cb0:	3303      	adds	r3, #3
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	e00f      	b.n	8003cdc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	031a      	lsls	r2, r3, #12
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cc8:	461a      	mov	r2, r3
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61bb      	str	r3, [r7, #24]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3eb      	bcc.n	8003cbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3724      	adds	r7, #36	; 0x24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b089      	sub	sp, #36	; 0x24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	3303      	adds	r3, #3
 8003d0c:	089b      	lsrs	r3, r3, #2
 8003d0e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	e00b      	b.n	8003d2e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	3304      	adds	r3, #4
 8003d26:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d3ef      	bcc.n	8003d16 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003d36:	69fb      	ldr	r3, [r7, #28]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3724      	adds	r7, #36	; 0x24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b083      	sub	sp, #12
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f003 0301 	and.w	r3, r3, #1
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
	...

08003d88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <USB_CoreReset+0x64>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e01b      	b.n	8003dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	daf2      	bge.n	8003d94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f043 0201 	orr.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4a09      	ldr	r2, [pc, #36]	; (8003dec <USB_CoreReset+0x64>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d901      	bls.n	8003dd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e006      	b.n	8003dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d0f0      	beq.n	8003dbe <USB_CoreReset+0x36>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
 8003dea:	bf00      	nop
 8003dec:	00030d40 	.word	0x00030d40

08003df0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003df0:	b084      	sub	sp, #16
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
 8003dfa:	f107 001c 	add.w	r0, r7, #28
 8003dfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	2300      	movs	r3, #0
 8003e10:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d018      	beq.n	8003e74 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d10a      	bne.n	8003e5e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e56:	f043 0304 	orr.w	r3, r3, #4
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	e014      	b.n	8003e88 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e6c:	f023 0304 	bic.w	r3, r3, #4
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	e009      	b.n	8003e88 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e82:	f023 0304 	bic.w	r3, r3, #4
 8003e86:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003e88:	2110      	movs	r1, #16
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff feb4 	bl	8003bf8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fed7 	bl	8003c44 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e015      	b.n	8003ec8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8003eae:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d3e5      	bcc.n	8003e9c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8ac 	bl	8004030 <USB_DriveVbus>

  HAL_Delay(200U);
 8003ed8:	20c8      	movs	r0, #200	; 0xc8
 8003eda:	f7fc fe27 	bl	8000b2c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eea:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00b      	beq.n	8003f10 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <USB_HostInit+0x164>)
 8003f04:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <USB_HostInit+0x168>)
 8003f0a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8003f0e:	e009      	b.n	8003f24 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2280      	movs	r2, #128	; 0x80
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <USB_HostInit+0x16c>)
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a10      	ldr	r2, [pc, #64]	; (8003f60 <USB_HostInit+0x170>)
 8003f20:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f043 0210 	orr.w	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699a      	ldr	r2, [r3, #24]
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <USB_HostInit+0x174>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f4e:	b004      	add	sp, #16
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	01000200 	.word	0x01000200
 8003f58:	00e00300 	.word	0x00e00300
 8003f5c:	00600080 	.word	0x00600080
 8003f60:	004000e0 	.word	0x004000e0
 8003f64:	a3200008 	.word	0xa3200008

08003f68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f86:	f023 0303 	bic.w	r3, r3, #3
 8003f8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	68f9      	ldr	r1, [r7, #12]
 8003f9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d107      	bne.n	8003fba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003fb6:	6053      	str	r3, [r2, #4]
 8003fb8:	e009      	b.n	8003fce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d106      	bne.n	8003fce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8003fcc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ffc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800400c:	2064      	movs	r0, #100	; 0x64
 800400e:	f7fc fd8d 	bl	8000b2c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800401a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800401e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004020:	200a      	movs	r0, #10
 8004022:	f7fc fd83 	bl	8000b2c <HAL_Delay>

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004054:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <USB_DriveVbus+0x44>
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d106      	bne.n	8004074 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800406e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004072:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800407a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407e:	d109      	bne.n	8004094 <USB_DriveVbus+0x64>
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d106      	bne.n	8004094 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800408e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004092:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	0c5b      	lsrs	r3, r3, #17
 80040c0:	f003 0303 	and.w	r3, r3, #3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	b29b      	uxth	r3, r3
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	70fb      	strb	r3, [r7, #3]
 8004106:	460b      	mov	r3, r1
 8004108:	70bb      	strb	r3, [r7, #2]
 800410a:	4613      	mov	r3, r2
 800410c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	4413      	add	r3, r2
 800411e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004122:	461a      	mov	r2, r3
 8004124:	f04f 33ff 	mov.w	r3, #4294967295
 8004128:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800412a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800412e:	2b03      	cmp	r3, #3
 8004130:	d87e      	bhi.n	8004230 <USB_HC_Init+0x13c>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <USB_HC_Init+0x44>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004149 	.word	0x08004149
 800413c:	080041f3 	.word	0x080041f3
 8004140:	08004149 	.word	0x08004149
 8004144:	080041b5 	.word	0x080041b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	4413      	add	r3, r2
 8004150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004154:	461a      	mov	r2, r3
 8004156:	f240 439d 	movw	r3, #1181	; 0x49d
 800415a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800415c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da10      	bge.n	8004186 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	4413      	add	r3, r2
 800416c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	440a      	add	r2, r1
 800417a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004184:	e057      	b.n	8004236 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d051      	beq.n	8004236 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	015a      	lsls	r2, r3, #5
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	0151      	lsls	r1, r2, #5
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	440a      	add	r2, r1
 80041a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80041b0:	60d3      	str	r3, [r2, #12]
      break;
 80041b2:	e040      	b.n	8004236 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80041b4:	78fb      	ldrb	r3, [r7, #3]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c0:	461a      	mov	r2, r3
 80041c2:	f240 639d 	movw	r3, #1693	; 0x69d
 80041c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80041c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	da34      	bge.n	800423a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80041f0:	e023      	b.n	800423a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fe:	461a      	mov	r2, r3
 8004200:	f240 2325 	movw	r3, #549	; 0x225
 8004204:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004206:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800420a:	2b00      	cmp	r3, #0
 800420c:	da17      	bge.n	800423e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	440a      	add	r2, r1
 8004224:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004228:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800422c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800422e:	e006      	b.n	800423e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	77fb      	strb	r3, [r7, #31]
      break;
 8004234:	e004      	b.n	8004240 <USB_HC_Init+0x14c>
      break;
 8004236:	bf00      	nop
 8004238:	e002      	b.n	8004240 <USB_HC_Init+0x14c>
      break;
 800423a:	bf00      	nop
 800423c:	e000      	b.n	8004240 <USB_HC_Init+0x14c>
      break;
 800423e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	2101      	movs	r1, #1
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	6939      	ldr	r1, [r7, #16]
 8004256:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800425a:	4313      	orrs	r3, r2
 800425c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800426a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800426e:	2b00      	cmp	r3, #0
 8004270:	da03      	bge.n	800427a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	e001      	b.n	800427e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7ff ff0f 	bl	80040a2 <USB_GetHostSpeed>
 8004284:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004286:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800428a:	2b02      	cmp	r3, #2
 800428c:	d106      	bne.n	800429c <USB_HC_Init+0x1a8>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d003      	beq.n	800429c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004298:	617b      	str	r3, [r7, #20]
 800429a:	e001      	b.n	80042a0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80042a0:	787b      	ldrb	r3, [r7, #1]
 80042a2:	059b      	lsls	r3, r3, #22
 80042a4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80042a8:	78bb      	ldrb	r3, [r7, #2]
 80042aa:	02db      	lsls	r3, r3, #11
 80042ac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80042b0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80042b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042b6:	049b      	lsls	r3, r3, #18
 80042b8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80042bc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80042be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80042c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80042c4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	0159      	lsls	r1, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	440b      	add	r3, r1
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80042dc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80042de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d10f      	bne.n	8004306 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	0151      	lsls	r1, r2, #5
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	440a      	add	r2, r1
 80042fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004300:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004304:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004306:	7ffb      	ldrb	r3, [r7, #31]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3720      	adds	r7, #32
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08c      	sub	sp, #48	; 0x30
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	4613      	mov	r3, r2
 800431c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	785b      	ldrb	r3, [r3, #1]
 8004326:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800432c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d02d      	beq.n	8004396 <USB_HC_StartXfer+0x86>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	791b      	ldrb	r3, [r3, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d129      	bne.n	8004396 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d117      	bne.n	8004378 <USB_HC_StartXfer+0x68>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	79db      	ldrb	r3, [r3, #7]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <USB_HC_StartXfer+0x48>
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	79db      	ldrb	r3, [r3, #7]
 8004354:	2b02      	cmp	r3, #2
 8004356:	d10f      	bne.n	8004378 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	0151      	lsls	r1, r2, #5
 800436a:	6a3a      	ldr	r2, [r7, #32]
 800436c:	440a      	add	r2, r1
 800436e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004376:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004378:	79fb      	ldrb	r3, [r7, #7]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <USB_HC_StartXfer+0x86>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	795b      	ldrb	r3, [r3, #5]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d107      	bne.n	8004396 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	785b      	ldrb	r3, [r3, #1]
 800438a:	4619      	mov	r1, r3
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fa2f 	bl	80047f0 <USB_DoPing>
      return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e0f8      	b.n	8004588 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d018      	beq.n	80043d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	8912      	ldrh	r2, [r2, #8]
 80043a6:	4413      	add	r3, r2
 80043a8:	3b01      	subs	r3, #1
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	8912      	ldrh	r2, [r2, #8]
 80043ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80043b2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80043b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043b6:	8b7b      	ldrh	r3, [r7, #26]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d90b      	bls.n	80043d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80043bc:	8b7b      	ldrh	r3, [r7, #26]
 80043be:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80043c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043c2:	68ba      	ldr	r2, [r7, #8]
 80043c4:	8912      	ldrh	r2, [r2, #8]
 80043c6:	fb02 f203 	mul.w	r2, r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	611a      	str	r2, [r3, #16]
 80043ce:	e001      	b.n	80043d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80043d0:	2301      	movs	r3, #1
 80043d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	78db      	ldrb	r3, [r3, #3]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d007      	beq.n	80043ec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80043dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	8912      	ldrh	r2, [r2, #8]
 80043e2:	fb02 f203 	mul.w	r2, r2, r3
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	611a      	str	r2, [r3, #16]
 80043ea:	e003      	b.n	80043f4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	695a      	ldr	r2, [r3, #20]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80043fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043fe:	04d9      	lsls	r1, r3, #19
 8004400:	4b63      	ldr	r3, [pc, #396]	; (8004590 <USB_HC_StartXfer+0x280>)
 8004402:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004404:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	7a9b      	ldrb	r3, [r3, #10]
 800440a:	075b      	lsls	r3, r3, #29
 800440c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004410:	69f9      	ldr	r1, [r7, #28]
 8004412:	0148      	lsls	r0, r1, #5
 8004414:	6a39      	ldr	r1, [r7, #32]
 8004416:	4401      	add	r1, r0
 8004418:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800441c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800441e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	68d9      	ldr	r1, [r3, #12]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	4413      	add	r3, r2
 8004432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004436:	460a      	mov	r2, r1
 8004438:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	bf0c      	ite	eq
 800444a:	2301      	moveq	r3, #1
 800444c:	2300      	movne	r3, #0
 800444e:	b2db      	uxtb	r3, r3
 8004450:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	4413      	add	r3, r2
 800445a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	6a3a      	ldr	r2, [r7, #32]
 8004466:	440a      	add	r2, r1
 8004468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800446c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004470:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	6a3b      	ldr	r3, [r7, #32]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	7e7b      	ldrb	r3, [r7, #25]
 8004482:	075b      	lsls	r3, r3, #29
 8004484:	69f9      	ldr	r1, [r7, #28]
 8004486:	0148      	lsls	r0, r1, #5
 8004488:	6a39      	ldr	r1, [r7, #32]
 800448a:	4401      	add	r1, r0
 800448c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004490:	4313      	orrs	r3, r2
 8004492:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	4413      	add	r3, r2
 800449c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80044aa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	78db      	ldrb	r3, [r3, #3]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	e003      	b.n	80044c6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80044c4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80044cc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044da:	461a      	mov	r2, r3
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e04e      	b.n	8004588 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	78db      	ldrb	r3, [r3, #3]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d149      	bne.n	8004586 <USB_HC_StartXfer+0x276>
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d045      	beq.n	8004586 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	79db      	ldrb	r3, [r3, #7]
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d830      	bhi.n	8004564 <USB_HC_StartXfer+0x254>
 8004502:	a201      	add	r2, pc, #4	; (adr r2, 8004508 <USB_HC_StartXfer+0x1f8>)
 8004504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004508:	08004519 	.word	0x08004519
 800450c:	0800453d 	.word	0x0800453d
 8004510:	08004519 	.word	0x08004519
 8004514:	0800453d 	.word	0x0800453d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	3303      	adds	r3, #3
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8004522:	8afa      	ldrh	r2, [r7, #22]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	b29b      	uxth	r3, r3
 800452a:	429a      	cmp	r2, r3
 800452c:	d91c      	bls.n	8004568 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	619a      	str	r2, [r3, #24]
        }
        break;
 800453a:	e015      	b.n	8004568 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	3303      	adds	r3, #3
 8004542:	089b      	lsrs	r3, r3, #2
 8004544:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8004546:	8afa      	ldrh	r2, [r7, #22]
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	b29b      	uxth	r3, r3
 8004552:	429a      	cmp	r2, r3
 8004554:	d90a      	bls.n	800456c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	619a      	str	r2, [r3, #24]
        }
        break;
 8004562:	e003      	b.n	800456c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8004564:	bf00      	nop
 8004566:	e002      	b.n	800456e <USB_HC_StartXfer+0x25e>
        break;
 8004568:	bf00      	nop
 800456a:	e000      	b.n	800456e <USB_HC_StartXfer+0x25e>
        break;
 800456c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	68d9      	ldr	r1, [r3, #12]
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	785a      	ldrb	r2, [r3, #1]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	b29b      	uxth	r3, r3
 800457c:	2000      	movs	r0, #0
 800457e:	9000      	str	r0, [sp, #0]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff fb81 	bl	8003c88 <USB_WritePacket>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3728      	adds	r7, #40	; 0x28
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	1ff80000 	.word	0x1ff80000

08004594 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	b29b      	uxth	r3, r3
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b089      	sub	sp, #36	; 0x24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	0c9b      	lsrs	r3, r3, #18
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	0fdb      	lsrs	r3, r3, #31
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b20      	cmp	r3, #32
 8004604:	d104      	bne.n	8004610 <USB_HC_Halt+0x5a>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e0e8      	b.n	80047e2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <USB_HC_Halt+0x66>
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b02      	cmp	r3, #2
 800461a:	d173      	bne.n	8004704 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	4413      	add	r3, r2
 8004624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	440a      	add	r2, r1
 8004632:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004636:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800463a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 0320 	and.w	r3, r3, #32
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 80cb 	bne.w	80047e0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d143      	bne.n	80046de <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	0151      	lsls	r1, r2, #5
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	440a      	add	r2, r1
 800466c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004670:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004674:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	4413      	add	r3, r2
 800467e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	0151      	lsls	r1, r2, #5
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	440a      	add	r2, r1
 800468c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004690:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004694:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046b4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3301      	adds	r3, #1
 80046ba:	61fb      	str	r3, [r7, #28]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c2:	d81d      	bhi.n	8004700 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046da:	d0ec      	beq.n	80046b6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046dc:	e080      	b.n	80047e0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	0151      	lsls	r1, r2, #5
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	440a      	add	r2, r1
 80046f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80046fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80046fe:	e06f      	b.n	80047e0 <USB_HC_Halt+0x22a>
            break;
 8004700:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004702:	e06d      	b.n	80047e0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	4413      	add	r3, r2
 800470c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	0151      	lsls	r1, r2, #5
 8004716:	69ba      	ldr	r2, [r7, #24]
 8004718:	440a      	add	r2, r1
 800471a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800471e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004722:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d143      	bne.n	80047bc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	4413      	add	r3, r2
 800473c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	697a      	ldr	r2, [r7, #20]
 8004744:	0151      	lsls	r1, r2, #5
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	440a      	add	r2, r1
 800474a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800474e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004752:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	4413      	add	r3, r2
 800475c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	0151      	lsls	r1, r2, #5
 8004766:	69ba      	ldr	r2, [r7, #24]
 8004768:	440a      	add	r2, r1
 800476a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800476e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004772:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	4413      	add	r3, r2
 800477c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	440a      	add	r2, r1
 800478a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800478e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004792:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3301      	adds	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047a0:	d81d      	bhi.n	80047de <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b8:	d0ec      	beq.n	8004794 <USB_HC_Halt+0x1de>
 80047ba:	e011      	b.n	80047e0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	0151      	lsls	r1, r2, #5
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	440a      	add	r2, r1
 80047d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e000      	b.n	80047e0 <USB_HC_Halt+0x22a>
          break;
 80047de:	bf00      	nop
    }
  }

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3724      	adds	r7, #36	; 0x24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004800:	78fb      	ldrb	r3, [r7, #3]
 8004802:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004804:	2301      	movs	r3, #1
 8004806:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	04da      	lsls	r2, r3, #19
 800480c:	4b15      	ldr	r3, [pc, #84]	; (8004864 <USB_DoPing+0x74>)
 800480e:	4013      	ands	r3, r2
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	440a      	add	r2, r1
 8004818:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800481c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004820:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	4413      	add	r3, r2
 800482a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004838:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004840:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	4413      	add	r3, r2
 800484a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484e:	461a      	mov	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	1ff80000 	.word	0x1ff80000

08004868 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f7ff f981 	bl	8003b80 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800487e:	2110      	movs	r1, #16
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff f9b9 	bl	8003bf8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff f9dc 	bl	8003c44 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e01f      	b.n	80048d2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c6:	461a      	mov	r2, r3
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3301      	adds	r3, #1
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b0f      	cmp	r3, #15
 80048d6:	d9dc      	bls.n	8004892 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80048d8:	2300      	movs	r3, #0
 80048da:	613b      	str	r3, [r7, #16]
 80048dc:	e034      	b.n	8004948 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048f4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004904:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	4413      	add	r3, r2
 800490e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004912:	461a      	mov	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	3301      	adds	r3, #1
 800491c:	617b      	str	r3, [r7, #20]
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004924:	d80c      	bhi.n	8004940 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800493c:	d0ec      	beq.n	8004918 <USB_StopHost+0xb0>
 800493e:	e000      	b.n	8004942 <USB_StopHost+0xda>
        break;
 8004940:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	3301      	adds	r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d9c7      	bls.n	80048de <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004954:	461a      	mov	r2, r3
 8004956:	f04f 33ff 	mov.w	r3, #4294967295
 800495a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f04f 32ff 	mov.w	r2, #4294967295
 8004962:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff f8fa 	bl	8003b5e <USB_EnableGlobalInt>

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b08b      	sub	sp, #44	; 0x2c
 8004978:	af04      	add	r7, sp, #16
 800497a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004986:	7919      	ldrb	r1, [r3, #4]
 8004988:	23ff      	movs	r3, #255	; 0xff
 800498a:	2201      	movs	r2, #1
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 ff17 	bl	80057c0 <USBH_FindInterface>
 8004992:	4603      	mov	r3, r0
 8004994:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004996:	7dbb      	ldrb	r3, [r7, #22]
 8004998:	2bff      	cmp	r3, #255	; 0xff
 800499a:	d002      	beq.n	80049a2 <USBH_HID_InterfaceInit+0x2e>
 800499c:	7dbb      	ldrb	r3, [r7, #22]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d901      	bls.n	80049a6 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80049a2:	2302      	movs	r3, #2
 80049a4:	e108      	b.n	8004bb8 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 80049a6:	7dbb      	ldrb	r3, [r7, #22]
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 feec 	bl	8005788 <USBH_SelectInterface>
 80049b0:	4603      	mov	r3, r0
 80049b2:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 80049b4:	7d7b      	ldrb	r3, [r7, #21]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0fc      	b.n	8004bb8 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80049c4:	2034      	movs	r0, #52	; 0x34
 80049c6:	f002 fc67 	bl	8007298 <malloc>
 80049ca:	4603      	mov	r3, r0
 80049cc:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 80049de:	2302      	movs	r3, #2
 80049e0:	e0ea      	b.n	8004bb8 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 80049e2:	2234      	movs	r2, #52	; 0x34
 80049e4:	2100      	movs	r1, #0
 80049e6:	6938      	ldr	r0, [r7, #16]
 80049e8:	f002 fc66 	bl	80072b8 <memset>

  HID_Handle->state = HID_ERROR;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2207      	movs	r2, #7
 80049f0:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80049f2:	7dbb      	ldrb	r3, [r7, #22]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	211a      	movs	r1, #26
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d103      	bne.n	8004a10 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	4a6d      	ldr	r2, [pc, #436]	; (8004bc0 <USBH_HID_InterfaceInit+0x24c>)
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8004a0e:	e010      	b.n	8004a32 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8004a10:	7dbb      	ldrb	r3, [r7, #22]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	211a      	movs	r1, #26
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	4413      	add	r3, r2
 8004a1c:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d103      	bne.n	8004a2e <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4a66      	ldr	r2, [pc, #408]	; (8004bc4 <USBH_HID_InterfaceInit+0x250>)
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2c:	e001      	b.n	8004a32 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e0c2      	b.n	8004bb8 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2200      	movs	r2, #0
 8004a36:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004a3e:	7dbb      	ldrb	r3, [r7, #22]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	211a      	movs	r1, #26
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004a4e:	781a      	ldrb	r2, [r3, #0]
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004a54:	7dbb      	ldrb	r3, [r7, #22]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	211a      	movs	r1, #26
 8004a5a:	fb01 f303 	mul.w	r3, r1, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8004a6a:	7dbb      	ldrb	r3, [r7, #22]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	211a      	movs	r1, #26
 8004a70:	fb01 f303 	mul.w	r3, r1, r3
 8004a74:	4413      	add	r3, r2
 8004a76:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	8b9b      	ldrh	r3, [r3, #28]
 8004a86:	2b09      	cmp	r3, #9
 8004a88:	d802      	bhi.n	8004a90 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	220a      	movs	r2, #10
 8004a8e:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8004a90:	7dbb      	ldrb	r3, [r7, #22]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	211a      	movs	r1, #26
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	bf28      	it	cs
 8004aa6:	2302      	movcs	r3, #2
 8004aa8:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	75fb      	strb	r3, [r7, #23]
 8004aae:	e07d      	b.n	8004bac <USBH_HID_InterfaceInit+0x238>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8004ab0:	7dbb      	ldrb	r3, [r7, #22]
 8004ab2:	7df9      	ldrb	r1, [r7, #23]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	3101      	adds	r1, #1
 8004ab8:	00c9      	lsls	r1, r1, #3
 8004aba:	201a      	movs	r0, #26
 8004abc:	fb00 f303 	mul.w	r3, r0, r3
 8004ac0:	440b      	add	r3, r1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b25b      	sxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	da35      	bge.n	8004b3c <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004ad0:	7dbb      	ldrb	r3, [r7, #22]
 8004ad2:	7df9      	ldrb	r1, [r7, #23]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	3101      	adds	r1, #1
 8004ad8:	00c9      	lsls	r1, r1, #3
 8004ada:	201a      	movs	r0, #26
 8004adc:	fb00 f303 	mul.w	r3, r0, r3
 8004ae0:	440b      	add	r3, r1
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	791b      	ldrb	r3, [r3, #4]
 8004af2:	4619      	mov	r1, r3
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f002 f860 	bl	8006bba <USBH_AllocPipe>
 8004afa:	4603      	mov	r3, r0
 8004afc:	461a      	mov	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	7859      	ldrb	r1, [r3, #1]
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	7918      	ldrb	r0, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	8b12      	ldrh	r2, [r2, #24]
 8004b1a:	9202      	str	r2, [sp, #8]
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	9201      	str	r2, [sp, #4]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4623      	mov	r3, r4
 8004b24:	4602      	mov	r2, r0
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f002 f818 	bl	8006b5c <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	785b      	ldrb	r3, [r3, #1]
 8004b30:	2200      	movs	r2, #0
 8004b32:	4619      	mov	r1, r3
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f002 fb1e 	bl	8007176 <USBH_LL_SetToggle>
 8004b3a:	e034      	b.n	8004ba6 <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004b3c:	7dbb      	ldrb	r3, [r7, #22]
 8004b3e:	7df9      	ldrb	r1, [r7, #23]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	3101      	adds	r1, #1
 8004b44:	00c9      	lsls	r1, r1, #3
 8004b46:	201a      	movs	r0, #26
 8004b48:	fb00 f303 	mul.w	r3, r0, r3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	4413      	add	r3, r2
 8004b50:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	78db      	ldrb	r3, [r3, #3]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f002 f82a 	bl	8006bba <USBH_AllocPipe>
 8004b66:	4603      	mov	r3, r0
 8004b68:	461a      	mov	r2, r3
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	7819      	ldrb	r1, [r3, #0]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	78d8      	ldrb	r0, [r3, #3]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	8b12      	ldrh	r2, [r2, #24]
 8004b86:	9202      	str	r2, [sp, #8]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	9201      	str	r2, [sp, #4]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	4623      	mov	r3, r4
 8004b90:	4602      	mov	r2, r0
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f001 ffe2 	bl	8006b5c <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f002 fae8 	bl	8007176 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8004ba6:	7dfb      	ldrb	r3, [r7, #23]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
 8004bac:	7dfa      	ldrb	r2, [r7, #23]
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	f4ff af7d 	bcc.w	8004ab0 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	371c      	adds	r7, #28
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd90      	pop	{r4, r7, pc}
 8004bc0:	080052c5 	.word	0x080052c5
 8004bc4:	08005375 	.word	0x08005375

08004bc8 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	785b      	ldrb	r3, [r3, #1]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00e      	beq.n	8004c00 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f001 ffd6 	bl	8006b9a <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	785b      	ldrb	r3, [r3, #1]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f002 f801 	bl	8006bfc <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00e      	beq.n	8004c26 <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f001 ffc3 	bl	8006b9a <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f001 ffee 	bl	8006bfc <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00b      	beq.n	8004c4a <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f002 fb34 	bl	80072a8 <free>
    phost->pActiveClass->pData = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c46:	2200      	movs	r2, #0
 8004c48:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004c6a:	69db      	ldr	r3, [r3, #28]
 8004c6c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	795b      	ldrb	r3, [r3, #5]
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d860      	bhi.n	8004d38 <USBH_HID_ClassRequest+0xe4>
 8004c76:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <USBH_HID_ClassRequest+0x28>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004c95 	.word	0x08004c95
 8004c80:	08004d39 	.word	0x08004d39
 8004c84:	08004caf 	.word	0x08004caf
 8004c88:	08004c95 	.word	0x08004c95
 8004c8c:	08004cd9 	.word	0x08004cd9
 8004c90:	08004d03 	.word	0x08004d03
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	331c      	adds	r3, #28
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4610      	mov	r0, r2
 8004ca2:	f000 f9cd 	bl	8005040 <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2202      	movs	r2, #2
 8004caa:	715a      	strb	r2, [r3, #5]

    break;
 8004cac:	e04b      	b.n	8004d46 <USBH_HID_ClassRequest+0xf2>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 f930 	bl	8004f1a <USBH_HID_GetHIDReportDescriptor>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8004cbe:	7bbb      	ldrb	r3, [r7, #14]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2204      	movs	r2, #4
 8004cc8:	715a      	strb	r2, [r3, #5]
    else
    {
      /* .. */
    }

    break;
 8004cca:	e037      	b.n	8004d3c <USBH_HID_ClassRequest+0xe8>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004ccc:	7bbb      	ldrb	r3, [r7, #14]
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d134      	bne.n	8004d3c <USBH_HID_ClassRequest+0xe8>
      status = USBH_FAIL;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8004cd6:	e031      	b.n	8004d3c <USBH_HID_ClassRequest+0xe8>

  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2100      	movs	r1, #0
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f935 	bl	8004f4c <USBH_HID_SetIdle>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 8004ce6:	7bbb      	ldrb	r3, [r7, #14]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d103      	bne.n	8004cf4 <USBH_HID_ClassRequest+0xa0>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2205      	movs	r2, #5
 8004cf0:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 8004cf2:	e025      	b.n	8004d40 <USBH_HID_ClassRequest+0xec>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 8004cf4:	7bbb      	ldrb	r3, [r7, #14]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d122      	bne.n	8004d40 <USBH_HID_ClassRequest+0xec>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2205      	movs	r2, #5
 8004cfe:	715a      	strb	r2, [r3, #5]
    break;
 8004d00:	e01e      	b.n	8004d40 <USBH_HID_ClassRequest+0xec>

  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8004d02:	2100      	movs	r1, #0
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 f975 	bl	8004ff4 <USBH_HID_SetProtocol>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8004d0e:	7bbb      	ldrb	r3, [r7, #14]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <USBH_HID_ClassRequest+0xd8>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2201      	movs	r2, #1
 8004d18:	715a      	strb	r2, [r3, #5]

      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004d20:	2102      	movs	r1, #2
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	4798      	blx	r3
      status = USBH_OK;
 8004d26:	2300      	movs	r3, #0
 8004d28:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      /* .. */
    }
    break;
 8004d2a:	e00b      	b.n	8004d44 <USBH_HID_ClassRequest+0xf0>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d108      	bne.n	8004d44 <USBH_HID_ClassRequest+0xf0>
      status = USBH_FAIL;
 8004d32:	2302      	movs	r3, #2
 8004d34:	73fb      	strb	r3, [r7, #15]
    break;
 8004d36:	e005      	b.n	8004d44 <USBH_HID_ClassRequest+0xf0>

  case HID_REQ_IDLE:
  default:
    break;
 8004d38:	bf00      	nop
 8004d3a:	e004      	b.n	8004d46 <USBH_HID_ClassRequest+0xf2>
    break;
 8004d3c:	bf00      	nop
 8004d3e:	e002      	b.n	8004d46 <USBH_HID_ClassRequest+0xf2>
    break;
 8004d40:	bf00      	nop
 8004d42:	e000      	b.n	8004d46 <USBH_HID_ClassRequest+0xf2>
    break;
 8004d44:	bf00      	nop
  }

  return status;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af02      	add	r7, sp, #8
 8004d56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	789b      	ldrb	r3, [r3, #2]
 8004d6a:	2b06      	cmp	r3, #6
 8004d6c:	f200 80a9 	bhi.w	8004ec2 <USBH_HID_Process+0x172>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <USBH_HID_Process+0x28>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004d95 	.word	0x08004d95
 8004d7c:	08004da5 	.word	0x08004da5
 8004d80:	08004ec3 	.word	0x08004ec3
 8004d84:	08004ec3 	.word	0x08004ec3
 8004d88:	08004e15 	.word	0x08004e15
 8004d8c:	08004dff 	.word	0x08004dff
 8004d90:	08004e43 	.word	0x08004e43
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004da2:	e093      	b.n	8004ecc <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	8b1b      	ldrh	r3, [r3, #24]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	2101      	movs	r1, #1
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f8f0 	bl	8004f9c <USBH_HID_GetReport>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2205      	movs	r2, #5
 8004dca:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004dcc:	e07e      	b.n	8004ecc <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8004dce:	7dfb      	ldrb	r3, [r7, #23]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d105      	bne.n	8004de0 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8004dde:	e075      	b.n	8004ecc <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d105      	bne.n	8004df2 <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2205      	movs	r2, #5
 8004dea:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	75fb      	strb	r3, [r7, #23]
      break;
 8004df0:	e06c      	b.n	8004ecc <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2207      	movs	r2, #7
 8004df6:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004dfc:	e066      	b.n	8004ecc <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d05c      	beq.n	8004ec6 <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2204      	movs	r2, #4
 8004e10:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004e12:	e058      	b.n	8004ec6 <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 fe7b 	bl	8006b1e <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2206      	movs	r2, #6
 8004e2c:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8004e40:	e044      	b.n	8004ecc <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	785b      	ldrb	r3, [r3, #1]
 8004e46:	4619      	mov	r1, r3
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f002 f973 	bl	8007134 <USBH_LL_GetURBState>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d120      	bne.n	8004e96 <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	785b      	ldrb	r3, [r3, #1]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f002 f8d8 	bl	8007010 <USBH_LL_GetLastXferSize>
 8004e60:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d12e      	bne.n	8004eca <USBH_HID_Process+0x17a>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d02b      	beq.n	8004eca <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f103 0008 	add.w	r0, r3, #8
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	6959      	ldr	r1, [r3, #20]
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	8b1b      	ldrh	r3, [r3, #24]
 8004e80:	461a      	mov	r2, r3
 8004e82:	f000 f9ca 	bl	800521a <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fb fb72 	bl	8000578 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 8004e94:	e019      	b.n	8004eca <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f002 f949 	bl	8007134 <USBH_LL_GetURBState>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b05      	cmp	r3, #5
 8004ea6:	d110      	bne.n	8004eca <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	7e9b      	ldrb	r3, [r3, #26]
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f001 fa47 	bl	8006342 <USBH_ClrFeature>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d107      	bne.n	8004eca <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2204      	movs	r2, #4
 8004ebe:	709a      	strb	r2, [r3, #2]
      break;
 8004ec0:	e003      	b.n	8004eca <USBH_HID_Process+0x17a>

    default:
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e002      	b.n	8004ecc <USBH_HID_Process+0x17c>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e000      	b.n	8004ecc <USBH_HID_Process+0x17c>
      break;
 8004eca:	bf00      	nop
  }

  return status;
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop

08004ed8 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	789b      	ldrb	r3, [r3, #2]
 8004eee:	2b06      	cmp	r3, #6
 8004ef0:	d10c      	bne.n	8004f0c <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	8b92      	ldrh	r2, [r2, #28]
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d302      	bcc.n	8004f0c <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2204      	movs	r2, #4
 8004f0a:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b086      	sub	sp, #24
 8004f1e:	af02      	add	r7, sp, #8
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8004f2c:	887b      	ldrh	r3, [r7, #2]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	4613      	mov	r3, r2
 8004f32:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 8004f36:	2101      	movs	r1, #1
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f001 f962 	bl	8006202 <USBH_GetDescriptor>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 8004f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
 8004f58:	4613      	mov	r3, r2
 8004f5a:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2221      	movs	r2, #33	; 0x21
 8004f60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	220a      	movs	r2, #10
 8004f66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	021b      	lsls	r3, r3, #8
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	78bb      	ldrb	r3, [r7, #2]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	4313      	orrs	r3, r2
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8004f88:	2200      	movs	r2, #0
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 fbb8 	bl	8006702 <USBH_CtlReq>
 8004f92:	4603      	mov	r3, r0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	607b      	str	r3, [r7, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	72fb      	strb	r3, [r7, #11]
 8004faa:	4613      	mov	r3, r2
 8004fac:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	22a1      	movs	r2, #161	; 0xa1
 8004fb2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8004fba:	7afb      	ldrb	r3, [r7, #11]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	021b      	lsls	r3, r3, #8
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	7abb      	ldrb	r3, [r7, #10]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8004fd4:	7e3b      	ldrb	r3, [r7, #24]
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8004fdc:	7e3b      	ldrb	r3, [r7, #24]
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f001 fb8c 	bl	8006702 <USBH_CtlReq>
 8004fea:	4603      	mov	r3, r0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2221      	movs	r2, #33	; 0x21
 8005004:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	220b      	movs	r2, #11
 800500a:	745a      	strb	r2, [r3, #17]
  if (protocol)
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	825a      	strh	r2, [r3, #18]
 8005018:	e002      	b.n	8005020 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800502c:	2200      	movs	r2, #0
 800502e:	2100      	movs	r1, #0
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f001 fb66 	bl	8006702 <USBH_CtlReq>
 8005036:	4603      	mov	r3, r0

}
 8005038:	4618      	mov	r0, r3
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	3302      	adds	r3, #2
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b29a      	uxth	r2, r3
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	3303      	adds	r3, #3
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	b29b      	uxth	r3, r3
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	b29b      	uxth	r3, r3
 8005062:	4313      	orrs	r3, r2
 8005064:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8005066:	897b      	ldrh	r3, [r7, #10]
 8005068:	2b09      	cmp	r3, #9
 800506a:	d943      	bls.n	80050f4 <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 800506c:	2309      	movs	r3, #9
 800506e:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 8005070:	e03c      	b.n	80050ec <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4619      	mov	r1, r3
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f001 fb27 	bl	80066cc <USBH_GetNextDesc>
 800507e:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	785b      	ldrb	r3, [r3, #1]
 8005084:	2b21      	cmp	r3, #33	; 0x21
 8005086:	d131      	bne.n	80050ec <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	781a      	ldrb	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	785a      	ldrb	r2, [r3, #1]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3302      	adds	r3, #2
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	b29a      	uxth	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3303      	adds	r3, #3
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	4313      	orrs	r3, r2
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	791a      	ldrb	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	795a      	ldrb	r2, [r3, #5]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	799a      	ldrb	r2, [r3, #6]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3307      	adds	r3, #7
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3308      	adds	r3, #8
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	b29b      	uxth	r3, r3
 80050e0:	4313      	orrs	r3, r2
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	811a      	strh	r2, [r3, #8]
        break;
 80050e8:	bf00      	nop
      }
    }
  }
}
 80050ea:	e003      	b.n	80050f4 <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 80050ec:	893b      	ldrh	r3, [r7, #8]
 80050ee:	897a      	ldrh	r2, [r7, #10]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d8be      	bhi.n	8005072 <USBH_HID_ParseHIDDesc+0x32>
}
 80050f4:	bf00      	nop
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 8005104:	23ff      	movs	r3, #255	; 0xff
 8005106:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b0b      	cmp	r3, #11
 8005110:	d117      	bne.n	8005142 <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005118:	4619      	mov	r1, r3
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	231a      	movs	r3, #26
 800511e:	fb03 f301 	mul.w	r3, r3, r1
 8005122:	4413      	add	r3, r2
 8005124:	f203 3349 	addw	r3, r3, #841	; 0x349
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800512c:	7bbb      	ldrb	r3, [r7, #14]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d102      	bne.n	8005138 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 8005132:	2302      	movs	r3, #2
 8005134:	73fb      	strb	r3, [r7, #15]
 8005136:	e004      	b.n	8005142 <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 8005138:	7bbb      	ldrb	r3, [r7, #14]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d101      	bne.n	8005142 <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 800513e:	2301      	movs	r3, #1
 8005140:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 8005142:	7bfb      	ldrb	r3, [r7, #15]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	729a      	strb	r2, [r3, #10]
  f->size = size;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	88fa      	ldrh	r2, [r7, #6]
 8005174:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	601a      	str	r2, [r3, #0]
}
 800517c:	bf00      	nop
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	4613      	mov	r3, r2
 8005194:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	7a9b      	ldrb	r3, [r3, #10]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d131      	bne.n	8005206 <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80051a8:	2300      	movs	r3, #0
 80051aa:	82fb      	strh	r3, [r7, #22]
 80051ac:	e027      	b.n	80051fe <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	88da      	ldrh	r2, [r3, #6]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	889b      	ldrh	r3, [r3, #4]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d019      	beq.n	80051ee <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	88d2      	ldrh	r2, [r2, #6]
 80051c2:	441a      	add	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1c59      	adds	r1, r3, #1
 80051c8:	6139      	str	r1, [r7, #16]
 80051ca:	7812      	ldrb	r2, [r2, #0]
 80051cc:	701a      	strb	r2, [r3, #0]
        f->tail++;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	88db      	ldrh	r3, [r3, #6]
 80051d2:	3301      	adds	r3, #1
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88da      	ldrh	r2, [r3, #6]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	891b      	ldrh	r3, [r3, #8]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d108      	bne.n	80051f8 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	80da      	strh	r2, [r3, #6]
 80051ec:	e004      	b.n	80051f8 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	729a      	strb	r2, [r3, #10]
        return i;
 80051f4:	8afb      	ldrh	r3, [r7, #22]
 80051f6:	e00a      	b.n	800520e <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 80051f8:	8afb      	ldrh	r3, [r7, #22]
 80051fa:	3301      	adds	r3, #1
 80051fc:	82fb      	strh	r3, [r7, #22]
 80051fe:	8afa      	ldrh	r2, [r7, #22]
 8005200:	88fb      	ldrh	r3, [r7, #6]
 8005202:	429a      	cmp	r2, r3
 8005204:	d3d3      	bcc.n	80051ae <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800520c:	88fb      	ldrh	r3, [r7, #6]
}
 800520e:	4618      	mov	r0, r3
 8005210:	371c      	adds	r7, #28
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800521a:	b480      	push	{r7}
 800521c:	b087      	sub	sp, #28
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	7a9b      	ldrb	r3, [r3, #10]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d13c      	bne.n	80052ae <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2201      	movs	r2, #1
 8005238:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 800523a:	2300      	movs	r3, #0
 800523c:	82fb      	strh	r3, [r7, #22]
 800523e:	e032      	b.n	80052a6 <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	889b      	ldrh	r3, [r3, #4]
 8005244:	3301      	adds	r3, #1
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	88d2      	ldrh	r2, [r2, #6]
 800524a:	4293      	cmp	r3, r2
 800524c:	d00a      	beq.n	8005264 <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	889b      	ldrh	r3, [r3, #4]
 8005252:	3301      	adds	r3, #1
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 8005258:	4293      	cmp	r3, r2
 800525a:	d108      	bne.n	800526e <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	88db      	ldrh	r3, [r3, #6]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	729a      	strb	r2, [r3, #10]
        return i;
 800526a:	8afb      	ldrh	r3, [r7, #22]
 800526c:	e023      	b.n	80052b6 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1c5a      	adds	r2, r3, #1
 8005272:	613a      	str	r2, [r7, #16]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	8889      	ldrh	r1, [r1, #4]
 800527c:	440a      	add	r2, r1
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	7013      	strb	r3, [r2, #0]
        f->head++;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	889b      	ldrh	r3, [r3, #4]
 8005286:	3301      	adds	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	889a      	ldrh	r2, [r3, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	891b      	ldrh	r3, [r3, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	d102      	bne.n	80052a0 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80052a0:	8afb      	ldrh	r3, [r7, #22]
 80052a2:	3301      	adds	r3, #1
 80052a4:	82fb      	strh	r3, [r7, #22]
 80052a6:	8afa      	ldrh	r2, [r7, #22]
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d3c8      	bcc.n	8005240 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	729a      	strb	r2, [r3, #10]

  return nbytes;
 80052b4:	88fb      	ldrh	r3, [r7, #6]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	371c      	adds	r7, #28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
	...

080052c4 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 80052d6:	4b24      	ldr	r3, [pc, #144]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 80052d8:	2200      	movs	r2, #0
 80052da:	709a      	strb	r2, [r3, #2]
 80052dc:	4b22      	ldr	r3, [pc, #136]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 80052de:	789a      	ldrb	r2, [r3, #2]
 80052e0:	4b21      	ldr	r3, [pc, #132]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 80052e2:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 80052e4:	4b20      	ldr	r3, [pc, #128]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	711a      	strb	r2, [r3, #4]
 80052ea:	4b1f      	ldr	r3, [pc, #124]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 80052ec:	791a      	ldrb	r2, [r3, #4]
 80052ee:	4b1e      	ldr	r3, [pc, #120]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 80052f0:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 80052f2:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	719a      	strb	r2, [r3, #6]
 80052f8:	4b1b      	ldr	r3, [pc, #108]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 80052fa:	799a      	ldrb	r2, [r3, #6]
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 80052fe:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8005300:	4b19      	ldr	r3, [pc, #100]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 8005302:	2200      	movs	r2, #0
 8005304:	721a      	strb	r2, [r3, #8]
 8005306:	4b18      	ldr	r3, [pc, #96]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 8005308:	7a1a      	ldrb	r2, [r3, #8]
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <USBH_HID_KeybdInit+0xa4>)
 800530c:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e00c      	b.n	800532e <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 8005314:	4a15      	ldr	r2, [pc, #84]	; (800536c <USBH_HID_KeybdInit+0xa8>)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2100      	movs	r1, #0
 800531a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 800531e:	4a14      	ldr	r2, [pc, #80]	; (8005370 <USBH_HID_KeybdInit+0xac>)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2100      	movs	r1, #0
 8005324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d9ef      	bls.n	8005314 <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	8b1b      	ldrh	r3, [r3, #24]
 8005338:	2b08      	cmp	r3, #8
 800533a:	d902      	bls.n	8005342 <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2208      	movs	r2, #8
 8005340:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4a0a      	ldr	r2, [pc, #40]	; (8005370 <USBH_HID_KeybdInit+0xac>)
 8005346:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f103 0008 	add.w	r0, r3, #8
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005354:	2250      	movs	r2, #80	; 0x50
 8005356:	4619      	mov	r1, r3
 8005358:	f7ff fefa 	bl	8005150 <USBH_HID_FifoInit>

  return USBH_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000178 	.word	0x20000178
 800536c:	20000168 	.word	0x20000168
 8005370:	20000170 	.word	0x20000170

08005374 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8005386:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <USBH_HID_MouseInit+0x88>)
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 800538c:	4b1b      	ldr	r3, [pc, #108]	; (80053fc <USBH_HID_MouseInit+0x88>)
 800538e:	2200      	movs	r2, #0
 8005390:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 8005392:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <USBH_HID_MouseInit+0x88>)
 8005394:	2200      	movs	r2, #0
 8005396:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8005398:	4b18      	ldr	r3, [pc, #96]	; (80053fc <USBH_HID_MouseInit+0x88>)
 800539a:	2200      	movs	r2, #0
 800539c:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800539e:	4b17      	ldr	r3, [pc, #92]	; (80053fc <USBH_HID_MouseInit+0x88>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	e00c      	b.n	80053c4 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 80053aa:	4a15      	ldr	r2, [pc, #84]	; (8005400 <USBH_HID_MouseInit+0x8c>)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2100      	movs	r1, #0
 80053b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 80053b4:	4a13      	ldr	r2, [pc, #76]	; (8005404 <USBH_HID_MouseInit+0x90>)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2100      	movs	r1, #0
 80053ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d9ef      	bls.n	80053aa <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	8b1b      	ldrh	r3, [r3, #24]
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d902      	bls.n	80053d8 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2208      	movs	r2, #8
 80053d6:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	4a0a      	ldr	r2, [pc, #40]	; (8005404 <USBH_HID_MouseInit+0x90>)
 80053dc:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f103 0008 	add.w	r0, r3, #8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80053ea:	2250      	movs	r2, #80	; 0x50
 80053ec:	4619      	mov	r1, r3
 80053ee:	f7ff feaf 	bl	8005150 <USBH_HID_FifoInit>

  return USBH_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20000188 	.word	0x20000188
 8005400:	20000190 	.word	0x20000190
 8005404:	20000198 	.word	0x20000198

08005408 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 f80d 	bl	8005430 <USBH_HID_MouseDecode>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <USBH_HID_GetMouseInfo+0x24>)
 800541e:	e000      	b.n	8005422 <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8005420:	2300      	movs	r3, #0
  }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000188 	.word	0x20000188

08005430 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8b1b      	ldrh	r3, [r3, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 800544a:	2302      	movs	r3, #2
 800544c:	e039      	b.n	80054c2 <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f103 0008 	add.w	r0, r3, #8
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8b1b      	ldrh	r3, [r3, #24]
 8005458:	461a      	mov	r2, r3
 800545a:	491c      	ldr	r1, [pc, #112]	; (80054cc <USBH_HID_MouseDecode+0x9c>)
 800545c:	f7ff fe94 	bl	8005188 <USBH_HID_FifoRead>
 8005460:	4603      	mov	r3, r0
 8005462:	461a      	mov	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	8b1b      	ldrh	r3, [r3, #24]
 8005468:	429a      	cmp	r2, r3
 800546a:	d129      	bne.n	80054c0 <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 800546c:	2100      	movs	r1, #0
 800546e:	4818      	ldr	r0, [pc, #96]	; (80054d0 <USBH_HID_MouseDecode+0xa0>)
 8005470:	f000 f83a 	bl	80054e8 <HID_ReadItem>
 8005474:	4603      	mov	r3, r0
 8005476:	b2da      	uxtb	r2, r3
 8005478:	4b16      	ldr	r3, [pc, #88]	; (80054d4 <USBH_HID_MouseDecode+0xa4>)
 800547a:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 800547c:	2100      	movs	r1, #0
 800547e:	4816      	ldr	r0, [pc, #88]	; (80054d8 <USBH_HID_MouseDecode+0xa8>)
 8005480:	f000 f832 	bl	80054e8 <HID_ReadItem>
 8005484:	4603      	mov	r3, r0
 8005486:	b2da      	uxtb	r2, r3
 8005488:	4b12      	ldr	r3, [pc, #72]	; (80054d4 <USBH_HID_MouseDecode+0xa4>)
 800548a:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 800548c:	2100      	movs	r1, #0
 800548e:	4813      	ldr	r0, [pc, #76]	; (80054dc <USBH_HID_MouseDecode+0xac>)
 8005490:	f000 f82a 	bl	80054e8 <HID_ReadItem>
 8005494:	4603      	mov	r3, r0
 8005496:	b2da      	uxtb	r2, r3
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <USBH_HID_MouseDecode+0xa4>)
 800549a:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 800549c:	2100      	movs	r1, #0
 800549e:	4810      	ldr	r0, [pc, #64]	; (80054e0 <USBH_HID_MouseDecode+0xb0>)
 80054a0:	f000 f822 	bl	80054e8 <HID_ReadItem>
 80054a4:	4603      	mov	r3, r0
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	4b0a      	ldr	r3, [pc, #40]	; (80054d4 <USBH_HID_MouseDecode+0xa4>)
 80054aa:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 80054ac:	2100      	movs	r1, #0
 80054ae:	480d      	ldr	r0, [pc, #52]	; (80054e4 <USBH_HID_MouseDecode+0xb4>)
 80054b0:	f000 f81a 	bl	80054e8 <HID_ReadItem>
 80054b4:	4603      	mov	r3, r0
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <USBH_HID_MouseDecode+0xa4>)
 80054ba:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	e000      	b.n	80054c2 <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 80054c0:	2302      	movs	r3, #2
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000190 	.word	0x20000190
 80054d0:	08007be8 	.word	0x08007be8
 80054d4:	20000188 	.word	0x20000188
 80054d8:	08007c08 	.word	0x08007c08
 80054dc:	08007b88 	.word	0x08007b88
 80054e0:	08007ba8 	.word	0x08007ba8
 80054e4:	08007bc8 	.word	0x08007bc8

080054e8 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	7a1b      	ldrb	r3, [r3, #8]
 8005506:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	7a5b      	ldrb	r3, [r3, #9]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01a      	beq.n	8005546 <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	7a5b      	ldrb	r3, [r3, #9]
 8005514:	78fa      	ldrb	r2, [r7, #3]
 8005516:	429a      	cmp	r2, r3
 8005518:	d301      	bcc.n	800551e <HID_ReadItem+0x36>
    {
      return (0U);
 800551a:	2300      	movs	r3, #0
 800551c:	e076      	b.n	800560c <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 800551e:	78fb      	ldrb	r3, [r7, #3]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6852      	ldr	r2, [r2, #4]
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 800552a:	7cfb      	ldrb	r3, [r7, #19]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	08db      	lsrs	r3, r3, #3
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	4413      	add	r3, r2
 800553a:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 8005546:	2300      	movs	r3, #0
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e00a      	b.n	8005562 <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	461a      	mov	r2, r3
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	3301      	adds	r3, #1
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	2b00      	cmp	r3, #0
 800556c:	d004      	beq.n	8005578 <HID_ReadItem+0x90>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	08db      	lsrs	r3, r3, #3
 8005574:	3301      	adds	r3, #1
 8005576:	e002      	b.n	800557e <HID_ReadItem+0x96>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	08db      	lsrs	r3, r3, #3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4293      	cmp	r3, r2
 8005582:	d8e3      	bhi.n	800554c <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 8005584:	7cfb      	ldrb	r3, [r7, #19]
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	40da      	lsrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2101      	movs	r1, #1
 8005590:	fa01 f303 	lsl.w	r3, r1, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	4013      	ands	r3, r2
 8005598:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d304      	bcc.n	80055ae <HID_ReadItem+0xc6>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	69fa      	ldr	r2, [r7, #28]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d901      	bls.n	80055b2 <HID_ReadItem+0xca>
  {
    return (0U);
 80055ae:	2300      	movs	r3, #0
 80055b0:	e02c      	b.n	800560c <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	7a9b      	ldrb	r3, [r3, #10]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01d      	beq.n	80055f6 <HID_ReadItem+0x10e>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	3b01      	subs	r3, #1
 80055c0:	2201      	movs	r2, #1
 80055c2:	409a      	lsls	r2, r3
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d014      	beq.n	80055f6 <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	fa02 f303 	lsl.w	r3, r2, r3
 80055d6:	425b      	negs	r3, r3
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d101      	bne.n	80055ea <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	e010      	b.n	800560c <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	fb02 f303 	mul.w	r3, r2, r3
 80055f4:	e00a      	b.n	800560c <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HID_ReadItem+0x11a>
    {
      return (val);
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	e004      	b.n	800560c <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	69fa      	ldr	r2, [r7, #28]
 8005608:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 800560c:	4618      	mov	r0, r3
 800560e:	3724      	adds	r7, #36	; 0x24
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	4613      	mov	r3, r2
 8005624:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800562c:	2302      	movs	r3, #2
 800562e:	e029      	b.n	8005684 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	79fa      	ldrb	r2, [r7, #7]
 8005634:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f81f 	bl	800568c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f001 fc13 	bl	8006ea8 <USBH_LL_Init>

  return USBH_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	e009      	b.n	80056b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	33e0      	adds	r3, #224	; 0xe0
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	2200      	movs	r2, #0
 80056aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b0e      	cmp	r3, #14
 80056b6:	d9f2      	bls.n	800569e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e009      	b.n	80056d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d8:	d3f1      	bcc.n	80056be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2240      	movs	r2, #64	; 0x40
 80056fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005734:	b480      	push	{r7}
 8005736:	b085      	sub	sp, #20
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d016      	beq.n	8005776 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10e      	bne.n	8005770 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005758:	1c59      	adds	r1, r3, #1
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	33de      	adds	r3, #222	; 0xde
 8005764:	6839      	ldr	r1, [r7, #0]
 8005766:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
 800576e:	e004      	b.n	800577a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005770:	2302      	movs	r3, #2
 8005772:	73fb      	strb	r3, [r7, #15]
 8005774:	e001      	b.n	800577a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005776:	2302      	movs	r3, #2
 8005778:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800577a:	7bfb      	ldrb	r3, [r7, #15]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800579e:	78fa      	ldrb	r2, [r7, #3]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d204      	bcs.n	80057ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80057ac:	e001      	b.n	80057b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80057ae:	2302      	movs	r3, #2
 80057b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	70fb      	strb	r3, [r7, #3]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70bb      	strb	r3, [r7, #2]
 80057d6:	4613      	mov	r3, r2
 80057d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80057de:	2300      	movs	r3, #0
 80057e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80057e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80057ea:	e025      	b.n	8005838 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	221a      	movs	r2, #26
 80057f0:	fb02 f303 	mul.w	r3, r2, r3
 80057f4:	3308      	adds	r3, #8
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	3302      	adds	r3, #2
 80057fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	795b      	ldrb	r3, [r3, #5]
 8005802:	78fa      	ldrb	r2, [r7, #3]
 8005804:	429a      	cmp	r2, r3
 8005806:	d002      	beq.n	800580e <USBH_FindInterface+0x4e>
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	2bff      	cmp	r3, #255	; 0xff
 800580c:	d111      	bne.n	8005832 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005812:	78ba      	ldrb	r2, [r7, #2]
 8005814:	429a      	cmp	r2, r3
 8005816:	d002      	beq.n	800581e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005818:	78bb      	ldrb	r3, [r7, #2]
 800581a:	2bff      	cmp	r3, #255	; 0xff
 800581c:	d109      	bne.n	8005832 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005822:	787a      	ldrb	r2, [r7, #1]
 8005824:	429a      	cmp	r2, r3
 8005826:	d002      	beq.n	800582e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005828:	787b      	ldrb	r3, [r7, #1]
 800582a:	2bff      	cmp	r3, #255	; 0xff
 800582c:	d101      	bne.n	8005832 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	e006      	b.n	8005840 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	3301      	adds	r3, #1
 8005836:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005838:	7dfb      	ldrb	r3, [r7, #23]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d9d6      	bls.n	80057ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800583e:	23ff      	movs	r3, #255	; 0xff
}
 8005840:	4618      	mov	r0, r3
 8005842:	371c      	adds	r7, #28
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fb63 	bl	8006f20 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800585a:	2101      	movs	r1, #1
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 fc7c 	bl	800715a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af04      	add	r7, sp, #16
 8005872:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005874:	2302      	movs	r3, #2
 8005876:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b01      	cmp	r3, #1
 8005886:	d102      	bne.n	800588e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2203      	movs	r2, #3
 800588c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b0b      	cmp	r3, #11
 8005896:	f200 81b3 	bhi.w	8005c00 <USBH_Process+0x394>
 800589a:	a201      	add	r2, pc, #4	; (adr r2, 80058a0 <USBH_Process+0x34>)
 800589c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a0:	080058d1 	.word	0x080058d1
 80058a4:	08005903 	.word	0x08005903
 80058a8:	0800596b 	.word	0x0800596b
 80058ac:	08005b9b 	.word	0x08005b9b
 80058b0:	08005c01 	.word	0x08005c01
 80058b4:	08005a0f 	.word	0x08005a0f
 80058b8:	08005b41 	.word	0x08005b41
 80058bc:	08005a45 	.word	0x08005a45
 80058c0:	08005a65 	.word	0x08005a65
 80058c4:	08005a85 	.word	0x08005a85
 80058c8:	08005ab3 	.word	0x08005ab3
 80058cc:	08005b83 	.word	0x08005b83
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8193 	beq.w	8005c04 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80058e4:	20c8      	movs	r0, #200	; 0xc8
 80058e6:	f001 fc76 	bl	80071d6 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f001 fb75 	bl	8006fda <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005900:	e180      	b.n	8005c04 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005908:	2b01      	cmp	r3, #1
 800590a:	d107      	bne.n	800591c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800591a:	e182      	b.n	8005c22 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005922:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005926:	d914      	bls.n	8005952 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800592e:	3301      	adds	r3, #1
 8005930:	b2da      	uxtb	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800593e:	2b03      	cmp	r3, #3
 8005940:	d903      	bls.n	800594a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	220d      	movs	r2, #13
 8005946:	701a      	strb	r2, [r3, #0]
      break;
 8005948:	e16b      	b.n	8005c22 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
      break;
 8005950:	e167      	b.n	8005c22 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005958:	f103 020a 	add.w	r2, r3, #10
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005962:	200a      	movs	r0, #10
 8005964:	f001 fc37 	bl	80071d6 <USBH_Delay>
      break;
 8005968:	e15b      	b.n	8005c22 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800597a:	2104      	movs	r1, #4
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005980:	2064      	movs	r0, #100	; 0x64
 8005982:	f001 fc28 	bl	80071d6 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fb00 	bl	8006f8c <USBH_LL_GetSpeed>
 800598c:	4603      	mov	r3, r0
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2205      	movs	r2, #5
 800599a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800599c:	2100      	movs	r1, #0
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 f90b 	bl	8006bba <USBH_AllocPipe>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80059ac:	2180      	movs	r1, #128	; 0x80
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 f903 	bl	8006bba <USBH_AllocPipe>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	7919      	ldrb	r1, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80059d0:	b292      	uxth	r2, r2
 80059d2:	9202      	str	r2, [sp, #8]
 80059d4:	2200      	movs	r2, #0
 80059d6:	9201      	str	r2, [sp, #4]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	4603      	mov	r3, r0
 80059dc:	2280      	movs	r2, #128	; 0x80
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 f8bc 	bl	8006b5c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	7959      	ldrb	r1, [r3, #5]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80059f8:	b292      	uxth	r2, r2
 80059fa:	9202      	str	r2, [sp, #8]
 80059fc:	2200      	movs	r2, #0
 80059fe:	9201      	str	r2, [sp, #4]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	4603      	mov	r3, r0
 8005a04:	2200      	movs	r2, #0
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 f8a8 	bl	8006b5c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005a0c:	e109      	b.n	8005c22 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f90c 	bl	8005c2c <USBH_HandleEnum>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f040 80f3 	bne.w	8005c08 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d103      	bne.n	8005a3c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2208      	movs	r2, #8
 8005a38:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005a3a:	e0e5      	b.n	8005c08 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2207      	movs	r2, #7
 8005a40:	701a      	strb	r2, [r3, #0]
      break;
 8005a42:	e0e1      	b.n	8005c08 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80de 	beq.w	8005c0c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a56:	2101      	movs	r1, #1
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2208      	movs	r2, #8
 8005a60:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005a62:	e0d3      	b.n	8005c0c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fc20 	bl	80062b4 <USBH_SetCfg>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f040 80ca 	bne.w	8005c10 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2209      	movs	r2, #9
 8005a80:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005a82:	e0c5      	b.n	8005c10 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00b      	beq.n	8005aaa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005a92:	2101      	movs	r1, #1
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fc30 	bl	80062fa <USBH_SetFeature>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	f040 80b9 	bne.w	8005c14 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	220a      	movs	r2, #10
 8005aa6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005aa8:	e0b4      	b.n	8005c14 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	220a      	movs	r2, #10
 8005aae:	701a      	strb	r2, [r3, #0]
      break;
 8005ab0:	e0b0      	b.n	8005c14 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 80ad 	beq.w	8005c18 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
 8005aca:	e016      	b.n	8005afa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005acc:	7bfa      	ldrb	r2, [r7, #15]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	32de      	adds	r2, #222	; 0xde
 8005ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ad6:	791a      	ldrb	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d108      	bne.n	8005af4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005ae2:	7bfa      	ldrb	r2, [r7, #15]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	32de      	adds	r2, #222	; 0xde
 8005ae8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005af2:	e005      	b.n	8005b00 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005af4:	7bfb      	ldrb	r3, [r7, #15]
 8005af6:	3301      	adds	r3, #1
 8005af8:	73fb      	strb	r3, [r7, #15]
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0e5      	beq.n	8005acc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4798      	blx	r3
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2206      	movs	r2, #6
 8005b20:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b28:	2103      	movs	r1, #3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005b2e:	e073      	b.n	8005c18 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	220d      	movs	r2, #13
 8005b34:	701a      	strb	r2, [r3, #0]
      break;
 8005b36:	e06f      	b.n	8005c18 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	220d      	movs	r2, #13
 8005b3c:	701a      	strb	r2, [r3, #0]
      break;
 8005b3e:	e06b      	b.n	8005c18 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d017      	beq.n	8005b7a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	4798      	blx	r3
 8005b56:	4603      	mov	r3, r0
 8005b58:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d103      	bne.n	8005b6a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	220b      	movs	r2, #11
 8005b66:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005b68:	e058      	b.n	8005c1c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	d154      	bne.n	8005c1c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	220d      	movs	r2, #13
 8005b76:	701a      	strb	r2, [r3, #0]
      break;
 8005b78:	e050      	b.n	8005c1c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	220d      	movs	r2, #13
 8005b7e:	701a      	strb	r2, [r3, #0]
      break;
 8005b80:	e04c      	b.n	8005c1c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d049      	beq.n	8005c20 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	4798      	blx	r3
      }
      break;
 8005b98:	e042      	b.n	8005c20 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff fd72 	bl	800568c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d009      	beq.n	8005bc6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d005      	beq.n	8005bdc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bd6:	2105      	movs	r1, #5
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d107      	bne.n	8005bf8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f7ff fe2b 	bl	800584c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005bf6:	e014      	b.n	8005c22 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 f991 	bl	8006f20 <USBH_LL_Start>
      break;
 8005bfe:	e010      	b.n	8005c22 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005c00:	bf00      	nop
 8005c02:	e00e      	b.n	8005c22 <USBH_Process+0x3b6>
      break;
 8005c04:	bf00      	nop
 8005c06:	e00c      	b.n	8005c22 <USBH_Process+0x3b6>
      break;
 8005c08:	bf00      	nop
 8005c0a:	e00a      	b.n	8005c22 <USBH_Process+0x3b6>
    break;
 8005c0c:	bf00      	nop
 8005c0e:	e008      	b.n	8005c22 <USBH_Process+0x3b6>
      break;
 8005c10:	bf00      	nop
 8005c12:	e006      	b.n	8005c22 <USBH_Process+0x3b6>
      break;
 8005c14:	bf00      	nop
 8005c16:	e004      	b.n	8005c22 <USBH_Process+0x3b6>
      break;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <USBH_Process+0x3b6>
      break;
 8005c1c:	bf00      	nop
 8005c1e:	e000      	b.n	8005c22 <USBH_Process+0x3b6>
      break;
 8005c20:	bf00      	nop
  }
  return USBH_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af04      	add	r7, sp, #16
 8005c32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	785b      	ldrb	r3, [r3, #1]
 8005c40:	2b07      	cmp	r3, #7
 8005c42:	f200 81c1 	bhi.w	8005fc8 <USBH_HandleEnum+0x39c>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <USBH_HandleEnum+0x20>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c6d 	.word	0x08005c6d
 8005c50:	08005d2b 	.word	0x08005d2b
 8005c54:	08005d95 	.word	0x08005d95
 8005c58:	08005e23 	.word	0x08005e23
 8005c5c:	08005e8d 	.word	0x08005e8d
 8005c60:	08005efd 	.word	0x08005efd
 8005c64:	08005f43 	.word	0x08005f43
 8005c68:	08005f89 	.word	0x08005f89
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005c6c:	2108      	movs	r1, #8
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa50 	bl	8006114 <USBH_Get_DevDesc>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d130      	bne.n	8005ce0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	7919      	ldrb	r1, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005ca2:	b292      	uxth	r2, r2
 8005ca4:	9202      	str	r2, [sp, #8]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	9201      	str	r2, [sp, #4]
 8005caa:	9300      	str	r3, [sp, #0]
 8005cac:	4603      	mov	r3, r0
 8005cae:	2280      	movs	r2, #128	; 0x80
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 ff53 	bl	8006b5c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	7959      	ldrb	r1, [r3, #5]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005cca:	b292      	uxth	r2, r2
 8005ccc:	9202      	str	r2, [sp, #8]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	9201      	str	r2, [sp, #4]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 ff3f 	bl	8006b5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005cde:	e175      	b.n	8005fcc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	f040 8172 	bne.w	8005fcc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005cee:	3301      	adds	r3, #1
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d903      	bls.n	8005d0a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	220d      	movs	r2, #13
 8005d06:	701a      	strb	r2, [r3, #0]
      break;
 8005d08:	e160      	b.n	8005fcc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	795b      	ldrb	r3, [r3, #5]
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 ff73 	bl	8006bfc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	791b      	ldrb	r3, [r3, #4]
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 ff6d 	bl	8006bfc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
      break;
 8005d28:	e150      	b.n	8005fcc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005d2a:	2112      	movs	r1, #18
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f9f1 	bl	8006114 <USBH_Get_DevDesc>
 8005d32:	4603      	mov	r3, r0
 8005d34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005d42:	e145      	b.n	8005fd0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	f040 8142 	bne.w	8005fd0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005d52:	3301      	adds	r3, #1
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d903      	bls.n	8005d6e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	220d      	movs	r2, #13
 8005d6a:	701a      	strb	r2, [r3, #0]
      break;
 8005d6c:	e130      	b.n	8005fd0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	795b      	ldrb	r3, [r3, #5]
 8005d72:	4619      	mov	r1, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 ff41 	bl	8006bfc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	791b      	ldrb	r3, [r3, #4]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 ff3b 	bl	8006bfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]
      break;
 8005d92:	e11d      	b.n	8005fd0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005d94:	2101      	movs	r1, #1
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa68 	bl	800626c <USBH_SetAddress>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d132      	bne.n	8005e0c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005da6:	2002      	movs	r0, #2
 8005da8:	f001 fa15 	bl	80071d6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2203      	movs	r2, #3
 8005db8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	7919      	ldrb	r1, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005dce:	b292      	uxth	r2, r2
 8005dd0:	9202      	str	r2, [sp, #8]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	9201      	str	r2, [sp, #4]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2280      	movs	r2, #128	; 0x80
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 febd 	bl	8006b5c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7959      	ldrb	r1, [r3, #5]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005df6:	b292      	uxth	r2, r2
 8005df8:	9202      	str	r2, [sp, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	9201      	str	r2, [sp, #4]
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	4603      	mov	r3, r0
 8005e02:	2200      	movs	r2, #0
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fea9 	bl	8006b5c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005e0a:	e0e3      	b.n	8005fd4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	2b03      	cmp	r3, #3
 8005e10:	f040 80e0 	bne.w	8005fd4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	220d      	movs	r2, #13
 8005e18:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	705a      	strb	r2, [r3, #1]
      break;
 8005e20:	e0d8      	b.n	8005fd4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005e22:	2109      	movs	r1, #9
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f99d 	bl	8006164 <USBH_Get_CfgDesc>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005e2e:	7bbb      	ldrb	r3, [r7, #14]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d103      	bne.n	8005e3c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2204      	movs	r2, #4
 8005e38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005e3a:	e0cd      	b.n	8005fd8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e3c:	7bbb      	ldrb	r3, [r7, #14]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	f040 80ca 	bne.w	8005fd8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	d903      	bls.n	8005e66 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	220d      	movs	r2, #13
 8005e62:	701a      	strb	r2, [r3, #0]
      break;
 8005e64:	e0b8      	b.n	8005fd8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	795b      	ldrb	r3, [r3, #5]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fec5 	bl	8006bfc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	791b      	ldrb	r3, [r3, #4]
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 febf 	bl	8006bfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
      break;
 8005e8a:	e0a5      	b.n	8005fd8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f965 	bl	8006164 <USBH_Get_CfgDesc>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005e9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d103      	bne.n	8005eac <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2205      	movs	r2, #5
 8005ea8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005eaa:	e097      	b.n	8005fdc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	f040 8094 	bne.w	8005fdc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005eba:	3301      	adds	r3, #1
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d903      	bls.n	8005ed6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	220d      	movs	r2, #13
 8005ed2:	701a      	strb	r2, [r3, #0]
      break;
 8005ed4:	e082      	b.n	8005fdc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	795b      	ldrb	r3, [r3, #5]
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fe8d 	bl	8006bfc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	791b      	ldrb	r3, [r3, #4]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fe87 	bl	8006bfc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	701a      	strb	r2, [r3, #0]
      break;
 8005efa:	e06f      	b.n	8005fdc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d019      	beq.n	8005f3a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8005f12:	23ff      	movs	r3, #255	; 0xff
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f949 	bl	80061ac <USBH_Get_StringDesc>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005f1e:	7bbb      	ldrb	r3, [r7, #14]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d103      	bne.n	8005f2c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2206      	movs	r2, #6
 8005f28:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005f2a:	e059      	b.n	8005fe0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f2c:	7bbb      	ldrb	r3, [r7, #14]
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d156      	bne.n	8005fe0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2206      	movs	r2, #6
 8005f36:	705a      	strb	r2, [r3, #1]
      break;
 8005f38:	e052      	b.n	8005fe0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2206      	movs	r2, #6
 8005f3e:	705a      	strb	r2, [r3, #1]
      break;
 8005f40:	e04e      	b.n	8005fe0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d019      	beq.n	8005f80 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005f58:	23ff      	movs	r3, #255	; 0xff
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f926 	bl	80061ac <USBH_Get_StringDesc>
 8005f60:	4603      	mov	r3, r0
 8005f62:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005f64:	7bbb      	ldrb	r3, [r7, #14]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2207      	movs	r2, #7
 8005f6e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005f70:	e038      	b.n	8005fe4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f72:	7bbb      	ldrb	r3, [r7, #14]
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d135      	bne.n	8005fe4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2207      	movs	r2, #7
 8005f7c:	705a      	strb	r2, [r3, #1]
      break;
 8005f7e:	e031      	b.n	8005fe4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2207      	movs	r2, #7
 8005f84:	705a      	strb	r2, [r3, #1]
      break;
 8005f86:	e02d      	b.n	8005fe4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d017      	beq.n	8005fc2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8005f9e:	23ff      	movs	r3, #255	; 0xff
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f903 	bl	80061ac <USBH_Get_StringDesc>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005faa:	7bbb      	ldrb	r3, [r7, #14]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d102      	bne.n	8005fb6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8005fb4:	e018      	b.n	8005fe8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fb6:	7bbb      	ldrb	r3, [r7, #14]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d115      	bne.n	8005fe8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc0:	e012      	b.n	8005fe8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc6:	e00f      	b.n	8005fe8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8005fc8:	bf00      	nop
 8005fca:	e00e      	b.n	8005fea <USBH_HandleEnum+0x3be>
      break;
 8005fcc:	bf00      	nop
 8005fce:	e00c      	b.n	8005fea <USBH_HandleEnum+0x3be>
      break;
 8005fd0:	bf00      	nop
 8005fd2:	e00a      	b.n	8005fea <USBH_HandleEnum+0x3be>
      break;
 8005fd4:	bf00      	nop
 8005fd6:	e008      	b.n	8005fea <USBH_HandleEnum+0x3be>
      break;
 8005fd8:	bf00      	nop
 8005fda:	e006      	b.n	8005fea <USBH_HandleEnum+0x3be>
      break;
 8005fdc:	bf00      	nop
 8005fde:	e004      	b.n	8005fea <USBH_HandleEnum+0x3be>
      break;
 8005fe0:	bf00      	nop
 8005fe2:	e002      	b.n	8005fea <USBH_HandleEnum+0x3be>
      break;
 8005fe4:	bf00      	nop
 8005fe6:	e000      	b.n	8005fea <USBH_HandleEnum+0x3be>
      break;
 8005fe8:	bf00      	nop
  }
  return Status;
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f804 	bl	8006036 <USBH_HandleSof>
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b082      	sub	sp, #8
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b0b      	cmp	r3, #11
 8006046:	d10a      	bne.n	800605e <USBH_HandleSof+0x28>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
  }
}
 800605e:	bf00      	nop
 8006060:	3708      	adds	r7, #8
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006076:	bf00      	nop
}
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006092:	bf00      	nop
}
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 ff32 	bl	8006f56 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	791b      	ldrb	r3, [r3, #4]
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fd7f 	bl	8006bfc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	795b      	ldrb	r3, [r3, #5]
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fd79 	bl	8006bfc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af02      	add	r7, sp, #8
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	b29b      	uxth	r3, r3
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006132:	2100      	movs	r1, #0
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f864 	bl	8006202 <USBH_GetDescriptor>
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f203 3026 	addw	r0, r3, #806	; 0x326
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	b292      	uxth	r2, r2
 8006154:	4619      	mov	r1, r3
 8006156:	f000 f918 	bl	800638a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af02      	add	r7, sp, #8
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	331c      	adds	r3, #28
 8006174:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006176:	887b      	ldrh	r3, [r7, #2]
 8006178:	9300      	str	r3, [sp, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006180:	2100      	movs	r1, #0
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f83d 	bl	8006202 <USBH_GetDescriptor>
 8006188:	4603      	mov	r3, r0
 800618a:	72fb      	strb	r3, [r7, #11]
 800618c:	7afb      	ldrb	r3, [r7, #11]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006198:	887a      	ldrh	r2, [r7, #2]
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	4618      	mov	r0, r3
 800619e:	f000 f964 	bl	800646a <USBH_ParseCfgDesc>
  }

  return status;
 80061a2:	7afb      	ldrb	r3, [r7, #11]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	607a      	str	r2, [r7, #4]
 80061b6:	461a      	mov	r2, r3
 80061b8:	460b      	mov	r3, r1
 80061ba:	72fb      	strb	r3, [r7, #11]
 80061bc:	4613      	mov	r3, r2
 80061be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80061c0:	7afb      	ldrb	r3, [r7, #11]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80061c8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80061d0:	893b      	ldrh	r3, [r7, #8]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	460b      	mov	r3, r1
 80061d6:	2100      	movs	r1, #0
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f812 	bl	8006202 <USBH_GetDescriptor>
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80061ee:	893a      	ldrh	r2, [r7, #8]
 80061f0:	6879      	ldr	r1, [r7, #4]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fa37 	bl	8006666 <USBH_ParseStringDesc>
  }

  return status;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b084      	sub	sp, #16
 8006206:	af00      	add	r7, sp, #0
 8006208:	60f8      	str	r0, [r7, #12]
 800620a:	607b      	str	r3, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	72fb      	strb	r3, [r7, #11]
 8006210:	4613      	mov	r3, r2
 8006212:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	789b      	ldrb	r3, [r3, #2]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d11c      	bne.n	8006256 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800621c:	7afb      	ldrb	r3, [r7, #11]
 800621e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2206      	movs	r2, #6
 800622c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	893a      	ldrh	r2, [r7, #8]
 8006232:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006234:	893b      	ldrh	r3, [r7, #8]
 8006236:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800623a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800623e:	d104      	bne.n	800624a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f240 4209 	movw	r2, #1033	; 0x409
 8006246:	829a      	strh	r2, [r3, #20]
 8006248:	e002      	b.n	8006250 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8b3a      	ldrh	r2, [r7, #24]
 8006254:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006256:	8b3b      	ldrh	r3, [r7, #24]
 8006258:	461a      	mov	r2, r3
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fa50 	bl	8006702 <USBH_CtlReq>
 8006262:	4603      	mov	r3, r0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	789b      	ldrb	r3, [r3, #2]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d10f      	bne.n	80062a0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2205      	movs	r2, #5
 800628a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	b29a      	uxth	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80062a0:	2200      	movs	r2, #0
 80062a2:	2100      	movs	r1, #0
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa2c 	bl	8006702 <USBH_CtlReq>
 80062aa:	4603      	mov	r3, r0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	789b      	ldrb	r3, [r3, #2]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d10e      	bne.n	80062e6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2209      	movs	r2, #9
 80062d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	887a      	ldrh	r2, [r7, #2]
 80062d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80062e6:	2200      	movs	r2, #0
 80062e8:	2100      	movs	r1, #0
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa09 	bl	8006702 <USBH_CtlReq>
 80062f0:	4603      	mov	r3, r0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
 8006302:	460b      	mov	r3, r1
 8006304:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	789b      	ldrb	r3, [r3, #2]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d10f      	bne.n	800632e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2203      	movs	r2, #3
 8006318:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	b29a      	uxth	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800632e:	2200      	movs	r2, #0
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f9e5 	bl	8006702 <USBH_CtlReq>
 8006338:	4603      	mov	r3, r0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	789b      	ldrb	r3, [r3, #2]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10f      	bne.n	8006376 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2202      	movs	r2, #2
 800635a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006368:	78fb      	ldrb	r3, [r7, #3]
 800636a:	b29a      	uxth	r2, r3
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006376:	2200      	movs	r2, #0
 8006378:	2100      	movs	r1, #0
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f9c1 	bl	8006702 <USBH_CtlReq>
 8006380:	4603      	mov	r3, r0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	60f8      	str	r0, [r7, #12]
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	4613      	mov	r3, r2
 8006396:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	781a      	ldrb	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	785a      	ldrb	r2, [r3, #1]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	3302      	adds	r3, #2
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	3303      	adds	r3, #3
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	4313      	orrs	r3, r2
 80063be:	b29a      	uxth	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	791a      	ldrb	r2, [r3, #4]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	795a      	ldrb	r2, [r3, #5]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	799a      	ldrb	r2, [r3, #6]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	79da      	ldrb	r2, [r3, #7]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d939      	bls.n	800645e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	3308      	adds	r3, #8
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	3309      	adds	r3, #9
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	021b      	lsls	r3, r3, #8
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	4313      	orrs	r3, r2
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	330a      	adds	r3, #10
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	b29a      	uxth	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	330b      	adds	r3, #11
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	021b      	lsls	r3, r3, #8
 8006418:	b29b      	uxth	r3, r3
 800641a:	4313      	orrs	r3, r2
 800641c:	b29a      	uxth	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	330c      	adds	r3, #12
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	b29a      	uxth	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	330d      	adds	r3, #13
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	b29b      	uxth	r3, r3
 8006436:	4313      	orrs	r3, r2
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	7b9a      	ldrb	r2, [r3, #14]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	7bda      	ldrb	r2, [r3, #15]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	7c1a      	ldrb	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	7c5a      	ldrb	r2, [r3, #17]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	745a      	strb	r2, [r3, #17]
  }
}
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b08a      	sub	sp, #40	; 0x28
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	4613      	mov	r3, r2
 8006476:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	785a      	ldrb	r2, [r3, #1]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	3302      	adds	r3, #2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	3303      	adds	r3, #3
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	021b      	lsls	r3, r3, #8
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	4313      	orrs	r3, r2
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	791a      	ldrb	r2, [r3, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	795a      	ldrb	r2, [r3, #5]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	799a      	ldrb	r2, [r3, #6]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	79da      	ldrb	r2, [r3, #7]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	7a1a      	ldrb	r2, [r3, #8]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	2b09      	cmp	r3, #9
 80064e4:	d95f      	bls.n	80065a6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80064e6:	2309      	movs	r3, #9
 80064e8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80064ee:	e051      	b.n	8006594 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80064f0:	f107 0316 	add.w	r3, r7, #22
 80064f4:	4619      	mov	r1, r3
 80064f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064f8:	f000 f8e8 	bl	80066cc <USBH_GetNextDesc>
 80064fc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	2b04      	cmp	r3, #4
 8006504:	d146      	bne.n	8006594 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006506:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800650a:	221a      	movs	r2, #26
 800650c:	fb02 f303 	mul.w	r3, r2, r3
 8006510:	3308      	adds	r3, #8
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4413      	add	r3, r2
 8006516:	3302      	adds	r3, #2
 8006518:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800651a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800651c:	69f8      	ldr	r0, [r7, #28]
 800651e:	f000 f846 	bl	80065ae <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006522:	2300      	movs	r3, #0
 8006524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800652c:	e022      	b.n	8006574 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800652e:	f107 0316 	add.w	r3, r7, #22
 8006532:	4619      	mov	r1, r3
 8006534:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006536:	f000 f8c9 	bl	80066cc <USBH_GetNextDesc>
 800653a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	785b      	ldrb	r3, [r3, #1]
 8006540:	2b05      	cmp	r3, #5
 8006542:	d117      	bne.n	8006574 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006548:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800654c:	3201      	adds	r2, #1
 800654e:	00d2      	lsls	r2, r2, #3
 8006550:	211a      	movs	r1, #26
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	4413      	add	r3, r2
 8006558:	3308      	adds	r3, #8
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4413      	add	r3, r2
 800655e:	3304      	adds	r3, #4
 8006560:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006564:	69b8      	ldr	r0, [r7, #24]
 8006566:	f000 f851 	bl	800660c <USBH_ParseEPDesc>
            ep_ix++;
 800656a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800656e:	3301      	adds	r3, #1
 8006570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	791b      	ldrb	r3, [r3, #4]
 8006578:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800657c:	429a      	cmp	r2, r3
 800657e:	d204      	bcs.n	800658a <USBH_ParseCfgDesc+0x120>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	885a      	ldrh	r2, [r3, #2]
 8006584:	8afb      	ldrh	r3, [r7, #22]
 8006586:	429a      	cmp	r2, r3
 8006588:	d8d1      	bhi.n	800652e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800658a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800658e:	3301      	adds	r3, #1
 8006590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006594:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006598:	2b01      	cmp	r3, #1
 800659a:	d804      	bhi.n	80065a6 <USBH_ParseCfgDesc+0x13c>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	885a      	ldrh	r2, [r3, #2]
 80065a0:	8afb      	ldrh	r3, [r7, #22]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d8a4      	bhi.n	80064f0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80065a6:	bf00      	nop
 80065a8:	3728      	adds	r7, #40	; 0x28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	785a      	ldrb	r2, [r3, #1]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	789a      	ldrb	r2, [r3, #2]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	78da      	ldrb	r2, [r3, #3]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	791a      	ldrb	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	795a      	ldrb	r2, [r3, #5]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	799a      	ldrb	r2, [r3, #6]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	79da      	ldrb	r2, [r3, #7]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	7a1a      	ldrb	r2, [r3, #8]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	721a      	strb	r2, [r3, #8]
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781a      	ldrb	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	785a      	ldrb	r2, [r3, #1]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	789a      	ldrb	r2, [r3, #2]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	78da      	ldrb	r2, [r3, #3]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	3304      	adds	r3, #4
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b29a      	uxth	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	3305      	adds	r3, #5
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	b29b      	uxth	r3, r3
 800664a:	4313      	orrs	r3, r2
 800664c:	b29a      	uxth	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	799a      	ldrb	r2, [r3, #6]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	719a      	strb	r2, [r3, #6]
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006666:	b480      	push	{r7}
 8006668:	b087      	sub	sp, #28
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	4613      	mov	r3, r2
 8006672:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b03      	cmp	r3, #3
 800667c:	d120      	bne.n	80066c0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	1e9a      	subs	r2, r3, #2
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	4293      	cmp	r3, r2
 8006688:	bf28      	it	cs
 800668a:	4613      	movcs	r3, r2
 800668c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3302      	adds	r3, #2
 8006692:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006694:	2300      	movs	r3, #0
 8006696:	82fb      	strh	r3, [r7, #22]
 8006698:	e00b      	b.n	80066b2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800669a:	8afb      	ldrh	r3, [r7, #22]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	4413      	add	r3, r2
 80066a0:	781a      	ldrb	r2, [r3, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	701a      	strb	r2, [r3, #0]
      pdest++;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80066ac:	8afb      	ldrh	r3, [r7, #22]
 80066ae:	3302      	adds	r3, #2
 80066b0:	82fb      	strh	r3, [r7, #22]
 80066b2:	8afa      	ldrh	r2, [r7, #22]
 80066b4:	8abb      	ldrh	r3, [r7, #20]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d3ef      	bcc.n	800669a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	2200      	movs	r2, #0
 80066be:	701a      	strb	r2, [r3, #0]
  }
}
 80066c0:	bf00      	nop
 80066c2:	371c      	adds	r7, #28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	881a      	ldrh	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4413      	add	r3, r2
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80066f4:	68fb      	ldr	r3, [r7, #12]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b086      	sub	sp, #24
 8006706:	af00      	add	r7, sp, #0
 8006708:	60f8      	str	r0, [r7, #12]
 800670a:	60b9      	str	r1, [r7, #8]
 800670c:	4613      	mov	r3, r2
 800670e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006710:	2301      	movs	r3, #1
 8006712:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	789b      	ldrb	r3, [r3, #2]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d002      	beq.n	8006722 <USBH_CtlReq+0x20>
 800671c:	2b02      	cmp	r3, #2
 800671e:	d00f      	beq.n	8006740 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006720:	e027      	b.n	8006772 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	88fa      	ldrh	r2, [r7, #6]
 800672c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2202      	movs	r2, #2
 8006738:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800673a:	2301      	movs	r3, #1
 800673c:	75fb      	strb	r3, [r7, #23]
      break;
 800673e:	e018      	b.n	8006772 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 f81b 	bl	800677c <USBH_HandleControl>
 8006746:	4603      	mov	r3, r0
 8006748:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <USBH_CtlReq+0x54>
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b03      	cmp	r3, #3
 8006754:	d106      	bne.n	8006764 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2201      	movs	r2, #1
 800675a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2200      	movs	r2, #0
 8006760:	761a      	strb	r2, [r3, #24]
      break;
 8006762:	e005      	b.n	8006770 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006764:	7dfb      	ldrb	r3, [r7, #23]
 8006766:	2b02      	cmp	r3, #2
 8006768:	d102      	bne.n	8006770 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2201      	movs	r2, #1
 800676e:	709a      	strb	r2, [r3, #2]
      break;
 8006770:	bf00      	nop
  }
  return status;
 8006772:	7dfb      	ldrb	r3, [r7, #23]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3718      	adds	r7, #24
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af02      	add	r7, sp, #8
 8006782:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006788:	2300      	movs	r3, #0
 800678a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	7e1b      	ldrb	r3, [r3, #24]
 8006790:	3b01      	subs	r3, #1
 8006792:	2b0a      	cmp	r3, #10
 8006794:	f200 8156 	bhi.w	8006a44 <USBH_HandleControl+0x2c8>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <USBH_HandleControl+0x24>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067cd 	.word	0x080067cd
 80067a4:	080067e7 	.word	0x080067e7
 80067a8:	08006851 	.word	0x08006851
 80067ac:	08006877 	.word	0x08006877
 80067b0:	080068af 	.word	0x080068af
 80067b4:	080068d9 	.word	0x080068d9
 80067b8:	0800692b 	.word	0x0800692b
 80067bc:	0800694d 	.word	0x0800694d
 80067c0:	08006989 	.word	0x08006989
 80067c4:	080069af 	.word	0x080069af
 80067c8:	080069ed 	.word	0x080069ed
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f103 0110 	add.w	r1, r3, #16
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	795b      	ldrb	r3, [r3, #5]
 80067d6:	461a      	mov	r2, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f943 	bl	8006a64 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2202      	movs	r2, #2
 80067e2:	761a      	strb	r2, [r3, #24]
      break;
 80067e4:	e139      	b.n	8006a5a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	795b      	ldrb	r3, [r3, #5]
 80067ea:	4619      	mov	r1, r3
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fca1 	bl	8007134 <USBH_LL_GetURBState>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80067f6:	7bbb      	ldrb	r3, [r7, #14]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d11e      	bne.n	800683a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	7c1b      	ldrb	r3, [r3, #16]
 8006800:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006804:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	8adb      	ldrh	r3, [r3, #22]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800680e:	7b7b      	ldrb	r3, [r7, #13]
 8006810:	2b80      	cmp	r3, #128	; 0x80
 8006812:	d103      	bne.n	800681c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2203      	movs	r2, #3
 8006818:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800681a:	e115      	b.n	8006a48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2205      	movs	r2, #5
 8006820:	761a      	strb	r2, [r3, #24]
      break;
 8006822:	e111      	b.n	8006a48 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006824:	7b7b      	ldrb	r3, [r7, #13]
 8006826:	2b80      	cmp	r3, #128	; 0x80
 8006828:	d103      	bne.n	8006832 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2209      	movs	r2, #9
 800682e:	761a      	strb	r2, [r3, #24]
      break;
 8006830:	e10a      	b.n	8006a48 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2207      	movs	r2, #7
 8006836:	761a      	strb	r2, [r3, #24]
      break;
 8006838:	e106      	b.n	8006a48 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b04      	cmp	r3, #4
 800683e:	d003      	beq.n	8006848 <USBH_HandleControl+0xcc>
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	2b02      	cmp	r3, #2
 8006844:	f040 8100 	bne.w	8006a48 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	220b      	movs	r2, #11
 800684c:	761a      	strb	r2, [r3, #24]
      break;
 800684e:	e0fb      	b.n	8006a48 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006856:	b29a      	uxth	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6899      	ldr	r1, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	899a      	ldrh	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	791b      	ldrb	r3, [r3, #4]
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f93a 	bl	8006ae2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2204      	movs	r2, #4
 8006872:	761a      	strb	r2, [r3, #24]
      break;
 8006874:	e0f1      	b.n	8006a5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	791b      	ldrb	r3, [r3, #4]
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fc59 	bl	8007134 <USBH_LL_GetURBState>
 8006882:	4603      	mov	r3, r0
 8006884:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d102      	bne.n	8006892 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2209      	movs	r2, #9
 8006890:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	2b05      	cmp	r3, #5
 8006896:	d102      	bne.n	800689e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006898:	2303      	movs	r3, #3
 800689a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800689c:	e0d6      	b.n	8006a4c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	f040 80d3 	bne.w	8006a4c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	220b      	movs	r2, #11
 80068aa:	761a      	strb	r2, [r3, #24]
      break;
 80068ac:	e0ce      	b.n	8006a4c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6899      	ldr	r1, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	899a      	ldrh	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	795b      	ldrb	r3, [r3, #5]
 80068ba:	2001      	movs	r0, #1
 80068bc:	9000      	str	r0, [sp, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f8ea 	bl	8006a98 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2206      	movs	r2, #6
 80068d4:	761a      	strb	r2, [r3, #24]
      break;
 80068d6:	e0c0      	b.n	8006a5a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	795b      	ldrb	r3, [r3, #5]
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fc28 	bl	8007134 <USBH_LL_GetURBState>
 80068e4:	4603      	mov	r3, r0
 80068e6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d103      	bne.n	80068f6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2207      	movs	r2, #7
 80068f2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80068f4:	e0ac      	b.n	8006a50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80068f6:	7bbb      	ldrb	r3, [r7, #14]
 80068f8:	2b05      	cmp	r3, #5
 80068fa:	d105      	bne.n	8006908 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	220c      	movs	r2, #12
 8006900:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006902:	2303      	movs	r3, #3
 8006904:	73fb      	strb	r3, [r7, #15]
      break;
 8006906:	e0a3      	b.n	8006a50 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006908:	7bbb      	ldrb	r3, [r7, #14]
 800690a:	2b02      	cmp	r3, #2
 800690c:	d103      	bne.n	8006916 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2205      	movs	r2, #5
 8006912:	761a      	strb	r2, [r3, #24]
      break;
 8006914:	e09c      	b.n	8006a50 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b04      	cmp	r3, #4
 800691a:	f040 8099 	bne.w	8006a50 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	220b      	movs	r2, #11
 8006922:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006924:	2302      	movs	r3, #2
 8006926:	73fb      	strb	r3, [r7, #15]
      break;
 8006928:	e092      	b.n	8006a50 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	791b      	ldrb	r3, [r3, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	2100      	movs	r1, #0
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f8d5 	bl	8006ae2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2208      	movs	r2, #8
 8006948:	761a      	strb	r2, [r3, #24]

      break;
 800694a:	e086      	b.n	8006a5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	791b      	ldrb	r3, [r3, #4]
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fbee 	bl	8007134 <USBH_LL_GetURBState>
 8006958:	4603      	mov	r3, r0
 800695a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800695c:	7bbb      	ldrb	r3, [r7, #14]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d105      	bne.n	800696e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	220d      	movs	r2, #13
 8006966:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800696c:	e072      	b.n	8006a54 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b04      	cmp	r3, #4
 8006972:	d103      	bne.n	800697c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	220b      	movs	r2, #11
 8006978:	761a      	strb	r2, [r3, #24]
      break;
 800697a:	e06b      	b.n	8006a54 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800697c:	7bbb      	ldrb	r3, [r7, #14]
 800697e:	2b05      	cmp	r3, #5
 8006980:	d168      	bne.n	8006a54 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006982:	2303      	movs	r3, #3
 8006984:	73fb      	strb	r3, [r7, #15]
      break;
 8006986:	e065      	b.n	8006a54 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	795b      	ldrb	r3, [r3, #5]
 800698c:	2201      	movs	r2, #1
 800698e:	9200      	str	r2, [sp, #0]
 8006990:	2200      	movs	r2, #0
 8006992:	2100      	movs	r1, #0
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f87f 	bl	8006a98 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	220a      	movs	r2, #10
 80069aa:	761a      	strb	r2, [r3, #24]
      break;
 80069ac:	e055      	b.n	8006a5a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	795b      	ldrb	r3, [r3, #5]
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fbbd 	bl	8007134 <USBH_LL_GetURBState>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d105      	bne.n	80069d0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	220d      	movs	r2, #13
 80069cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80069ce:	e043      	b.n	8006a58 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80069d0:	7bbb      	ldrb	r3, [r7, #14]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d103      	bne.n	80069de <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2209      	movs	r2, #9
 80069da:	761a      	strb	r2, [r3, #24]
      break;
 80069dc:	e03c      	b.n	8006a58 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d139      	bne.n	8006a58 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	220b      	movs	r2, #11
 80069e8:	761a      	strb	r2, [r3, #24]
      break;
 80069ea:	e035      	b.n	8006a58 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	7e5b      	ldrb	r3, [r3, #25]
 80069f0:	3301      	adds	r3, #1
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	765a      	strb	r2, [r3, #25]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	7e5b      	ldrb	r3, [r3, #25]
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	d806      	bhi.n	8006a0e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006a0c:	e025      	b.n	8006a5a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a14:	2106      	movs	r1, #6
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	795b      	ldrb	r3, [r3, #5]
 8006a24:	4619      	mov	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f8e8 	bl	8006bfc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	791b      	ldrb	r3, [r3, #4]
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8e2 	bl	8006bfc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006a3e:	2302      	movs	r3, #2
 8006a40:	73fb      	strb	r3, [r7, #15]
      break;
 8006a42:	e00a      	b.n	8006a5a <USBH_HandleControl+0x2de>

    default:
      break;
 8006a44:	bf00      	nop
 8006a46:	e008      	b.n	8006a5a <USBH_HandleControl+0x2de>
      break;
 8006a48:	bf00      	nop
 8006a4a:	e006      	b.n	8006a5a <USBH_HandleControl+0x2de>
      break;
 8006a4c:	bf00      	nop
 8006a4e:	e004      	b.n	8006a5a <USBH_HandleControl+0x2de>
      break;
 8006a50:	bf00      	nop
 8006a52:	e002      	b.n	8006a5a <USBH_HandleControl+0x2de>
      break;
 8006a54:	bf00      	nop
 8006a56:	e000      	b.n	8006a5a <USBH_HandleControl+0x2de>
      break;
 8006a58:	bf00      	nop
  }

  return status;
 8006a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af04      	add	r7, sp, #16
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006a72:	79f9      	ldrb	r1, [r7, #7]
 8006a74:	2300      	movs	r3, #0
 8006a76:	9303      	str	r3, [sp, #12]
 8006a78:	2308      	movs	r3, #8
 8006a7a:	9302      	str	r3, [sp, #8]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	2300      	movs	r3, #0
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	2300      	movs	r3, #0
 8006a86:	2200      	movs	r2, #0
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 fb22 	bl	80070d2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3710      	adds	r7, #16
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af04      	add	r7, sp, #16
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	80fb      	strh	r3, [r7, #6]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006abc:	7979      	ldrb	r1, [r7, #5]
 8006abe:	7e3b      	ldrb	r3, [r7, #24]
 8006ac0:	9303      	str	r3, [sp, #12]
 8006ac2:	88fb      	ldrh	r3, [r7, #6]
 8006ac4:	9302      	str	r3, [sp, #8]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	9301      	str	r3, [sp, #4]
 8006aca:	2301      	movs	r3, #1
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fafd 	bl	80070d2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b088      	sub	sp, #32
 8006ae6:	af04      	add	r7, sp, #16
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	4611      	mov	r1, r2
 8006aee:	461a      	mov	r2, r3
 8006af0:	460b      	mov	r3, r1
 8006af2:	80fb      	strh	r3, [r7, #6]
 8006af4:	4613      	mov	r3, r2
 8006af6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006af8:	7979      	ldrb	r1, [r7, #5]
 8006afa:	2300      	movs	r3, #0
 8006afc:	9303      	str	r3, [sp, #12]
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	9302      	str	r3, [sp, #8]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	2301      	movs	r3, #1
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 fadf 	bl	80070d2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006b14:	2300      	movs	r3, #0

}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b088      	sub	sp, #32
 8006b22:	af04      	add	r7, sp, #16
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	60b9      	str	r1, [r7, #8]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	71fb      	strb	r3, [r7, #7]
 8006b30:	4613      	mov	r3, r2
 8006b32:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	79b9      	ldrb	r1, [r7, #6]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	9203      	str	r2, [sp, #12]
 8006b3e:	9302      	str	r3, [sp, #8]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	9301      	str	r3, [sp, #4]
 8006b44:	2301      	movs	r3, #1
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	2303      	movs	r3, #3
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f000 fac0 	bl	80070d2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af04      	add	r7, sp, #16
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	4608      	mov	r0, r1
 8006b66:	4611      	mov	r1, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	70fb      	strb	r3, [r7, #3]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	70bb      	strb	r3, [r7, #2]
 8006b72:	4613      	mov	r3, r2
 8006b74:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006b76:	7878      	ldrb	r0, [r7, #1]
 8006b78:	78ba      	ldrb	r2, [r7, #2]
 8006b7a:	78f9      	ldrb	r1, [r7, #3]
 8006b7c:	8b3b      	ldrh	r3, [r7, #24]
 8006b7e:	9302      	str	r3, [sp, #8]
 8006b80:	7d3b      	ldrb	r3, [r7, #20]
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	7c3b      	ldrb	r3, [r7, #16]
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	4603      	mov	r3, r0
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fa53 	bl	8007036 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fa72 	bl	8007094 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f836 	bl	8006c38 <USBH_GetFreePipe>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006bd0:	89fb      	ldrh	r3, [r7, #14]
 8006bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00a      	beq.n	8006bf0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006bda:	78fa      	ldrb	r2, [r7, #3]
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	33e0      	adds	r3, #224	; 0xe0
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	440b      	add	r3, r1
 8006bee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006bf0:	89fb      	ldrh	r3, [r7, #14]
 8006bf2:	b2db      	uxtb	r3, r3
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	460b      	mov	r3, r1
 8006c06:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	2b0a      	cmp	r3, #10
 8006c0c:	d80d      	bhi.n	8006c2a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	33e0      	adds	r3, #224	; 0xe0
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	33e0      	adds	r3, #224	; 0xe0
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	440b      	add	r3, r1
 8006c28:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]
 8006c48:	e00f      	b.n	8006c6a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	33e0      	adds	r3, #224	; 0xe0
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d102      	bne.n	8006c64 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	e007      	b.n	8006c74 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	3301      	adds	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2b0a      	cmp	r3, #10
 8006c6e:	d9ec      	bls.n	8006c4a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006c84:	2201      	movs	r2, #1
 8006c86:	490e      	ldr	r1, [pc, #56]	; (8006cc0 <MX_USB_HOST_Init+0x40>)
 8006c88:	480e      	ldr	r0, [pc, #56]	; (8006cc4 <MX_USB_HOST_Init+0x44>)
 8006c8a:	f7fe fcc5 	bl	8005618 <USBH_Init>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006c94:	f7f9 fdbc 	bl	8000810 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8006c98:	490b      	ldr	r1, [pc, #44]	; (8006cc8 <MX_USB_HOST_Init+0x48>)
 8006c9a:	480a      	ldr	r0, [pc, #40]	; (8006cc4 <MX_USB_HOST_Init+0x44>)
 8006c9c:	f7fe fd4a 	bl	8005734 <USBH_RegisterClass>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006ca6:	f7f9 fdb3 	bl	8000810 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006caa:	4806      	ldr	r0, [pc, #24]	; (8006cc4 <MX_USB_HOST_Init+0x44>)
 8006cac:	f7fe fdce 	bl	800584c <USBH_Start>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006cb6:	f7f9 fdab 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006cba:	bf00      	nop
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	08006ce1 	.word	0x08006ce1
 8006cc4:	200001a0 	.word	0x200001a0
 8006cc8:	2000000c 	.word	0x2000000c

08006ccc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006cd0:	4802      	ldr	r0, [pc, #8]	; (8006cdc <MX_USB_HOST_Process+0x10>)
 8006cd2:	f7fe fdcb 	bl	800586c <USBH_Process>
}
 8006cd6:	bf00      	nop
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200001a0 	.word	0x200001a0

08006ce0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d819      	bhi.n	8006d28 <USBH_UserProcess+0x48>
 8006cf4:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <USBH_UserProcess+0x1c>)
 8006cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfa:	bf00      	nop
 8006cfc:	08006d29 	.word	0x08006d29
 8006d00:	08006d19 	.word	0x08006d19
 8006d04:	08006d29 	.word	0x08006d29
 8006d08:	08006d21 	.word	0x08006d21
 8006d0c:	08006d11 	.word	0x08006d11
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006d10:	4b09      	ldr	r3, [pc, #36]	; (8006d38 <USBH_UserProcess+0x58>)
 8006d12:	2203      	movs	r2, #3
 8006d14:	701a      	strb	r2, [r3, #0]
  break;
 8006d16:	e008      	b.n	8006d2a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <USBH_UserProcess+0x58>)
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	701a      	strb	r2, [r3, #0]
  break;
 8006d1e:	e004      	b.n	8006d2a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <USBH_UserProcess+0x58>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	701a      	strb	r2, [r3, #0]
  break;
 8006d26:	e000      	b.n	8006d2a <USBH_UserProcess+0x4a>

  default:
  break;
 8006d28:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006d2a:	bf00      	nop
 8006d2c:	370c      	adds	r7, #12
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	200000b0 	.word	0x200000b0

08006d3c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b08a      	sub	sp, #40	; 0x28
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d44:	f107 0314 	add.w	r3, r7, #20
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
 8006d4c:	605a      	str	r2, [r3, #4]
 8006d4e:	609a      	str	r2, [r3, #8]
 8006d50:	60da      	str	r2, [r3, #12]
 8006d52:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d5c:	d147      	bne.n	8006dee <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	4b25      	ldr	r3, [pc, #148]	; (8006df8 <HAL_HCD_MspInit+0xbc>)
 8006d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d66:	4a24      	ldr	r2, [pc, #144]	; (8006df8 <HAL_HCD_MspInit+0xbc>)
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d6e:	4b22      	ldr	r3, [pc, #136]	; (8006df8 <HAL_HCD_MspInit+0xbc>)
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	f003 0301 	and.w	r3, r3, #1
 8006d76:	613b      	str	r3, [r7, #16]
 8006d78:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d80:	2300      	movs	r3, #0
 8006d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	481b      	ldr	r0, [pc, #108]	; (8006dfc <HAL_HCD_MspInit+0xc0>)
 8006d90:	f7fa f802 	bl	8000d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006da2:	2303      	movs	r3, #3
 8006da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006da6:	230a      	movs	r3, #10
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006daa:	f107 0314 	add.w	r3, r7, #20
 8006dae:	4619      	mov	r1, r3
 8006db0:	4812      	ldr	r0, [pc, #72]	; (8006dfc <HAL_HCD_MspInit+0xc0>)
 8006db2:	f7f9 fff1 	bl	8000d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006db6:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <HAL_HCD_MspInit+0xbc>)
 8006db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dba:	4a0f      	ldr	r2, [pc, #60]	; (8006df8 <HAL_HCD_MspInit+0xbc>)
 8006dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dc0:	6353      	str	r3, [r2, #52]	; 0x34
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60fb      	str	r3, [r7, #12]
 8006dc6:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <HAL_HCD_MspInit+0xbc>)
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dca:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <HAL_HCD_MspInit+0xbc>)
 8006dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8006dd2:	4b09      	ldr	r3, [pc, #36]	; (8006df8 <HAL_HCD_MspInit+0xbc>)
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006dde:	2200      	movs	r2, #0
 8006de0:	2100      	movs	r1, #0
 8006de2:	2043      	movs	r0, #67	; 0x43
 8006de4:	f7f9 ffa1 	bl	8000d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006de8:	2043      	movs	r0, #67	; 0x43
 8006dea:	f7f9 ffba 	bl	8000d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006dee:	bf00      	nop
 8006df0:	3728      	adds	r7, #40	; 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	40020000 	.word	0x40020000

08006e00 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7ff f8ff 	bl	8006012 <USBH_LL_IncTimer>
}
 8006e14:	bf00      	nop
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7ff f937 	bl	800609e <USBH_LL_Connect>
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff f940 	bl	80060cc <USBH_LL_Disconnect>
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
 8006e60:	4613      	mov	r3, r2
 8006e62:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006e64:	bf00      	nop
 8006e66:	370c      	adds	r7, #12
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6e:	4770      	bx	lr

08006e70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff f8f1 	bl	8006066 <USBH_LL_PortEnabled>
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff f8f1 	bl	8006082 <USBH_LL_PortDisabled>
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d12a      	bne.n	8006f10 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006eba:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <USBH_LL_Init+0x74>)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <USBH_LL_Init+0x74>)
 8006ec6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006eca:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <USBH_LL_Init+0x74>)
 8006ecc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006ed0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006ed2:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <USBH_LL_Init+0x74>)
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006ed8:	4b10      	ldr	r3, [pc, #64]	; (8006f1c <USBH_LL_Init+0x74>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <USBH_LL_Init+0x74>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006ee4:	4b0d      	ldr	r3, [pc, #52]	; (8006f1c <USBH_LL_Init+0x74>)
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <USBH_LL_Init+0x74>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006ef0:	480a      	ldr	r0, [pc, #40]	; (8006f1c <USBH_LL_Init+0x74>)
 8006ef2:	f7fa f908 	bl	8001106 <HAL_HCD_Init>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d001      	beq.n	8006f00 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006efc:	f7f9 fc88 	bl	8000810 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006f00:	4806      	ldr	r0, [pc, #24]	; (8006f1c <USBH_LL_Init+0x74>)
 8006f02:	f7fa fce5 	bl	80018d0 <HAL_HCD_GetCurrentFrame>
 8006f06:	4603      	mov	r3, r0
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff f872 	bl	8005ff4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	20000578 	.word	0x20000578

08006f20 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f7fa fc54 	bl	80017e4 <HAL_HCD_Start>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 f952 	bl	80071ec <USBH_Get_USB_Status>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b084      	sub	sp, #16
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fa fc5c 	bl	800182a <HAL_HCD_Stop>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 f937 	bl	80071ec <USBH_Get_USB_Status>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006f94:	2301      	movs	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7fa fca4 	bl	80018ec <HAL_HCD_GetCurrentSpeed>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d00c      	beq.n	8006fc4 <USBH_LL_GetSpeed+0x38>
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d80d      	bhi.n	8006fca <USBH_LL_GetSpeed+0x3e>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <USBH_LL_GetSpeed+0x2c>
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d003      	beq.n	8006fbe <USBH_LL_GetSpeed+0x32>
 8006fb6:	e008      	b.n	8006fca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	73fb      	strb	r3, [r7, #15]
    break;
 8006fbc:	e008      	b.n	8006fd0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc2:	e005      	b.n	8006fd0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc8:	e002      	b.n	8006fd0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
    break;
 8006fce:	bf00      	nop
  }
  return  speed;
 8006fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fa fc37 	bl	8001864 <HAL_HCD_ResetPort>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 f8f5 	bl	80071ec <USBH_Get_USB_Status>
 8007002:	4603      	mov	r3, r0
 8007004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007006:	7bbb      	ldrb	r3, [r7, #14]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3710      	adds	r7, #16
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	4611      	mov	r1, r2
 8007026:	4618      	mov	r0, r3
 8007028:	f7fa fc3e 	bl	80018a8 <HAL_HCD_HC_GetXferCount>
 800702c:	4603      	mov	r3, r0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3708      	adds	r7, #8
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007036:	b590      	push	{r4, r7, lr}
 8007038:	b089      	sub	sp, #36	; 0x24
 800703a:	af04      	add	r7, sp, #16
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	4608      	mov	r0, r1
 8007040:	4611      	mov	r1, r2
 8007042:	461a      	mov	r2, r3
 8007044:	4603      	mov	r3, r0
 8007046:	70fb      	strb	r3, [r7, #3]
 8007048:	460b      	mov	r3, r1
 800704a:	70bb      	strb	r3, [r7, #2]
 800704c:	4613      	mov	r3, r2
 800704e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800705e:	787c      	ldrb	r4, [r7, #1]
 8007060:	78ba      	ldrb	r2, [r7, #2]
 8007062:	78f9      	ldrb	r1, [r7, #3]
 8007064:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007066:	9302      	str	r3, [sp, #8]
 8007068:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800706c:	9301      	str	r3, [sp, #4]
 800706e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	4623      	mov	r3, r4
 8007076:	f7fa f8a8 	bl	80011ca <HAL_HCD_HC_Init>
 800707a:	4603      	mov	r3, r0
 800707c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	4618      	mov	r0, r3
 8007082:	f000 f8b3 	bl	80071ec <USBH_Get_USB_Status>
 8007086:	4603      	mov	r3, r0
 8007088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800708a:	7bbb      	ldrb	r3, [r7, #14]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	bd90      	pop	{r4, r7, pc}

08007094 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	460b      	mov	r3, r1
 800709e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070ae:	78fa      	ldrb	r2, [r7, #3]
 80070b0:	4611      	mov	r1, r2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fa f918 	bl	80012e8 <HAL_HCD_HC_Halt>
 80070b8:	4603      	mov	r3, r0
 80070ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 f894 	bl	80071ec <USBH_Get_USB_Status>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80070d2:	b590      	push	{r4, r7, lr}
 80070d4:	b089      	sub	sp, #36	; 0x24
 80070d6:	af04      	add	r7, sp, #16
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	4608      	mov	r0, r1
 80070dc:	4611      	mov	r1, r2
 80070de:	461a      	mov	r2, r3
 80070e0:	4603      	mov	r3, r0
 80070e2:	70fb      	strb	r3, [r7, #3]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70bb      	strb	r3, [r7, #2]
 80070e8:	4613      	mov	r3, r2
 80070ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070f0:	2300      	movs	r3, #0
 80070f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80070fa:	787c      	ldrb	r4, [r7, #1]
 80070fc:	78ba      	ldrb	r2, [r7, #2]
 80070fe:	78f9      	ldrb	r1, [r7, #3]
 8007100:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007104:	9303      	str	r3, [sp, #12]
 8007106:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007108:	9302      	str	r3, [sp, #8]
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	4623      	mov	r3, r4
 8007116:	f7fa f90b 	bl	8001330 <HAL_HCD_HC_SubmitRequest>
 800711a:	4603      	mov	r3, r0
 800711c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800711e:	7bfb      	ldrb	r3, [r7, #15]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 f863 	bl	80071ec <USBH_Get_USB_Status>
 8007126:	4603      	mov	r3, r0
 8007128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800712a:	7bbb      	ldrb	r3, [r7, #14]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	bd90      	pop	{r4, r7, pc}

08007134 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	460b      	mov	r3, r1
 800713e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007146:	78fa      	ldrb	r2, [r7, #3]
 8007148:	4611      	mov	r1, r2
 800714a:	4618      	mov	r0, r3
 800714c:	f7fa fb98 	bl	8001880 <HAL_HCD_HC_GetURBState>
 8007150:	4603      	mov	r3, r0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3708      	adds	r7, #8
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	460b      	mov	r3, r1
 8007164:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 8007166:	20c8      	movs	r0, #200	; 0xc8
 8007168:	f7f9 fce0 	bl	8000b2c <HAL_Delay>
  return USBH_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007176:	b480      	push	{r7}
 8007178:	b085      	sub	sp, #20
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
 8007182:	4613      	mov	r3, r2
 8007184:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800718c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800718e:	78fb      	ldrb	r3, [r7, #3]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	212c      	movs	r1, #44	; 0x2c
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	4413      	add	r3, r2
 800719a:	333b      	adds	r3, #59	; 0x3b
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d009      	beq.n	80071b6 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80071a2:	78fb      	ldrb	r3, [r7, #3]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	212c      	movs	r1, #44	; 0x2c
 80071a8:	fb01 f303 	mul.w	r3, r1, r3
 80071ac:	4413      	add	r3, r2
 80071ae:	3354      	adds	r3, #84	; 0x54
 80071b0:	78ba      	ldrb	r2, [r7, #2]
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	e008      	b.n	80071c8 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	212c      	movs	r1, #44	; 0x2c
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	4413      	add	r3, r2
 80071c2:	3355      	adds	r3, #85	; 0x55
 80071c4:	78ba      	ldrb	r2, [r7, #2]
 80071c6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7f9 fca4 	bl	8000b2c <HAL_Delay>
}
 80071e4:	bf00      	nop
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d817      	bhi.n	8007230 <USBH_Get_USB_Status+0x44>
 8007200:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <USBH_Get_USB_Status+0x1c>)
 8007202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007206:	bf00      	nop
 8007208:	08007219 	.word	0x08007219
 800720c:	0800721f 	.word	0x0800721f
 8007210:	08007225 	.word	0x08007225
 8007214:	0800722b 	.word	0x0800722b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	73fb      	strb	r3, [r7, #15]
    break;
 800721c:	e00b      	b.n	8007236 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800721e:	2302      	movs	r3, #2
 8007220:	73fb      	strb	r3, [r7, #15]
    break;
 8007222:	e008      	b.n	8007236 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
    break;
 8007228:	e005      	b.n	8007236 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800722a:	2302      	movs	r3, #2
 800722c:	73fb      	strb	r3, [r7, #15]
    break;
 800722e:	e002      	b.n	8007236 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007230:	2302      	movs	r3, #2
 8007232:	73fb      	strb	r3, [r7, #15]
    break;
 8007234:	bf00      	nop
  }
  return usb_status;
 8007236:	7bfb      	ldrb	r3, [r7, #15]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <__errno>:
 8007244:	4b01      	ldr	r3, [pc, #4]	; (800724c <__errno+0x8>)
 8007246:	6818      	ldr	r0, [r3, #0]
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	2000002c 	.word	0x2000002c

08007250 <__libc_init_array>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4d0d      	ldr	r5, [pc, #52]	; (8007288 <__libc_init_array+0x38>)
 8007254:	4c0d      	ldr	r4, [pc, #52]	; (800728c <__libc_init_array+0x3c>)
 8007256:	1b64      	subs	r4, r4, r5
 8007258:	10a4      	asrs	r4, r4, #2
 800725a:	2600      	movs	r6, #0
 800725c:	42a6      	cmp	r6, r4
 800725e:	d109      	bne.n	8007274 <__libc_init_array+0x24>
 8007260:	4d0b      	ldr	r5, [pc, #44]	; (8007290 <__libc_init_array+0x40>)
 8007262:	4c0c      	ldr	r4, [pc, #48]	; (8007294 <__libc_init_array+0x44>)
 8007264:	f000 fc5e 	bl	8007b24 <_init>
 8007268:	1b64      	subs	r4, r4, r5
 800726a:	10a4      	asrs	r4, r4, #2
 800726c:	2600      	movs	r6, #0
 800726e:	42a6      	cmp	r6, r4
 8007270:	d105      	bne.n	800727e <__libc_init_array+0x2e>
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	f855 3b04 	ldr.w	r3, [r5], #4
 8007278:	4798      	blx	r3
 800727a:	3601      	adds	r6, #1
 800727c:	e7ee      	b.n	800725c <__libc_init_array+0xc>
 800727e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007282:	4798      	blx	r3
 8007284:	3601      	adds	r6, #1
 8007286:	e7f2      	b.n	800726e <__libc_init_array+0x1e>
 8007288:	08007c64 	.word	0x08007c64
 800728c:	08007c64 	.word	0x08007c64
 8007290:	08007c64 	.word	0x08007c64
 8007294:	08007c68 	.word	0x08007c68

08007298 <malloc>:
 8007298:	4b02      	ldr	r3, [pc, #8]	; (80072a4 <malloc+0xc>)
 800729a:	4601      	mov	r1, r0
 800729c:	6818      	ldr	r0, [r3, #0]
 800729e:	f000 b863 	b.w	8007368 <_malloc_r>
 80072a2:	bf00      	nop
 80072a4:	2000002c 	.word	0x2000002c

080072a8 <free>:
 80072a8:	4b02      	ldr	r3, [pc, #8]	; (80072b4 <free+0xc>)
 80072aa:	4601      	mov	r1, r0
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	f000 b80b 	b.w	80072c8 <_free_r>
 80072b2:	bf00      	nop
 80072b4:	2000002c 	.word	0x2000002c

080072b8 <memset>:
 80072b8:	4402      	add	r2, r0
 80072ba:	4603      	mov	r3, r0
 80072bc:	4293      	cmp	r3, r2
 80072be:	d100      	bne.n	80072c2 <memset+0xa>
 80072c0:	4770      	bx	lr
 80072c2:	f803 1b01 	strb.w	r1, [r3], #1
 80072c6:	e7f9      	b.n	80072bc <memset+0x4>

080072c8 <_free_r>:
 80072c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ca:	2900      	cmp	r1, #0
 80072cc:	d048      	beq.n	8007360 <_free_r+0x98>
 80072ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d2:	9001      	str	r0, [sp, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	f1a1 0404 	sub.w	r4, r1, #4
 80072da:	bfb8      	it	lt
 80072dc:	18e4      	addlt	r4, r4, r3
 80072de:	f000 f8cd 	bl	800747c <__malloc_lock>
 80072e2:	4a20      	ldr	r2, [pc, #128]	; (8007364 <_free_r+0x9c>)
 80072e4:	9801      	ldr	r0, [sp, #4]
 80072e6:	6813      	ldr	r3, [r2, #0]
 80072e8:	4615      	mov	r5, r2
 80072ea:	b933      	cbnz	r3, 80072fa <_free_r+0x32>
 80072ec:	6063      	str	r3, [r4, #4]
 80072ee:	6014      	str	r4, [r2, #0]
 80072f0:	b003      	add	sp, #12
 80072f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072f6:	f000 b8c7 	b.w	8007488 <__malloc_unlock>
 80072fa:	42a3      	cmp	r3, r4
 80072fc:	d90b      	bls.n	8007316 <_free_r+0x4e>
 80072fe:	6821      	ldr	r1, [r4, #0]
 8007300:	1862      	adds	r2, r4, r1
 8007302:	4293      	cmp	r3, r2
 8007304:	bf04      	itt	eq
 8007306:	681a      	ldreq	r2, [r3, #0]
 8007308:	685b      	ldreq	r3, [r3, #4]
 800730a:	6063      	str	r3, [r4, #4]
 800730c:	bf04      	itt	eq
 800730e:	1852      	addeq	r2, r2, r1
 8007310:	6022      	streq	r2, [r4, #0]
 8007312:	602c      	str	r4, [r5, #0]
 8007314:	e7ec      	b.n	80072f0 <_free_r+0x28>
 8007316:	461a      	mov	r2, r3
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b10b      	cbz	r3, 8007320 <_free_r+0x58>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d9fa      	bls.n	8007316 <_free_r+0x4e>
 8007320:	6811      	ldr	r1, [r2, #0]
 8007322:	1855      	adds	r5, r2, r1
 8007324:	42a5      	cmp	r5, r4
 8007326:	d10b      	bne.n	8007340 <_free_r+0x78>
 8007328:	6824      	ldr	r4, [r4, #0]
 800732a:	4421      	add	r1, r4
 800732c:	1854      	adds	r4, r2, r1
 800732e:	42a3      	cmp	r3, r4
 8007330:	6011      	str	r1, [r2, #0]
 8007332:	d1dd      	bne.n	80072f0 <_free_r+0x28>
 8007334:	681c      	ldr	r4, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	6053      	str	r3, [r2, #4]
 800733a:	4421      	add	r1, r4
 800733c:	6011      	str	r1, [r2, #0]
 800733e:	e7d7      	b.n	80072f0 <_free_r+0x28>
 8007340:	d902      	bls.n	8007348 <_free_r+0x80>
 8007342:	230c      	movs	r3, #12
 8007344:	6003      	str	r3, [r0, #0]
 8007346:	e7d3      	b.n	80072f0 <_free_r+0x28>
 8007348:	6825      	ldr	r5, [r4, #0]
 800734a:	1961      	adds	r1, r4, r5
 800734c:	428b      	cmp	r3, r1
 800734e:	bf04      	itt	eq
 8007350:	6819      	ldreq	r1, [r3, #0]
 8007352:	685b      	ldreq	r3, [r3, #4]
 8007354:	6063      	str	r3, [r4, #4]
 8007356:	bf04      	itt	eq
 8007358:	1949      	addeq	r1, r1, r5
 800735a:	6021      	streq	r1, [r4, #0]
 800735c:	6054      	str	r4, [r2, #4]
 800735e:	e7c7      	b.n	80072f0 <_free_r+0x28>
 8007360:	b003      	add	sp, #12
 8007362:	bd30      	pop	{r4, r5, pc}
 8007364:	200000b4 	.word	0x200000b4

08007368 <_malloc_r>:
 8007368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736a:	1ccd      	adds	r5, r1, #3
 800736c:	f025 0503 	bic.w	r5, r5, #3
 8007370:	3508      	adds	r5, #8
 8007372:	2d0c      	cmp	r5, #12
 8007374:	bf38      	it	cc
 8007376:	250c      	movcc	r5, #12
 8007378:	2d00      	cmp	r5, #0
 800737a:	4606      	mov	r6, r0
 800737c:	db01      	blt.n	8007382 <_malloc_r+0x1a>
 800737e:	42a9      	cmp	r1, r5
 8007380:	d903      	bls.n	800738a <_malloc_r+0x22>
 8007382:	230c      	movs	r3, #12
 8007384:	6033      	str	r3, [r6, #0]
 8007386:	2000      	movs	r0, #0
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738a:	f000 f877 	bl	800747c <__malloc_lock>
 800738e:	4921      	ldr	r1, [pc, #132]	; (8007414 <_malloc_r+0xac>)
 8007390:	680a      	ldr	r2, [r1, #0]
 8007392:	4614      	mov	r4, r2
 8007394:	b99c      	cbnz	r4, 80073be <_malloc_r+0x56>
 8007396:	4f20      	ldr	r7, [pc, #128]	; (8007418 <_malloc_r+0xb0>)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	b923      	cbnz	r3, 80073a6 <_malloc_r+0x3e>
 800739c:	4621      	mov	r1, r4
 800739e:	4630      	mov	r0, r6
 80073a0:	f000 f83c 	bl	800741c <_sbrk_r>
 80073a4:	6038      	str	r0, [r7, #0]
 80073a6:	4629      	mov	r1, r5
 80073a8:	4630      	mov	r0, r6
 80073aa:	f000 f837 	bl	800741c <_sbrk_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d123      	bne.n	80073fa <_malloc_r+0x92>
 80073b2:	230c      	movs	r3, #12
 80073b4:	6033      	str	r3, [r6, #0]
 80073b6:	4630      	mov	r0, r6
 80073b8:	f000 f866 	bl	8007488 <__malloc_unlock>
 80073bc:	e7e3      	b.n	8007386 <_malloc_r+0x1e>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	1b5b      	subs	r3, r3, r5
 80073c2:	d417      	bmi.n	80073f4 <_malloc_r+0x8c>
 80073c4:	2b0b      	cmp	r3, #11
 80073c6:	d903      	bls.n	80073d0 <_malloc_r+0x68>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	441c      	add	r4, r3
 80073cc:	6025      	str	r5, [r4, #0]
 80073ce:	e004      	b.n	80073da <_malloc_r+0x72>
 80073d0:	6863      	ldr	r3, [r4, #4]
 80073d2:	42a2      	cmp	r2, r4
 80073d4:	bf0c      	ite	eq
 80073d6:	600b      	streq	r3, [r1, #0]
 80073d8:	6053      	strne	r3, [r2, #4]
 80073da:	4630      	mov	r0, r6
 80073dc:	f000 f854 	bl	8007488 <__malloc_unlock>
 80073e0:	f104 000b 	add.w	r0, r4, #11
 80073e4:	1d23      	adds	r3, r4, #4
 80073e6:	f020 0007 	bic.w	r0, r0, #7
 80073ea:	1ac2      	subs	r2, r0, r3
 80073ec:	d0cc      	beq.n	8007388 <_malloc_r+0x20>
 80073ee:	1a1b      	subs	r3, r3, r0
 80073f0:	50a3      	str	r3, [r4, r2]
 80073f2:	e7c9      	b.n	8007388 <_malloc_r+0x20>
 80073f4:	4622      	mov	r2, r4
 80073f6:	6864      	ldr	r4, [r4, #4]
 80073f8:	e7cc      	b.n	8007394 <_malloc_r+0x2c>
 80073fa:	1cc4      	adds	r4, r0, #3
 80073fc:	f024 0403 	bic.w	r4, r4, #3
 8007400:	42a0      	cmp	r0, r4
 8007402:	d0e3      	beq.n	80073cc <_malloc_r+0x64>
 8007404:	1a21      	subs	r1, r4, r0
 8007406:	4630      	mov	r0, r6
 8007408:	f000 f808 	bl	800741c <_sbrk_r>
 800740c:	3001      	adds	r0, #1
 800740e:	d1dd      	bne.n	80073cc <_malloc_r+0x64>
 8007410:	e7cf      	b.n	80073b2 <_malloc_r+0x4a>
 8007412:	bf00      	nop
 8007414:	200000b4 	.word	0x200000b4
 8007418:	200000b8 	.word	0x200000b8

0800741c <_sbrk_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	4d06      	ldr	r5, [pc, #24]	; (8007438 <_sbrk_r+0x1c>)
 8007420:	2300      	movs	r3, #0
 8007422:	4604      	mov	r4, r0
 8007424:	4608      	mov	r0, r1
 8007426:	602b      	str	r3, [r5, #0]
 8007428:	f7f9 fa9c 	bl	8000964 <_sbrk>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_sbrk_r+0x1a>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_sbrk_r+0x1a>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	2000087c 	.word	0x2000087c

0800743c <siprintf>:
 800743c:	b40e      	push	{r1, r2, r3}
 800743e:	b500      	push	{lr}
 8007440:	b09c      	sub	sp, #112	; 0x70
 8007442:	ab1d      	add	r3, sp, #116	; 0x74
 8007444:	9002      	str	r0, [sp, #8]
 8007446:	9006      	str	r0, [sp, #24]
 8007448:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800744c:	4809      	ldr	r0, [pc, #36]	; (8007474 <siprintf+0x38>)
 800744e:	9107      	str	r1, [sp, #28]
 8007450:	9104      	str	r1, [sp, #16]
 8007452:	4909      	ldr	r1, [pc, #36]	; (8007478 <siprintf+0x3c>)
 8007454:	f853 2b04 	ldr.w	r2, [r3], #4
 8007458:	9105      	str	r1, [sp, #20]
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	a902      	add	r1, sp, #8
 8007460:	f000 f874 	bl	800754c <_svfiprintf_r>
 8007464:	9b02      	ldr	r3, [sp, #8]
 8007466:	2200      	movs	r2, #0
 8007468:	701a      	strb	r2, [r3, #0]
 800746a:	b01c      	add	sp, #112	; 0x70
 800746c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007470:	b003      	add	sp, #12
 8007472:	4770      	bx	lr
 8007474:	2000002c 	.word	0x2000002c
 8007478:	ffff0208 	.word	0xffff0208

0800747c <__malloc_lock>:
 800747c:	4801      	ldr	r0, [pc, #4]	; (8007484 <__malloc_lock+0x8>)
 800747e:	f000 baf9 	b.w	8007a74 <__retarget_lock_acquire_recursive>
 8007482:	bf00      	nop
 8007484:	20000884 	.word	0x20000884

08007488 <__malloc_unlock>:
 8007488:	4801      	ldr	r0, [pc, #4]	; (8007490 <__malloc_unlock+0x8>)
 800748a:	f000 baf4 	b.w	8007a76 <__retarget_lock_release_recursive>
 800748e:	bf00      	nop
 8007490:	20000884 	.word	0x20000884

08007494 <__ssputs_r>:
 8007494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007498:	688e      	ldr	r6, [r1, #8]
 800749a:	429e      	cmp	r6, r3
 800749c:	4682      	mov	sl, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	4690      	mov	r8, r2
 80074a2:	461f      	mov	r7, r3
 80074a4:	d838      	bhi.n	8007518 <__ssputs_r+0x84>
 80074a6:	898a      	ldrh	r2, [r1, #12]
 80074a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074ac:	d032      	beq.n	8007514 <__ssputs_r+0x80>
 80074ae:	6825      	ldr	r5, [r4, #0]
 80074b0:	6909      	ldr	r1, [r1, #16]
 80074b2:	eba5 0901 	sub.w	r9, r5, r1
 80074b6:	6965      	ldr	r5, [r4, #20]
 80074b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074c0:	3301      	adds	r3, #1
 80074c2:	444b      	add	r3, r9
 80074c4:	106d      	asrs	r5, r5, #1
 80074c6:	429d      	cmp	r5, r3
 80074c8:	bf38      	it	cc
 80074ca:	461d      	movcc	r5, r3
 80074cc:	0553      	lsls	r3, r2, #21
 80074ce:	d531      	bpl.n	8007534 <__ssputs_r+0xa0>
 80074d0:	4629      	mov	r1, r5
 80074d2:	f7ff ff49 	bl	8007368 <_malloc_r>
 80074d6:	4606      	mov	r6, r0
 80074d8:	b950      	cbnz	r0, 80074f0 <__ssputs_r+0x5c>
 80074da:	230c      	movs	r3, #12
 80074dc:	f8ca 3000 	str.w	r3, [sl]
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	f04f 30ff 	mov.w	r0, #4294967295
 80074ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f0:	6921      	ldr	r1, [r4, #16]
 80074f2:	464a      	mov	r2, r9
 80074f4:	f000 fac0 	bl	8007a78 <memcpy>
 80074f8:	89a3      	ldrh	r3, [r4, #12]
 80074fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007502:	81a3      	strh	r3, [r4, #12]
 8007504:	6126      	str	r6, [r4, #16]
 8007506:	6165      	str	r5, [r4, #20]
 8007508:	444e      	add	r6, r9
 800750a:	eba5 0509 	sub.w	r5, r5, r9
 800750e:	6026      	str	r6, [r4, #0]
 8007510:	60a5      	str	r5, [r4, #8]
 8007512:	463e      	mov	r6, r7
 8007514:	42be      	cmp	r6, r7
 8007516:	d900      	bls.n	800751a <__ssputs_r+0x86>
 8007518:	463e      	mov	r6, r7
 800751a:	4632      	mov	r2, r6
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	4641      	mov	r1, r8
 8007520:	f000 fab8 	bl	8007a94 <memmove>
 8007524:	68a3      	ldr	r3, [r4, #8]
 8007526:	6822      	ldr	r2, [r4, #0]
 8007528:	1b9b      	subs	r3, r3, r6
 800752a:	4432      	add	r2, r6
 800752c:	60a3      	str	r3, [r4, #8]
 800752e:	6022      	str	r2, [r4, #0]
 8007530:	2000      	movs	r0, #0
 8007532:	e7db      	b.n	80074ec <__ssputs_r+0x58>
 8007534:	462a      	mov	r2, r5
 8007536:	f000 fac7 	bl	8007ac8 <_realloc_r>
 800753a:	4606      	mov	r6, r0
 800753c:	2800      	cmp	r0, #0
 800753e:	d1e1      	bne.n	8007504 <__ssputs_r+0x70>
 8007540:	6921      	ldr	r1, [r4, #16]
 8007542:	4650      	mov	r0, sl
 8007544:	f7ff fec0 	bl	80072c8 <_free_r>
 8007548:	e7c7      	b.n	80074da <__ssputs_r+0x46>
	...

0800754c <_svfiprintf_r>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	4698      	mov	r8, r3
 8007552:	898b      	ldrh	r3, [r1, #12]
 8007554:	061b      	lsls	r3, r3, #24
 8007556:	b09d      	sub	sp, #116	; 0x74
 8007558:	4607      	mov	r7, r0
 800755a:	460d      	mov	r5, r1
 800755c:	4614      	mov	r4, r2
 800755e:	d50e      	bpl.n	800757e <_svfiprintf_r+0x32>
 8007560:	690b      	ldr	r3, [r1, #16]
 8007562:	b963      	cbnz	r3, 800757e <_svfiprintf_r+0x32>
 8007564:	2140      	movs	r1, #64	; 0x40
 8007566:	f7ff feff 	bl	8007368 <_malloc_r>
 800756a:	6028      	str	r0, [r5, #0]
 800756c:	6128      	str	r0, [r5, #16]
 800756e:	b920      	cbnz	r0, 800757a <_svfiprintf_r+0x2e>
 8007570:	230c      	movs	r3, #12
 8007572:	603b      	str	r3, [r7, #0]
 8007574:	f04f 30ff 	mov.w	r0, #4294967295
 8007578:	e0d1      	b.n	800771e <_svfiprintf_r+0x1d2>
 800757a:	2340      	movs	r3, #64	; 0x40
 800757c:	616b      	str	r3, [r5, #20]
 800757e:	2300      	movs	r3, #0
 8007580:	9309      	str	r3, [sp, #36]	; 0x24
 8007582:	2320      	movs	r3, #32
 8007584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007588:	f8cd 800c 	str.w	r8, [sp, #12]
 800758c:	2330      	movs	r3, #48	; 0x30
 800758e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007738 <_svfiprintf_r+0x1ec>
 8007592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007596:	f04f 0901 	mov.w	r9, #1
 800759a:	4623      	mov	r3, r4
 800759c:	469a      	mov	sl, r3
 800759e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075a2:	b10a      	cbz	r2, 80075a8 <_svfiprintf_r+0x5c>
 80075a4:	2a25      	cmp	r2, #37	; 0x25
 80075a6:	d1f9      	bne.n	800759c <_svfiprintf_r+0x50>
 80075a8:	ebba 0b04 	subs.w	fp, sl, r4
 80075ac:	d00b      	beq.n	80075c6 <_svfiprintf_r+0x7a>
 80075ae:	465b      	mov	r3, fp
 80075b0:	4622      	mov	r2, r4
 80075b2:	4629      	mov	r1, r5
 80075b4:	4638      	mov	r0, r7
 80075b6:	f7ff ff6d 	bl	8007494 <__ssputs_r>
 80075ba:	3001      	adds	r0, #1
 80075bc:	f000 80aa 	beq.w	8007714 <_svfiprintf_r+0x1c8>
 80075c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075c2:	445a      	add	r2, fp
 80075c4:	9209      	str	r2, [sp, #36]	; 0x24
 80075c6:	f89a 3000 	ldrb.w	r3, [sl]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80a2 	beq.w	8007714 <_svfiprintf_r+0x1c8>
 80075d0:	2300      	movs	r3, #0
 80075d2:	f04f 32ff 	mov.w	r2, #4294967295
 80075d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075da:	f10a 0a01 	add.w	sl, sl, #1
 80075de:	9304      	str	r3, [sp, #16]
 80075e0:	9307      	str	r3, [sp, #28]
 80075e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075e6:	931a      	str	r3, [sp, #104]	; 0x68
 80075e8:	4654      	mov	r4, sl
 80075ea:	2205      	movs	r2, #5
 80075ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075f0:	4851      	ldr	r0, [pc, #324]	; (8007738 <_svfiprintf_r+0x1ec>)
 80075f2:	f7f8 fdf5 	bl	80001e0 <memchr>
 80075f6:	9a04      	ldr	r2, [sp, #16]
 80075f8:	b9d8      	cbnz	r0, 8007632 <_svfiprintf_r+0xe6>
 80075fa:	06d0      	lsls	r0, r2, #27
 80075fc:	bf44      	itt	mi
 80075fe:	2320      	movmi	r3, #32
 8007600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007604:	0711      	lsls	r1, r2, #28
 8007606:	bf44      	itt	mi
 8007608:	232b      	movmi	r3, #43	; 0x2b
 800760a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800760e:	f89a 3000 	ldrb.w	r3, [sl]
 8007612:	2b2a      	cmp	r3, #42	; 0x2a
 8007614:	d015      	beq.n	8007642 <_svfiprintf_r+0xf6>
 8007616:	9a07      	ldr	r2, [sp, #28]
 8007618:	4654      	mov	r4, sl
 800761a:	2000      	movs	r0, #0
 800761c:	f04f 0c0a 	mov.w	ip, #10
 8007620:	4621      	mov	r1, r4
 8007622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007626:	3b30      	subs	r3, #48	; 0x30
 8007628:	2b09      	cmp	r3, #9
 800762a:	d94e      	bls.n	80076ca <_svfiprintf_r+0x17e>
 800762c:	b1b0      	cbz	r0, 800765c <_svfiprintf_r+0x110>
 800762e:	9207      	str	r2, [sp, #28]
 8007630:	e014      	b.n	800765c <_svfiprintf_r+0x110>
 8007632:	eba0 0308 	sub.w	r3, r0, r8
 8007636:	fa09 f303 	lsl.w	r3, r9, r3
 800763a:	4313      	orrs	r3, r2
 800763c:	9304      	str	r3, [sp, #16]
 800763e:	46a2      	mov	sl, r4
 8007640:	e7d2      	b.n	80075e8 <_svfiprintf_r+0x9c>
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	1d19      	adds	r1, r3, #4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	9103      	str	r1, [sp, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	bfbb      	ittet	lt
 800764e:	425b      	neglt	r3, r3
 8007650:	f042 0202 	orrlt.w	r2, r2, #2
 8007654:	9307      	strge	r3, [sp, #28]
 8007656:	9307      	strlt	r3, [sp, #28]
 8007658:	bfb8      	it	lt
 800765a:	9204      	strlt	r2, [sp, #16]
 800765c:	7823      	ldrb	r3, [r4, #0]
 800765e:	2b2e      	cmp	r3, #46	; 0x2e
 8007660:	d10c      	bne.n	800767c <_svfiprintf_r+0x130>
 8007662:	7863      	ldrb	r3, [r4, #1]
 8007664:	2b2a      	cmp	r3, #42	; 0x2a
 8007666:	d135      	bne.n	80076d4 <_svfiprintf_r+0x188>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	1d1a      	adds	r2, r3, #4
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	9203      	str	r2, [sp, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	bfb8      	it	lt
 8007674:	f04f 33ff 	movlt.w	r3, #4294967295
 8007678:	3402      	adds	r4, #2
 800767a:	9305      	str	r3, [sp, #20]
 800767c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007748 <_svfiprintf_r+0x1fc>
 8007680:	7821      	ldrb	r1, [r4, #0]
 8007682:	2203      	movs	r2, #3
 8007684:	4650      	mov	r0, sl
 8007686:	f7f8 fdab 	bl	80001e0 <memchr>
 800768a:	b140      	cbz	r0, 800769e <_svfiprintf_r+0x152>
 800768c:	2340      	movs	r3, #64	; 0x40
 800768e:	eba0 000a 	sub.w	r0, r0, sl
 8007692:	fa03 f000 	lsl.w	r0, r3, r0
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	4303      	orrs	r3, r0
 800769a:	3401      	adds	r4, #1
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a2:	4826      	ldr	r0, [pc, #152]	; (800773c <_svfiprintf_r+0x1f0>)
 80076a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076a8:	2206      	movs	r2, #6
 80076aa:	f7f8 fd99 	bl	80001e0 <memchr>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d038      	beq.n	8007724 <_svfiprintf_r+0x1d8>
 80076b2:	4b23      	ldr	r3, [pc, #140]	; (8007740 <_svfiprintf_r+0x1f4>)
 80076b4:	bb1b      	cbnz	r3, 80076fe <_svfiprintf_r+0x1b2>
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	3307      	adds	r3, #7
 80076ba:	f023 0307 	bic.w	r3, r3, #7
 80076be:	3308      	adds	r3, #8
 80076c0:	9303      	str	r3, [sp, #12]
 80076c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076c4:	4433      	add	r3, r6
 80076c6:	9309      	str	r3, [sp, #36]	; 0x24
 80076c8:	e767      	b.n	800759a <_svfiprintf_r+0x4e>
 80076ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80076ce:	460c      	mov	r4, r1
 80076d0:	2001      	movs	r0, #1
 80076d2:	e7a5      	b.n	8007620 <_svfiprintf_r+0xd4>
 80076d4:	2300      	movs	r3, #0
 80076d6:	3401      	adds	r4, #1
 80076d8:	9305      	str	r3, [sp, #20]
 80076da:	4619      	mov	r1, r3
 80076dc:	f04f 0c0a 	mov.w	ip, #10
 80076e0:	4620      	mov	r0, r4
 80076e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076e6:	3a30      	subs	r2, #48	; 0x30
 80076e8:	2a09      	cmp	r2, #9
 80076ea:	d903      	bls.n	80076f4 <_svfiprintf_r+0x1a8>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d0c5      	beq.n	800767c <_svfiprintf_r+0x130>
 80076f0:	9105      	str	r1, [sp, #20]
 80076f2:	e7c3      	b.n	800767c <_svfiprintf_r+0x130>
 80076f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80076f8:	4604      	mov	r4, r0
 80076fa:	2301      	movs	r3, #1
 80076fc:	e7f0      	b.n	80076e0 <_svfiprintf_r+0x194>
 80076fe:	ab03      	add	r3, sp, #12
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	462a      	mov	r2, r5
 8007704:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <_svfiprintf_r+0x1f8>)
 8007706:	a904      	add	r1, sp, #16
 8007708:	4638      	mov	r0, r7
 800770a:	f3af 8000 	nop.w
 800770e:	1c42      	adds	r2, r0, #1
 8007710:	4606      	mov	r6, r0
 8007712:	d1d6      	bne.n	80076c2 <_svfiprintf_r+0x176>
 8007714:	89ab      	ldrh	r3, [r5, #12]
 8007716:	065b      	lsls	r3, r3, #25
 8007718:	f53f af2c 	bmi.w	8007574 <_svfiprintf_r+0x28>
 800771c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800771e:	b01d      	add	sp, #116	; 0x74
 8007720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007724:	ab03      	add	r3, sp, #12
 8007726:	9300      	str	r3, [sp, #0]
 8007728:	462a      	mov	r2, r5
 800772a:	4b06      	ldr	r3, [pc, #24]	; (8007744 <_svfiprintf_r+0x1f8>)
 800772c:	a904      	add	r1, sp, #16
 800772e:	4638      	mov	r0, r7
 8007730:	f000 f87a 	bl	8007828 <_printf_i>
 8007734:	e7eb      	b.n	800770e <_svfiprintf_r+0x1c2>
 8007736:	bf00      	nop
 8007738:	08007c28 	.word	0x08007c28
 800773c:	08007c32 	.word	0x08007c32
 8007740:	00000000 	.word	0x00000000
 8007744:	08007495 	.word	0x08007495
 8007748:	08007c2e 	.word	0x08007c2e

0800774c <_printf_common>:
 800774c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007750:	4616      	mov	r6, r2
 8007752:	4699      	mov	r9, r3
 8007754:	688a      	ldr	r2, [r1, #8]
 8007756:	690b      	ldr	r3, [r1, #16]
 8007758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800775c:	4293      	cmp	r3, r2
 800775e:	bfb8      	it	lt
 8007760:	4613      	movlt	r3, r2
 8007762:	6033      	str	r3, [r6, #0]
 8007764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007768:	4607      	mov	r7, r0
 800776a:	460c      	mov	r4, r1
 800776c:	b10a      	cbz	r2, 8007772 <_printf_common+0x26>
 800776e:	3301      	adds	r3, #1
 8007770:	6033      	str	r3, [r6, #0]
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	0699      	lsls	r1, r3, #26
 8007776:	bf42      	ittt	mi
 8007778:	6833      	ldrmi	r3, [r6, #0]
 800777a:	3302      	addmi	r3, #2
 800777c:	6033      	strmi	r3, [r6, #0]
 800777e:	6825      	ldr	r5, [r4, #0]
 8007780:	f015 0506 	ands.w	r5, r5, #6
 8007784:	d106      	bne.n	8007794 <_printf_common+0x48>
 8007786:	f104 0a19 	add.w	sl, r4, #25
 800778a:	68e3      	ldr	r3, [r4, #12]
 800778c:	6832      	ldr	r2, [r6, #0]
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	42ab      	cmp	r3, r5
 8007792:	dc26      	bgt.n	80077e2 <_printf_common+0x96>
 8007794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007798:	1e13      	subs	r3, r2, #0
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	bf18      	it	ne
 800779e:	2301      	movne	r3, #1
 80077a0:	0692      	lsls	r2, r2, #26
 80077a2:	d42b      	bmi.n	80077fc <_printf_common+0xb0>
 80077a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077a8:	4649      	mov	r1, r9
 80077aa:	4638      	mov	r0, r7
 80077ac:	47c0      	blx	r8
 80077ae:	3001      	adds	r0, #1
 80077b0:	d01e      	beq.n	80077f0 <_printf_common+0xa4>
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	68e5      	ldr	r5, [r4, #12]
 80077b6:	6832      	ldr	r2, [r6, #0]
 80077b8:	f003 0306 	and.w	r3, r3, #6
 80077bc:	2b04      	cmp	r3, #4
 80077be:	bf08      	it	eq
 80077c0:	1aad      	subeq	r5, r5, r2
 80077c2:	68a3      	ldr	r3, [r4, #8]
 80077c4:	6922      	ldr	r2, [r4, #16]
 80077c6:	bf0c      	ite	eq
 80077c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077cc:	2500      	movne	r5, #0
 80077ce:	4293      	cmp	r3, r2
 80077d0:	bfc4      	itt	gt
 80077d2:	1a9b      	subgt	r3, r3, r2
 80077d4:	18ed      	addgt	r5, r5, r3
 80077d6:	2600      	movs	r6, #0
 80077d8:	341a      	adds	r4, #26
 80077da:	42b5      	cmp	r5, r6
 80077dc:	d11a      	bne.n	8007814 <_printf_common+0xc8>
 80077de:	2000      	movs	r0, #0
 80077e0:	e008      	b.n	80077f4 <_printf_common+0xa8>
 80077e2:	2301      	movs	r3, #1
 80077e4:	4652      	mov	r2, sl
 80077e6:	4649      	mov	r1, r9
 80077e8:	4638      	mov	r0, r7
 80077ea:	47c0      	blx	r8
 80077ec:	3001      	adds	r0, #1
 80077ee:	d103      	bne.n	80077f8 <_printf_common+0xac>
 80077f0:	f04f 30ff 	mov.w	r0, #4294967295
 80077f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f8:	3501      	adds	r5, #1
 80077fa:	e7c6      	b.n	800778a <_printf_common+0x3e>
 80077fc:	18e1      	adds	r1, r4, r3
 80077fe:	1c5a      	adds	r2, r3, #1
 8007800:	2030      	movs	r0, #48	; 0x30
 8007802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007806:	4422      	add	r2, r4
 8007808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800780c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007810:	3302      	adds	r3, #2
 8007812:	e7c7      	b.n	80077a4 <_printf_common+0x58>
 8007814:	2301      	movs	r3, #1
 8007816:	4622      	mov	r2, r4
 8007818:	4649      	mov	r1, r9
 800781a:	4638      	mov	r0, r7
 800781c:	47c0      	blx	r8
 800781e:	3001      	adds	r0, #1
 8007820:	d0e6      	beq.n	80077f0 <_printf_common+0xa4>
 8007822:	3601      	adds	r6, #1
 8007824:	e7d9      	b.n	80077da <_printf_common+0x8e>
	...

08007828 <_printf_i>:
 8007828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800782c:	460c      	mov	r4, r1
 800782e:	4691      	mov	r9, r2
 8007830:	7e27      	ldrb	r7, [r4, #24]
 8007832:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007834:	2f78      	cmp	r7, #120	; 0x78
 8007836:	4680      	mov	r8, r0
 8007838:	469a      	mov	sl, r3
 800783a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800783e:	d807      	bhi.n	8007850 <_printf_i+0x28>
 8007840:	2f62      	cmp	r7, #98	; 0x62
 8007842:	d80a      	bhi.n	800785a <_printf_i+0x32>
 8007844:	2f00      	cmp	r7, #0
 8007846:	f000 80d8 	beq.w	80079fa <_printf_i+0x1d2>
 800784a:	2f58      	cmp	r7, #88	; 0x58
 800784c:	f000 80a3 	beq.w	8007996 <_printf_i+0x16e>
 8007850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007858:	e03a      	b.n	80078d0 <_printf_i+0xa8>
 800785a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800785e:	2b15      	cmp	r3, #21
 8007860:	d8f6      	bhi.n	8007850 <_printf_i+0x28>
 8007862:	a001      	add	r0, pc, #4	; (adr r0, 8007868 <_printf_i+0x40>)
 8007864:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007868:	080078c1 	.word	0x080078c1
 800786c:	080078d5 	.word	0x080078d5
 8007870:	08007851 	.word	0x08007851
 8007874:	08007851 	.word	0x08007851
 8007878:	08007851 	.word	0x08007851
 800787c:	08007851 	.word	0x08007851
 8007880:	080078d5 	.word	0x080078d5
 8007884:	08007851 	.word	0x08007851
 8007888:	08007851 	.word	0x08007851
 800788c:	08007851 	.word	0x08007851
 8007890:	08007851 	.word	0x08007851
 8007894:	080079e1 	.word	0x080079e1
 8007898:	08007905 	.word	0x08007905
 800789c:	080079c3 	.word	0x080079c3
 80078a0:	08007851 	.word	0x08007851
 80078a4:	08007851 	.word	0x08007851
 80078a8:	08007a03 	.word	0x08007a03
 80078ac:	08007851 	.word	0x08007851
 80078b0:	08007905 	.word	0x08007905
 80078b4:	08007851 	.word	0x08007851
 80078b8:	08007851 	.word	0x08007851
 80078bc:	080079cb 	.word	0x080079cb
 80078c0:	680b      	ldr	r3, [r1, #0]
 80078c2:	1d1a      	adds	r2, r3, #4
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	600a      	str	r2, [r1, #0]
 80078c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078d0:	2301      	movs	r3, #1
 80078d2:	e0a3      	b.n	8007a1c <_printf_i+0x1f4>
 80078d4:	6825      	ldr	r5, [r4, #0]
 80078d6:	6808      	ldr	r0, [r1, #0]
 80078d8:	062e      	lsls	r6, r5, #24
 80078da:	f100 0304 	add.w	r3, r0, #4
 80078de:	d50a      	bpl.n	80078f6 <_printf_i+0xce>
 80078e0:	6805      	ldr	r5, [r0, #0]
 80078e2:	600b      	str	r3, [r1, #0]
 80078e4:	2d00      	cmp	r5, #0
 80078e6:	da03      	bge.n	80078f0 <_printf_i+0xc8>
 80078e8:	232d      	movs	r3, #45	; 0x2d
 80078ea:	426d      	negs	r5, r5
 80078ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078f0:	485e      	ldr	r0, [pc, #376]	; (8007a6c <_printf_i+0x244>)
 80078f2:	230a      	movs	r3, #10
 80078f4:	e019      	b.n	800792a <_printf_i+0x102>
 80078f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80078fa:	6805      	ldr	r5, [r0, #0]
 80078fc:	600b      	str	r3, [r1, #0]
 80078fe:	bf18      	it	ne
 8007900:	b22d      	sxthne	r5, r5
 8007902:	e7ef      	b.n	80078e4 <_printf_i+0xbc>
 8007904:	680b      	ldr	r3, [r1, #0]
 8007906:	6825      	ldr	r5, [r4, #0]
 8007908:	1d18      	adds	r0, r3, #4
 800790a:	6008      	str	r0, [r1, #0]
 800790c:	0628      	lsls	r0, r5, #24
 800790e:	d501      	bpl.n	8007914 <_printf_i+0xec>
 8007910:	681d      	ldr	r5, [r3, #0]
 8007912:	e002      	b.n	800791a <_printf_i+0xf2>
 8007914:	0669      	lsls	r1, r5, #25
 8007916:	d5fb      	bpl.n	8007910 <_printf_i+0xe8>
 8007918:	881d      	ldrh	r5, [r3, #0]
 800791a:	4854      	ldr	r0, [pc, #336]	; (8007a6c <_printf_i+0x244>)
 800791c:	2f6f      	cmp	r7, #111	; 0x6f
 800791e:	bf0c      	ite	eq
 8007920:	2308      	moveq	r3, #8
 8007922:	230a      	movne	r3, #10
 8007924:	2100      	movs	r1, #0
 8007926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800792a:	6866      	ldr	r6, [r4, #4]
 800792c:	60a6      	str	r6, [r4, #8]
 800792e:	2e00      	cmp	r6, #0
 8007930:	bfa2      	ittt	ge
 8007932:	6821      	ldrge	r1, [r4, #0]
 8007934:	f021 0104 	bicge.w	r1, r1, #4
 8007938:	6021      	strge	r1, [r4, #0]
 800793a:	b90d      	cbnz	r5, 8007940 <_printf_i+0x118>
 800793c:	2e00      	cmp	r6, #0
 800793e:	d04d      	beq.n	80079dc <_printf_i+0x1b4>
 8007940:	4616      	mov	r6, r2
 8007942:	fbb5 f1f3 	udiv	r1, r5, r3
 8007946:	fb03 5711 	mls	r7, r3, r1, r5
 800794a:	5dc7      	ldrb	r7, [r0, r7]
 800794c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007950:	462f      	mov	r7, r5
 8007952:	42bb      	cmp	r3, r7
 8007954:	460d      	mov	r5, r1
 8007956:	d9f4      	bls.n	8007942 <_printf_i+0x11a>
 8007958:	2b08      	cmp	r3, #8
 800795a:	d10b      	bne.n	8007974 <_printf_i+0x14c>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	07df      	lsls	r7, r3, #31
 8007960:	d508      	bpl.n	8007974 <_printf_i+0x14c>
 8007962:	6923      	ldr	r3, [r4, #16]
 8007964:	6861      	ldr	r1, [r4, #4]
 8007966:	4299      	cmp	r1, r3
 8007968:	bfde      	ittt	le
 800796a:	2330      	movle	r3, #48	; 0x30
 800796c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007970:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007974:	1b92      	subs	r2, r2, r6
 8007976:	6122      	str	r2, [r4, #16]
 8007978:	f8cd a000 	str.w	sl, [sp]
 800797c:	464b      	mov	r3, r9
 800797e:	aa03      	add	r2, sp, #12
 8007980:	4621      	mov	r1, r4
 8007982:	4640      	mov	r0, r8
 8007984:	f7ff fee2 	bl	800774c <_printf_common>
 8007988:	3001      	adds	r0, #1
 800798a:	d14c      	bne.n	8007a26 <_printf_i+0x1fe>
 800798c:	f04f 30ff 	mov.w	r0, #4294967295
 8007990:	b004      	add	sp, #16
 8007992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007996:	4835      	ldr	r0, [pc, #212]	; (8007a6c <_printf_i+0x244>)
 8007998:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	680e      	ldr	r6, [r1, #0]
 80079a0:	061f      	lsls	r7, r3, #24
 80079a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80079a6:	600e      	str	r6, [r1, #0]
 80079a8:	d514      	bpl.n	80079d4 <_printf_i+0x1ac>
 80079aa:	07d9      	lsls	r1, r3, #31
 80079ac:	bf44      	itt	mi
 80079ae:	f043 0320 	orrmi.w	r3, r3, #32
 80079b2:	6023      	strmi	r3, [r4, #0]
 80079b4:	b91d      	cbnz	r5, 80079be <_printf_i+0x196>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	f023 0320 	bic.w	r3, r3, #32
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	2310      	movs	r3, #16
 80079c0:	e7b0      	b.n	8007924 <_printf_i+0xfc>
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	f043 0320 	orr.w	r3, r3, #32
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	2378      	movs	r3, #120	; 0x78
 80079cc:	4828      	ldr	r0, [pc, #160]	; (8007a70 <_printf_i+0x248>)
 80079ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80079d2:	e7e3      	b.n	800799c <_printf_i+0x174>
 80079d4:	065e      	lsls	r6, r3, #25
 80079d6:	bf48      	it	mi
 80079d8:	b2ad      	uxthmi	r5, r5
 80079da:	e7e6      	b.n	80079aa <_printf_i+0x182>
 80079dc:	4616      	mov	r6, r2
 80079de:	e7bb      	b.n	8007958 <_printf_i+0x130>
 80079e0:	680b      	ldr	r3, [r1, #0]
 80079e2:	6826      	ldr	r6, [r4, #0]
 80079e4:	6960      	ldr	r0, [r4, #20]
 80079e6:	1d1d      	adds	r5, r3, #4
 80079e8:	600d      	str	r5, [r1, #0]
 80079ea:	0635      	lsls	r5, r6, #24
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	d501      	bpl.n	80079f4 <_printf_i+0x1cc>
 80079f0:	6018      	str	r0, [r3, #0]
 80079f2:	e002      	b.n	80079fa <_printf_i+0x1d2>
 80079f4:	0671      	lsls	r1, r6, #25
 80079f6:	d5fb      	bpl.n	80079f0 <_printf_i+0x1c8>
 80079f8:	8018      	strh	r0, [r3, #0]
 80079fa:	2300      	movs	r3, #0
 80079fc:	6123      	str	r3, [r4, #16]
 80079fe:	4616      	mov	r6, r2
 8007a00:	e7ba      	b.n	8007978 <_printf_i+0x150>
 8007a02:	680b      	ldr	r3, [r1, #0]
 8007a04:	1d1a      	adds	r2, r3, #4
 8007a06:	600a      	str	r2, [r1, #0]
 8007a08:	681e      	ldr	r6, [r3, #0]
 8007a0a:	6862      	ldr	r2, [r4, #4]
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	4630      	mov	r0, r6
 8007a10:	f7f8 fbe6 	bl	80001e0 <memchr>
 8007a14:	b108      	cbz	r0, 8007a1a <_printf_i+0x1f2>
 8007a16:	1b80      	subs	r0, r0, r6
 8007a18:	6060      	str	r0, [r4, #4]
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	6123      	str	r3, [r4, #16]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a24:	e7a8      	b.n	8007978 <_printf_i+0x150>
 8007a26:	6923      	ldr	r3, [r4, #16]
 8007a28:	4632      	mov	r2, r6
 8007a2a:	4649      	mov	r1, r9
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	47d0      	blx	sl
 8007a30:	3001      	adds	r0, #1
 8007a32:	d0ab      	beq.n	800798c <_printf_i+0x164>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	079b      	lsls	r3, r3, #30
 8007a38:	d413      	bmi.n	8007a62 <_printf_i+0x23a>
 8007a3a:	68e0      	ldr	r0, [r4, #12]
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	4298      	cmp	r0, r3
 8007a40:	bfb8      	it	lt
 8007a42:	4618      	movlt	r0, r3
 8007a44:	e7a4      	b.n	8007990 <_printf_i+0x168>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4632      	mov	r2, r6
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	47d0      	blx	sl
 8007a50:	3001      	adds	r0, #1
 8007a52:	d09b      	beq.n	800798c <_printf_i+0x164>
 8007a54:	3501      	adds	r5, #1
 8007a56:	68e3      	ldr	r3, [r4, #12]
 8007a58:	9903      	ldr	r1, [sp, #12]
 8007a5a:	1a5b      	subs	r3, r3, r1
 8007a5c:	42ab      	cmp	r3, r5
 8007a5e:	dcf2      	bgt.n	8007a46 <_printf_i+0x21e>
 8007a60:	e7eb      	b.n	8007a3a <_printf_i+0x212>
 8007a62:	2500      	movs	r5, #0
 8007a64:	f104 0619 	add.w	r6, r4, #25
 8007a68:	e7f5      	b.n	8007a56 <_printf_i+0x22e>
 8007a6a:	bf00      	nop
 8007a6c:	08007c39 	.word	0x08007c39
 8007a70:	08007c4a 	.word	0x08007c4a

08007a74 <__retarget_lock_acquire_recursive>:
 8007a74:	4770      	bx	lr

08007a76 <__retarget_lock_release_recursive>:
 8007a76:	4770      	bx	lr

08007a78 <memcpy>:
 8007a78:	440a      	add	r2, r1
 8007a7a:	4291      	cmp	r1, r2
 8007a7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a80:	d100      	bne.n	8007a84 <memcpy+0xc>
 8007a82:	4770      	bx	lr
 8007a84:	b510      	push	{r4, lr}
 8007a86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a8e:	4291      	cmp	r1, r2
 8007a90:	d1f9      	bne.n	8007a86 <memcpy+0xe>
 8007a92:	bd10      	pop	{r4, pc}

08007a94 <memmove>:
 8007a94:	4288      	cmp	r0, r1
 8007a96:	b510      	push	{r4, lr}
 8007a98:	eb01 0402 	add.w	r4, r1, r2
 8007a9c:	d902      	bls.n	8007aa4 <memmove+0x10>
 8007a9e:	4284      	cmp	r4, r0
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	d807      	bhi.n	8007ab4 <memmove+0x20>
 8007aa4:	1e43      	subs	r3, r0, #1
 8007aa6:	42a1      	cmp	r1, r4
 8007aa8:	d008      	beq.n	8007abc <memmove+0x28>
 8007aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ab2:	e7f8      	b.n	8007aa6 <memmove+0x12>
 8007ab4:	4402      	add	r2, r0
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	428a      	cmp	r2, r1
 8007aba:	d100      	bne.n	8007abe <memmove+0x2a>
 8007abc:	bd10      	pop	{r4, pc}
 8007abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ac6:	e7f7      	b.n	8007ab8 <memmove+0x24>

08007ac8 <_realloc_r>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	4607      	mov	r7, r0
 8007acc:	4614      	mov	r4, r2
 8007ace:	460e      	mov	r6, r1
 8007ad0:	b921      	cbnz	r1, 8007adc <_realloc_r+0x14>
 8007ad2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	f7ff bc46 	b.w	8007368 <_malloc_r>
 8007adc:	b922      	cbnz	r2, 8007ae8 <_realloc_r+0x20>
 8007ade:	f7ff fbf3 	bl	80072c8 <_free_r>
 8007ae2:	4625      	mov	r5, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ae8:	f000 f814 	bl	8007b14 <_malloc_usable_size_r>
 8007aec:	42a0      	cmp	r0, r4
 8007aee:	d20f      	bcs.n	8007b10 <_realloc_r+0x48>
 8007af0:	4621      	mov	r1, r4
 8007af2:	4638      	mov	r0, r7
 8007af4:	f7ff fc38 	bl	8007368 <_malloc_r>
 8007af8:	4605      	mov	r5, r0
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d0f2      	beq.n	8007ae4 <_realloc_r+0x1c>
 8007afe:	4631      	mov	r1, r6
 8007b00:	4622      	mov	r2, r4
 8007b02:	f7ff ffb9 	bl	8007a78 <memcpy>
 8007b06:	4631      	mov	r1, r6
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f7ff fbdd 	bl	80072c8 <_free_r>
 8007b0e:	e7e9      	b.n	8007ae4 <_realloc_r+0x1c>
 8007b10:	4635      	mov	r5, r6
 8007b12:	e7e7      	b.n	8007ae4 <_realloc_r+0x1c>

08007b14 <_malloc_usable_size_r>:
 8007b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b18:	1f18      	subs	r0, r3, #4
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bfbc      	itt	lt
 8007b1e:	580b      	ldrlt	r3, [r1, r0]
 8007b20:	18c0      	addlt	r0, r0, r3
 8007b22:	4770      	bx	lr

08007b24 <_init>:
 8007b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b26:	bf00      	nop
 8007b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b2a:	bc08      	pop	{r3}
 8007b2c:	469e      	mov	lr, r3
 8007b2e:	4770      	bx	lr

08007b30 <_fini>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	bf00      	nop
 8007b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b36:	bc08      	pop	{r3}
 8007b38:	469e      	mov	lr, r3
 8007b3a:	4770      	bx	lr
