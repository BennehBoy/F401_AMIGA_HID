
F401_AMIGA_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007448  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007698  08007698  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076a0  080076a0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080076a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000080c  2000009c  08007744  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  08007744  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000199d6  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e0  00000000  00000000  00039aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  0003d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c38  00000000  00000000  0003e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198ae  00000000  00000000  0003ee30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e69  00000000  00000000  000586de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b04f  00000000  00000000  0006a547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5596  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003798  00000000  00000000  000f55ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000009c 	.word	0x2000009c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080075c4 	.word	0x080075c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000a0 	.word	0x200000a0
 80001d0:	080075c4 	.word	0x080075c4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <DWT_Delay_Init>:
     * @brief Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
     * @return Error DWT counter
     * 1: clock cycle counter not started
     * 0: clock cycle counter works
     */
    uint32_t DWT_Delay_Init(void) {
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
     /* Disable TRC */
     CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004d0:	4b14      	ldr	r3, [pc, #80]	; (8000524 <DWT_Delay_Init+0x58>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a13      	ldr	r2, [pc, #76]	; (8000524 <DWT_Delay_Init+0x58>)
 80004d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004da:	60d3      	str	r3, [r2, #12]
     /* Enable TRC */
     CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004dc:	4b11      	ldr	r3, [pc, #68]	; (8000524 <DWT_Delay_Init+0x58>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a10      	ldr	r2, [pc, #64]	; (8000524 <DWT_Delay_Init+0x58>)
 80004e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004e6:	60d3      	str	r3, [r2, #12]
     /* Disable clock cycle counter */
     DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <DWT_Delay_Init+0x5c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <DWT_Delay_Init+0x5c>)
 80004ee:	f023 0301 	bic.w	r3, r3, #1
 80004f2:	6013      	str	r3, [r2, #0]
     /* Enable clock cycle counter */
     DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <DWT_Delay_Init+0x5c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <DWT_Delay_Init+0x5c>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6013      	str	r3, [r2, #0]
     /* Reset the clock cycle counter value */
     DWT->CYCCNT = 0;
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <DWT_Delay_Init+0x5c>)
 8000502:	2200      	movs	r2, #0
 8000504:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000506:	bf00      	nop
    __ASM volatile ("NOP");
 8000508:	bf00      	nop
    __ASM volatile ("NOP");
 800050a:	bf00      	nop
     /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <DWT_Delay_Init+0x5c>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <DWT_Delay_Init+0x4c>
    {
     return 0; /*clock cycle counter started*/
 8000514:	2300      	movs	r3, #0
 8000516:	e000      	b.n	800051a <DWT_Delay_Init+0x4e>
    }
    else
     {
     return 1; /*clock cycle counter not started*/
 8000518:	2301      	movs	r3, #1
     }
    }
 800051a:	4618      	mov	r0, r3
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	e000edf0 	.word	0xe000edf0
 8000528:	e0001000 	.word	0xe0001000

0800052c <DWT_Delay_us>:
/**
 * @brief This function provides a delay (in microseconds)
 * @param microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 uint32_t clk_cycle_start = DWT->CYCCNT;
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <DWT_Delay_us+0x40>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	60fb      	str	r3, [r7, #12]
 /* Go to number of cycles for system */
 microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800053a:	f003 f921 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <DWT_Delay_us+0x44>)
 8000542:	fba2 2303 	umull	r2, r3, r2, r3
 8000546:	0c9b      	lsrs	r3, r3, #18
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	fb02 f303 	mul.w	r3, r2, r3
 800054e:	607b      	str	r3, [r7, #4]
 /* Delay till end */
 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000550:	bf00      	nop
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <DWT_Delay_us+0x40>)
 8000554:	685a      	ldr	r2, [r3, #4]
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	1ad2      	subs	r2, r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	d3f8      	bcc.n	8000552 <DWT_Delay_us+0x26>
}
 8000560:	bf00      	nop
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	e0001000 	.word	0xe0001000
 8000570:	431bde83 	.word	0x431bde83

08000574 <USBH_HID_EventCallback>:
char Uart_Buf[100];

int16_t data[3];

void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	if(USBH_HID_GetDeviceType(phost) == HID_MOUSE)  // if the HID is Mouse
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f004 fe79 	bl	8005274 <USBH_HID_GetDeviceType>
 8000582:	4603      	mov	r3, r0
 8000584:	2b01      	cmp	r3, #1
 8000586:	d150      	bne.n	800062a <USBH_HID_EventCallback+0xb6>
	{
		HID_MOUSE_Info_TypeDef *Mouse_Info;
		Mouse_Info = USBH_HID_GetMouseInfo(phost);  // Get the info
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f004 fff9 	bl	8005580 <USBH_HID_GetMouseInfo>
 800058e:	60b8      	str	r0, [r7, #8]
		int16_t X_Val = Mouse_Info->x;  // get the x value
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	81fb      	strh	r3, [r7, #14]
		int16_t Y_Val = Mouse_Info->y;  // get the y value
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	785b      	ldrb	r3, [r3, #1]
 800059a:	81bb      	strh	r3, [r7, #12]
		if (X_Val > 127) X_Val -= 255;
 800059c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005a0:	2b7f      	cmp	r3, #127	; 0x7f
 80005a2:	dd03      	ble.n	80005ac <USBH_HID_EventCallback+0x38>
 80005a4:	89fb      	ldrh	r3, [r7, #14]
 80005a6:	3bff      	subs	r3, #255	; 0xff
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	81fb      	strh	r3, [r7, #14]
		if (Y_Val > 127) Y_Val -= 255;
 80005ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80005b0:	2b7f      	cmp	r3, #127	; 0x7f
 80005b2:	dd03      	ble.n	80005bc <USBH_HID_EventCallback+0x48>
 80005b4:	89bb      	ldrh	r3, [r7, #12]
 80005b6:	3bff      	subs	r3, #255	; 0xff
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	81bb      	strh	r3, [r7, #12]
		//int len = sprintf (Uart_Buf, "X=%d, Y=%d, Button1=%d, Button2=%d, Button3=%d\n\n", X_Val, Y_Val, Mouse_Info->buttons[0],Mouse_Info->buttons[1], Mouse_Info->buttons[2]);
		//HAL_UART_Transmit(&huart2, (uint8_t *) Uart_Buf, len, 100);
	    HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80005bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c0:	481c      	ldr	r0, [pc, #112]	; (8000634 <USBH_HID_EventCallback+0xc0>)
 80005c2:	f000 ff4a 	bl	800145a <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_13);
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	481a      	ldr	r0, [pc, #104]	; (8000634 <USBH_HID_EventCallback+0xc0>)
 80005cc:	f000 ff45 	bl	800145a <HAL_GPIO_TogglePin>

	    data[0] = 0;
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <USBH_HID_EventCallback+0xc4>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	801a      	strh	r2, [r3, #0]
	    if(Mouse_Info->buttons[0]) { data[0] |= 1UL << 0;}
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d007      	beq.n	80005ee <USBH_HID_EventCallback+0x7a>
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <USBH_HID_EventCallback+0xc4>)
 80005e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	b21a      	sxth	r2, r3
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <USBH_HID_EventCallback+0xc4>)
 80005ec:	801a      	strh	r2, [r3, #0]
	    if(Mouse_Info->buttons[1]) { data[0] |= 1UL << 1;}
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	78db      	ldrb	r3, [r3, #3]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d007      	beq.n	8000606 <USBH_HID_EventCallback+0x92>
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <USBH_HID_EventCallback+0xc4>)
 80005f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	b21a      	sxth	r2, r3
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <USBH_HID_EventCallback+0xc4>)
 8000604:	801a      	strh	r2, [r3, #0]
	    if(Mouse_Info->buttons[2]) { data[0] |= 1UL << 2;}
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d007      	beq.n	800061e <USBH_HID_EventCallback+0xaa>
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <USBH_HID_EventCallback+0xc4>)
 8000610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000614:	f043 0304 	orr.w	r3, r3, #4
 8000618:	b21a      	sxth	r2, r3
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <USBH_HID_EventCallback+0xc4>)
 800061c:	801a      	strh	r2, [r3, #0]
	    data[1] = X_Val;
 800061e:	4a06      	ldr	r2, [pc, #24]	; (8000638 <USBH_HID_EventCallback+0xc4>)
 8000620:	89fb      	ldrh	r3, [r7, #14]
 8000622:	8053      	strh	r3, [r2, #2]
	    data[2] = Y_Val;
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <USBH_HID_EventCallback+0xc4>)
 8000626:	89bb      	ldrh	r3, [r7, #12]
 8000628:	8093      	strh	r3, [r2, #4]
	}
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40020800 	.word	0x40020800
 8000638:	200000cc 	.word	0x200000cc

0800063c <LeftButtonUp>:


void LeftButtonUp() {
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2102      	movs	r1, #2
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <LeftButtonUp+0x14>)
 8000646:	f000 feef 	bl	8001428 <HAL_GPIO_WritePin>
}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40020400 	.word	0x40020400

08000654 <LeftButtonDown>:
void LeftButtonDown() {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	4802      	ldr	r0, [pc, #8]	; (8000668 <LeftButtonDown+0x14>)
 800065e:	f000 fee3 	bl	8001428 <HAL_GPIO_WritePin>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40020400 	.word	0x40020400

0800066c <RightButtonUp>:
void RightButtonUp() {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000670:	2201      	movs	r2, #1
 8000672:	2104      	movs	r1, #4
 8000674:	4802      	ldr	r0, [pc, #8]	; (8000680 <RightButtonUp+0x14>)
 8000676:	f000 fed7 	bl	8001428 <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020400 	.word	0x40020400

08000684 <RightButtonDown>:
void RightButtonDown() {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2104      	movs	r1, #4
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <RightButtonDown+0x14>)
 800068e:	f000 fecb 	bl	8001428 <HAL_GPIO_WritePin>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020400 	.word	0x40020400

0800069c <MiddleButtonUp>:
void MiddleButtonUp() {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a6:	4802      	ldr	r0, [pc, #8]	; (80006b0 <MiddleButtonUp+0x14>)
 80006a8:	f000 febe 	bl	8001428 <HAL_GPIO_WritePin>
}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40020400 	.word	0x40020400

080006b4 <MiddleButtonDown>:
void MiddleButtonDown() {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006be:	4802      	ldr	r0, [pc, #8]	; (80006c8 <MiddleButtonDown+0x14>)
 80006c0:	f000 feb2 	bl	8001428 <HAL_GPIO_WritePin>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40020400 	.word	0x40020400

080006cc <AMIGAHorizontalMove>:

void AMIGAHorizontalMove() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

    // set bits acc. to curr. position in quadr. sequence
    //digitalWrite(H_PULSE, H[QX]);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, H[QX]);
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <AMIGAHorizontalMove+0x38>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <AMIGAHorizontalMove+0x3c>)
 80006d8:	5c9b      	ldrb	r3, [r3, r2]
 80006da:	461a      	mov	r2, r3
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <AMIGAHorizontalMove+0x40>)
 80006e0:	f000 fea2 	bl	8001428 <HAL_GPIO_WritePin>

    //digitalWrite(HQ_PLSE, HQ[QX]);
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, HQ[QX]);
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <AMIGAHorizontalMove+0x38>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	461a      	mov	r2, r3
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <AMIGAHorizontalMove+0x44>)
 80006ec:	5c9b      	ldrb	r3, [r3, r2]
 80006ee:	461a      	mov	r2, r3
 80006f0:	2101      	movs	r1, #1
 80006f2:	4808      	ldr	r0, [pc, #32]	; (8000714 <AMIGAHorizontalMove+0x48>)
 80006f4:	f000 fe98 	bl	8001428 <HAL_GPIO_WritePin>

    DWT_Delay_us(ADELAY);
 80006f8:	2096      	movs	r0, #150	; 0x96
 80006fa:	f7ff ff17 	bl	800052c <DWT_Delay_us>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000008 	.word	0x20000008
 8000708:	20000000 	.word	0x20000000
 800070c:	40020000 	.word	0x40020000
 8000710:	20000004 	.word	0x20000004
 8000714:	40020400 	.word	0x40020400

08000718 <AMIGAVerticalMove>:

void AMIGAVerticalMove() {
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

    //digitalWrite(V_PULSE, H[QY]);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, H[QY]);
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <AMIGAVerticalMove+0x38>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <AMIGAVerticalMove+0x3c>)
 8000724:	5c9b      	ldrb	r3, [r3, r2]
 8000726:	461a      	mov	r2, r3
 8000728:	2120      	movs	r1, #32
 800072a:	480b      	ldr	r0, [pc, #44]	; (8000758 <AMIGAVerticalMove+0x40>)
 800072c:	f000 fe7c 	bl	8001428 <HAL_GPIO_WritePin>

    //digitalWrite(VQ_PLSE, HQ[QY]);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, HQ[QY]);
 8000730:	4b07      	ldr	r3, [pc, #28]	; (8000750 <AMIGAVerticalMove+0x38>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	461a      	mov	r2, r3
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <AMIGAVerticalMove+0x44>)
 8000738:	5c9b      	ldrb	r3, [r3, r2]
 800073a:	461a      	mov	r2, r3
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	4806      	ldr	r0, [pc, #24]	; (8000758 <AMIGAVerticalMove+0x40>)
 8000740:	f000 fe72 	bl	8001428 <HAL_GPIO_WritePin>

	DWT_Delay_us(ADELAY);
 8000744:	2096      	movs	r0, #150	; 0x96
 8000746:	f7ff fef1 	bl	800052c <DWT_Delay_us>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000009 	.word	0x20000009
 8000754:	20000000 	.word	0x20000000
 8000758:	40020000 	.word	0x40020000
 800075c:	20000004 	.word	0x20000004

08000760 <AMIGA_Left>:

void AMIGA_Left() {
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

    // do a move by setting the port
    AMIGAHorizontalMove();
 8000764:	f7ff ffb2 	bl	80006cc <AMIGAHorizontalMove>
    // advance in the quadr. sequence
    QX = (QX >= 3) ? 0 : ++QX;
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <AMIGA_Left+0x2c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b02      	cmp	r3, #2
 800076e:	d808      	bhi.n	8000782 <AMIGA_Left+0x22>
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <AMIGA_Left+0x2c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <AMIGA_Left+0x2c>)
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <AMIGA_Left+0x2c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	e000      	b.n	8000784 <AMIGA_Left+0x24>
 8000782:	2300      	movs	r3, #0
 8000784:	4a01      	ldr	r2, [pc, #4]	; (800078c <AMIGA_Left+0x2c>)
 8000786:	7013      	strb	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000008 	.word	0x20000008

08000790 <AMIGA_Right>:

void AMIGA_Right() {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    AMIGAHorizontalMove();
 8000794:	f7ff ff9a 	bl	80006cc <AMIGAHorizontalMove>
    QX = (QX <= 0) ? 3 : --QX;
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <AMIGA_Right+0x2c>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d008      	beq.n	80007b2 <AMIGA_Right+0x22>
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <AMIGA_Right+0x2c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3b01      	subs	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b04      	ldr	r3, [pc, #16]	; (80007bc <AMIGA_Right+0x2c>)
 80007aa:	701a      	strb	r2, [r3, #0]
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <AMIGA_Right+0x2c>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	e000      	b.n	80007b4 <AMIGA_Right+0x24>
 80007b2:	2303      	movs	r3, #3
 80007b4:	4a01      	ldr	r2, [pc, #4]	; (80007bc <AMIGA_Right+0x2c>)
 80007b6:	7013      	strb	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000008 	.word	0x20000008

080007c0 <AMIGA_Down>:

void AMIGA_Down() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    AMIGAVerticalMove();
 80007c4:	f7ff ffa8 	bl	8000718 <AMIGAVerticalMove>
    //QY = QY <= 0 ? 3 : --QY;
    QY = QY >= 3 ? 0 : ++QY;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <AMIGA_Down+0x2c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d808      	bhi.n	80007e2 <AMIGA_Down+0x22>
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <AMIGA_Down+0x2c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <AMIGA_Down+0x2c>)
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <AMIGA_Down+0x2c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	e000      	b.n	80007e4 <AMIGA_Down+0x24>
 80007e2:	2300      	movs	r3, #0
 80007e4:	4a01      	ldr	r2, [pc, #4]	; (80007ec <AMIGA_Down+0x2c>)
 80007e6:	7013      	strb	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000009 	.word	0x20000009

080007f0 <AMIGA_Up>:

void AMIGA_Up() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
    AMIGAVerticalMove();
 80007f4:	f7ff ff90 	bl	8000718 <AMIGAVerticalMove>
    //QY = QY >= 3 ? 0 : ++QY;
    QY = QY <= 0 ? 3 : --QY;
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <AMIGA_Up+0x2c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d008      	beq.n	8000812 <AMIGA_Up+0x22>
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <AMIGA_Up+0x2c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	3b01      	subs	r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <AMIGA_Up+0x2c>)
 800080a:	701a      	strb	r2, [r3, #0]
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <AMIGA_Up+0x2c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	e000      	b.n	8000814 <AMIGA_Up+0x24>
 8000812:	2303      	movs	r3, #3
 8000814:	4a01      	ldr	r2, [pc, #4]	; (800081c <AMIGA_Up+0x2c>)
 8000816:	7013      	strb	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000009 	.word	0x20000009

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f000 fad4 	bl	8000dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f8ca 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f000 f95e 	bl	8000aec <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000830:	f006 fae2 	bl	8006df8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000834:	f000 f930 	bl	8000a98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if(DWT_Delay_Init())
 8000838:	f7ff fe48 	bl	80004cc <DWT_Delay_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <main+0x26>
  {
  Error_Handler(); /* Call Error Handler */
 8000842:	f000 f9df 	bl	8000c04 <Error_Handler>
  }

  // Set quadrature output pins to zero
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2140      	movs	r1, #64	; 0x40
 800084a:	4856      	ldr	r0, [pc, #344]	; (80009a4 <main+0x184>)
 800084c:	f000 fdec 	bl	8001428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2101      	movs	r1, #1
 8000854:	4854      	ldr	r0, [pc, #336]	; (80009a8 <main+0x188>)
 8000856:	f000 fde7 	bl	8001428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	2120      	movs	r1, #32
 800085e:	4851      	ldr	r0, [pc, #324]	; (80009a4 <main+0x184>)
 8000860:	f000 fde2 	bl	8001428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	2180      	movs	r1, #128	; 0x80
 8000868:	484e      	ldr	r0, [pc, #312]	; (80009a4 <main+0x184>)
 800086a:	f000 fddd 	bl	8001428 <HAL_GPIO_WritePin>

  // Set mouse button output pins to on, coz they are inverted
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2102      	movs	r1, #2
 8000872:	484d      	ldr	r0, [pc, #308]	; (80009a8 <main+0x188>)
 8000874:	f000 fdd8 	bl	8001428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2104      	movs	r1, #4
 800087c:	484a      	ldr	r0, [pc, #296]	; (80009a8 <main+0x188>)
 800087e:	f000 fdd3 	bl	8001428 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000882:	2201      	movs	r2, #1
 8000884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000888:	4847      	ldr	r0, [pc, #284]	; (80009a8 <main+0x188>)
 800088a:	f000 fdcd 	bl	8001428 <HAL_GPIO_WritePin>

  data[0]=0;
 800088e:	4b47      	ldr	r3, [pc, #284]	; (80009ac <main+0x18c>)
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000894:	f006 fad6 	bl	8006e44 <MX_USB_HOST_Process>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop

    __disable_irq();
    // handle buttons
    //

    if( data[0] & 1)
 800089c:	4b43      	ldr	r3, [pc, #268]	; (80009ac <main+0x18c>)
 800089e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d002      	beq.n	80008b2 <main+0x92>
      LeftButtonDown();
 80008ac:	f7ff fed2 	bl	8000654 <LeftButtonDown>
 80008b0:	e001      	b.n	80008b6 <main+0x96>
    else
      LeftButtonUp();
 80008b2:	f7ff fec3 	bl	800063c <LeftButtonUp>

    if( data[0] & 2)
 80008b6:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <main+0x18c>)
 80008b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008bc:	b29b      	uxth	r3, r3
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <main+0xac>
      RightButtonDown();
 80008c6:	f7ff fedd 	bl	8000684 <RightButtonDown>
 80008ca:	e001      	b.n	80008d0 <main+0xb0>
    else
      RightButtonUp();
 80008cc:	f7ff fece 	bl	800066c <RightButtonUp>

    if( data[0] & 4)
 80008d0:	4b36      	ldr	r3, [pc, #216]	; (80009ac <main+0x18c>)
 80008d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d002      	beq.n	80008e6 <main+0xc6>
      MiddleButtonDown();
 80008e0:	f7ff fee8 	bl	80006b4 <MiddleButtonDown>
 80008e4:	e001      	b.n	80008ea <main+0xca>
    else
      MiddleButtonUp();
 80008e6:	f7ff fed9 	bl	800069c <MiddleButtonUp>

    // calc x/y movement
    //
    XSTEPS = abs(data[1]);
 80008ea:	4b30      	ldr	r3, [pc, #192]	; (80009ac <main+0x18c>)
 80008ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	bfb8      	it	lt
 80008f4:	425b      	neglt	r3, r3
 80008f6:	b29b      	uxth	r3, r3
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <main+0x190>)
 80008fc:	701a      	strb	r2, [r3, #0]
    YSTEPS = abs(data[2]);
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <main+0x18c>)
 8000900:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	bfb8      	it	lt
 8000908:	425b      	neglt	r3, r3
 800090a:	b29b      	uxth	r3, r3
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <main+0x194>)
 8000910:	701a      	strb	r2, [r3, #0]
    XSIGN = (data[1] > 0 ? 1 : 0) ;
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <main+0x18c>)
 8000914:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000918:	2b00      	cmp	r3, #0
 800091a:	bfcc      	ite	gt
 800091c:	2301      	movgt	r3, #1
 800091e:	2300      	movle	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <main+0x198>)
 8000926:	701a      	strb	r2, [r3, #0]
    YSIGN = (data[2] > 0 ? 1 : 0) ;
 8000928:	4b20      	ldr	r3, [pc, #128]	; (80009ac <main+0x18c>)
 800092a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	bfcc      	ite	gt
 8000932:	2301      	movgt	r3, #1
 8000934:	2300      	movle	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	461a      	mov	r2, r3
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <main+0x19c>)
 800093c:	701a      	strb	r2, [r3, #0]

    // handle x/y movement
    //
    while ((XSTEPS | YSTEPS) != 0) {
 800093e:	e025      	b.n	800098c <main+0x16c>

        // steps left?
        if (XSTEPS != 0) {
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <main+0x190>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d00e      	beq.n	8000966 <main+0x146>

            // direction
            if (XSIGN)
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <main+0x198>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d002      	beq.n	8000956 <main+0x136>
                AMIGA_Right();
 8000950:	f7ff ff1e 	bl	8000790 <AMIGA_Right>
 8000954:	e001      	b.n	800095a <main+0x13a>
            else
                AMIGA_Left();
 8000956:	f7ff ff03 	bl	8000760 <AMIGA_Left>

            // decrease steps
            XSTEPS--;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <main+0x190>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <main+0x190>)
 8000964:	701a      	strb	r2, [r3, #0]
        }


        if (YSTEPS != 0) {
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <main+0x194>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00e      	beq.n	800098c <main+0x16c>
            if (YSIGN)
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <main+0x19c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <main+0x15c>
                AMIGA_Up();
 8000976:	f7ff ff3b 	bl	80007f0 <AMIGA_Up>
 800097a:	e001      	b.n	8000980 <main+0x160>
            else
               AMIGA_Down();
 800097c:	f7ff ff20 	bl	80007c0 <AMIGA_Down>
            YSTEPS--;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <main+0x194>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	3b01      	subs	r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <main+0x194>)
 800098a:	701a      	strb	r2, [r3, #0]
    while ((XSTEPS | YSTEPS) != 0) {
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <main+0x190>)
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <main+0x194>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	4313      	orrs	r3, r2
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d1d1      	bne.n	8000940 <main+0x120>
  __ASM volatile ("cpsie i" : : : "memory");
 800099c:	b662      	cpsie	i
}
 800099e:	bf00      	nop
    MX_USB_HOST_Process();
 80009a0:	e778      	b.n	8000894 <main+0x74>
 80009a2:	bf00      	nop
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020400 	.word	0x40020400
 80009ac:	200000cc 	.word	0x200000cc
 80009b0:	20000118 	.word	0x20000118
 80009b4:	200000c8 	.word	0x200000c8
 80009b8:	20000119 	.word	0x20000119
 80009bc:	200000d2 	.word	0x200000d2

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f006 fd1a 	bl	8007408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <SystemClock_Config+0xd0>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <SystemClock_Config+0xd0>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <SystemClock_Config+0xd0>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a00:	2300      	movs	r3, #0
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0c:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a34:	2319      	movs	r3, #25
 8000a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a42:	2307      	movs	r3, #7
 8000a44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fa84 	bl	8002f58 <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a56:	f000 f8d5 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 fce6 	bl	8003448 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a82:	f000 f8bf 	bl	8000c04 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	; 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_USART2_UART_Init+0x50>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000abe:	220c      	movs	r2, #12
 8000ac0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x4c>)
 8000ad0:	f002 fe8a 	bl	80037e8 <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ada:	f000 f893 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200000d4 	.word	0x200000d4
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a3a      	ldr	r2, [pc, #232]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a2c      	ldr	r2, [pc, #176]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a25      	ldr	r2, [pc, #148]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <MX_GPIO_Init+0x108>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0302 	and.w	r3, r3, #2
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000b72:	2201      	movs	r2, #1
 8000b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b78:	481f      	ldr	r0, [pc, #124]	; (8000bf8 <MX_GPIO_Init+0x10c>)
 8000b7a:	f000 fc55 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	21e0      	movs	r1, #224	; 0xe0
 8000b82:	481e      	ldr	r0, [pc, #120]	; (8000bfc <MX_GPIO_Init+0x110>)
 8000b84:	f000 fc50 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f240 4107 	movw	r1, #1031	; 0x407
 8000b8e:	481c      	ldr	r0, [pc, #112]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000b90:	f000 fc4a 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4812      	ldr	r0, [pc, #72]	; (8000bf8 <MX_GPIO_Init+0x10c>)
 8000bae:	f000 fab7 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bb2:	23e0      	movs	r3, #224	; 0xe0
 8000bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_GPIO_Init+0x110>)
 8000bca:	f000 faa9 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10;
 8000bce:	f240 4307 	movw	r3, #1031	; 0x407
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_GPIO_Init+0x114>)
 8000be8:	f000 fa9a 	bl	8001120 <HAL_GPIO_Init>

}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020400 	.word	0x40020400

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <Error_Handler+0x8>
	...

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a0f      	ldr	r2, [pc, #60]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	603b      	str	r3, [r7, #0]
 8000c4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a19      	ldr	r2, [pc, #100]	; (8000ce4 <HAL_UART_MspInit+0x84>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d12b      	bne.n	8000cda <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <HAL_UART_MspInit+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cba:	230c      	movs	r3, #12
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <HAL_UART_MspInit+0x8c>)
 8000cd6:	f000 fa23 	bl	8001120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40004400 	.word	0x40004400
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40020000 	.word	0x40020000

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf4:	e7fe      	b.n	8000cf4 <NMI_Handler+0x4>

08000cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfa:	e7fe      	b.n	8000cfa <HardFault_Handler+0x4>

08000cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <MemManage_Handler+0x4>

08000d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d06:	e7fe      	b.n	8000d06 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 f89a 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <OTG_FS_IRQHandler+0x10>)
 8000d4a:	f000 fe0b 	bl	8001964 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000594 	.word	0x20000594

08000d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <SystemInit+0x20>)
 8000d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <SystemInit+0x20>)
 8000d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d80:	480d      	ldr	r0, [pc, #52]	; (8000db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d82:	490e      	ldr	r1, [pc, #56]	; (8000dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d84:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d88:	e002      	b.n	8000d90 <LoopCopyDataInit>

08000d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d8e:	3304      	adds	r3, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d94:	d3f9      	bcc.n	8000d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d96:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d98:	4c0b      	ldr	r4, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d9c:	e001      	b.n	8000da2 <LoopFillZerobss>

08000d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da0:	3204      	adds	r2, #4

08000da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da4:	d3fb      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000da6:	f7ff ffd7 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000daa:	f006 faf9 	bl	80073a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dae:	f7ff fd37 	bl	8000820 <main>
  bx  lr    
 8000db2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dbc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000dc0:	080076a8 	.word	0x080076a8
  ldr r2, =_sbss
 8000dc4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000dc8:	200008a8 	.word	0x200008a8

08000dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC_IRQHandler>
	...

08000dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_Init+0x40>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_Init+0x40>)
 8000de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_Init+0x40>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f000 f94f 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 f808 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e04:	f7ff ff04 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023c00 	.word	0x40023c00

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	; (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f967 	bl	8001106 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f000 f92f 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	; (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	20000014 	.word	0x20000014
 8000e70:	20000010 	.word	0x20000010

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000014 	.word	0x20000014
 8000e98:	20000180 	.word	0x20000180

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000180 	.word	0x20000180

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000014 	.word	0x20000014

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff3e 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff31 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa2 	bl	8001058 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e159      	b.n	80013f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 8148 	bne.w	80013ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d005      	beq.n	8001172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	2b02      	cmp	r3, #2
 8001170:	d130      	bne.n	80011d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 0201 	and.w	r2, r3, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d017      	beq.n	8001210 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a2 	beq.w	80013ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a56      	ldr	r2, [pc, #344]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b54      	ldr	r3, [pc, #336]	; (8001408 <HAL_GPIO_Init+0x2e8>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a52      	ldr	r2, [pc, #328]	; (800140c <HAL_GPIO_Init+0x2ec>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a49      	ldr	r2, [pc, #292]	; (8001410 <HAL_GPIO_Init+0x2f0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d019      	beq.n	8001322 <HAL_GPIO_Init+0x202>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_GPIO_Init+0x2f4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x1fe>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a47      	ldr	r2, [pc, #284]	; (8001418 <HAL_GPIO_Init+0x2f8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x1fa>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a46      	ldr	r2, [pc, #280]	; (800141c <HAL_GPIO_Init+0x2fc>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x1f6>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a45      	ldr	r2, [pc, #276]	; (8001420 <HAL_GPIO_Init+0x300>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x1f2>
 800130e:	2304      	movs	r3, #4
 8001310:	e008      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001312:	2307      	movs	r3, #7
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001316:	2303      	movs	r3, #3
 8001318:	e004      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131a:	2302      	movs	r3, #2
 800131c:	e002      	b.n	8001324 <HAL_GPIO_Init+0x204>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_GPIO_Init+0x204>
 8001322:	2300      	movs	r3, #0
 8001324:	69fa      	ldr	r2, [r7, #28]
 8001326:	f002 0203 	and.w	r2, r2, #3
 800132a:	0092      	lsls	r2, r2, #2
 800132c:	4093      	lsls	r3, r2
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4313      	orrs	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001334:	4935      	ldr	r1, [pc, #212]	; (800140c <HAL_GPIO_Init+0x2ec>)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001342:	4b38      	ldr	r3, [pc, #224]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001366:	4a2f      	ldr	r2, [pc, #188]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_GPIO_Init+0x304>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <HAL_GPIO_Init+0x304>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ba:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	4013      	ands	r3, r2
 80013ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e4:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3301      	adds	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b0f      	cmp	r3, #15
 80013f4:	f67f aea2 	bls.w	800113c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40013800 	.word	0x40013800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40013c00 	.word	0x40013c00

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	619a      	str	r2, [r3, #24]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
 8001462:	460b      	mov	r3, r1
 8001464:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146c:	887a      	ldrh	r2, [r7, #2]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	041a      	lsls	r2, r3, #16
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43d9      	mvns	r1, r3
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	400b      	ands	r3, r1
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800148e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001490:	b08f      	sub	sp, #60	; 0x3c
 8001492:	af0a      	add	r7, sp, #40	; 0x28
 8001494:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e054      	b.n	800154a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f005 fcfa 	bl	8006eb4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2203      	movs	r2, #3
 80014c4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f002 fc0a 	bl	8003cf8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	687e      	ldr	r6, [r7, #4]
 80014ec:	466d      	mov	r5, sp
 80014ee:	f106 0410 	add.w	r4, r6, #16
 80014f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001502:	1d33      	adds	r3, r6, #4
 8001504:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001506:	6838      	ldr	r0, [r7, #0]
 8001508:	f002 fb84 	bl	8003c14 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fc01 	bl	8003d1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	687e      	ldr	r6, [r7, #4]
 8001520:	466d      	mov	r5, sp
 8001522:	f106 0410 	add.w	r4, r6, #16
 8001526:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001528:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800152c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800152e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001532:	e885 0003 	stmia.w	r5, {r0, r1}
 8001536:	1d33      	adds	r3, r6, #4
 8001538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153a:	6838      	ldr	r0, [r7, #0]
 800153c:	f002 fd14 	bl	8003f68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2201      	movs	r2, #1
 8001544:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001552 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001552:	b590      	push	{r4, r7, lr}
 8001554:	b089      	sub	sp, #36	; 0x24
 8001556:	af04      	add	r7, sp, #16
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	4608      	mov	r0, r1
 800155c:	4611      	mov	r1, r2
 800155e:	461a      	mov	r2, r3
 8001560:	4603      	mov	r3, r0
 8001562:	70fb      	strb	r3, [r7, #3]
 8001564:	460b      	mov	r3, r1
 8001566:	70bb      	strb	r3, [r7, #2]
 8001568:	4613      	mov	r3, r2
 800156a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_HCD_HC_Init+0x28>
 8001576:	2302      	movs	r3, #2
 8001578:	e076      	b.n	8001668 <HAL_HCD_HC_Init+0x116>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	212c      	movs	r1, #44	; 0x2c
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	4413      	add	r3, r2
 800158e:	333d      	adds	r3, #61	; 0x3d
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	212c      	movs	r1, #44	; 0x2c
 800159a:	fb01 f303 	mul.w	r3, r1, r3
 800159e:	4413      	add	r3, r2
 80015a0:	3338      	adds	r3, #56	; 0x38
 80015a2:	787a      	ldrb	r2, [r7, #1]
 80015a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80015a6:	78fb      	ldrb	r3, [r7, #3]
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	212c      	movs	r1, #44	; 0x2c
 80015ac:	fb01 f303 	mul.w	r3, r1, r3
 80015b0:	4413      	add	r3, r2
 80015b2:	3340      	adds	r3, #64	; 0x40
 80015b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80015b6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80015b8:	78fb      	ldrb	r3, [r7, #3]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	212c      	movs	r1, #44	; 0x2c
 80015be:	fb01 f303 	mul.w	r3, r1, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	3339      	adds	r3, #57	; 0x39
 80015c6:	78fa      	ldrb	r2, [r7, #3]
 80015c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80015ca:	78fb      	ldrb	r3, [r7, #3]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	212c      	movs	r1, #44	; 0x2c
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	333f      	adds	r3, #63	; 0x3f
 80015d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80015dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80015de:	78fb      	ldrb	r3, [r7, #3]
 80015e0:	78ba      	ldrb	r2, [r7, #2]
 80015e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015e6:	b2d0      	uxtb	r0, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	212c      	movs	r1, #44	; 0x2c
 80015ec:	fb01 f303 	mul.w	r3, r1, r3
 80015f0:	4413      	add	r3, r2
 80015f2:	333a      	adds	r3, #58	; 0x3a
 80015f4:	4602      	mov	r2, r0
 80015f6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80015f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	da09      	bge.n	8001614 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	212c      	movs	r1, #44	; 0x2c
 8001606:	fb01 f303 	mul.w	r3, r1, r3
 800160a:	4413      	add	r3, r2
 800160c:	333b      	adds	r3, #59	; 0x3b
 800160e:	2201      	movs	r2, #1
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	e008      	b.n	8001626 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	212c      	movs	r1, #44	; 0x2c
 800161a:	fb01 f303 	mul.w	r3, r1, r3
 800161e:	4413      	add	r3, r2
 8001620:	333b      	adds	r3, #59	; 0x3b
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001626:	78fb      	ldrb	r3, [r7, #3]
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	212c      	movs	r1, #44	; 0x2c
 800162c:	fb01 f303 	mul.w	r3, r1, r3
 8001630:	4413      	add	r3, r2
 8001632:	333c      	adds	r3, #60	; 0x3c
 8001634:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001638:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	787c      	ldrb	r4, [r7, #1]
 8001640:	78ba      	ldrb	r2, [r7, #2]
 8001642:	78f9      	ldrb	r1, [r7, #3]
 8001644:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	4623      	mov	r3, r4
 8001656:	f002 fe09 	bl	800426c <USB_HC_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001666:	7bfb      	ldrb	r3, [r7, #15]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	bd90      	pop	{r4, r7, pc}

08001670 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001686:	2b01      	cmp	r3, #1
 8001688:	d101      	bne.n	800168e <HAL_HCD_HC_Halt+0x1e>
 800168a:	2302      	movs	r3, #2
 800168c:	e00f      	b.n	80016ae <HAL_HCD_HC_Halt+0x3e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 f845 	bl	800472e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	70fb      	strb	r3, [r7, #3]
 80016ca:	460b      	mov	r3, r1
 80016cc:	70bb      	strb	r3, [r7, #2]
 80016ce:	4613      	mov	r3, r2
 80016d0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016d2:	78fb      	ldrb	r3, [r7, #3]
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	212c      	movs	r1, #44	; 0x2c
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	333b      	adds	r3, #59	; 0x3b
 80016e0:	78ba      	ldrb	r2, [r7, #2]
 80016e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	212c      	movs	r1, #44	; 0x2c
 80016ea:	fb01 f303 	mul.w	r3, r1, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	333f      	adds	r3, #63	; 0x3f
 80016f2:	787a      	ldrb	r2, [r7, #1]
 80016f4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016f6:	7c3b      	ldrb	r3, [r7, #16]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d112      	bne.n	8001722 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	212c      	movs	r1, #44	; 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	3342      	adds	r3, #66	; 0x42
 800170a:	2203      	movs	r2, #3
 800170c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	333d      	adds	r3, #61	; 0x3d
 800171c:	7f3a      	ldrb	r2, [r7, #28]
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e008      	b.n	8001734 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	212c      	movs	r1, #44	; 0x2c
 8001728:	fb01 f303 	mul.w	r3, r1, r3
 800172c:	4413      	add	r3, r2
 800172e:	3342      	adds	r3, #66	; 0x42
 8001730:	2202      	movs	r2, #2
 8001732:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001734:	787b      	ldrb	r3, [r7, #1]
 8001736:	2b03      	cmp	r3, #3
 8001738:	f200 80c6 	bhi.w	80018c8 <HAL_HCD_HC_SubmitRequest+0x210>
 800173c:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001755 	.word	0x08001755
 8001748:	080018b5 	.word	0x080018b5
 800174c:	080017b9 	.word	0x080017b9
 8001750:	08001837 	.word	0x08001837
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001754:	7c3b      	ldrb	r3, [r7, #16]
 8001756:	2b01      	cmp	r3, #1
 8001758:	f040 80b8 	bne.w	80018cc <HAL_HCD_HC_SubmitRequest+0x214>
 800175c:	78bb      	ldrb	r3, [r7, #2]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f040 80b4 	bne.w	80018cc <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001764:	8b3b      	ldrh	r3, [r7, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d108      	bne.n	800177c <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	3355      	adds	r3, #85	; 0x55
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	3355      	adds	r3, #85	; 0x55
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d109      	bne.n	80017a4 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	212c      	movs	r1, #44	; 0x2c
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	3342      	adds	r3, #66	; 0x42
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017a2:	e093      	b.n	80018cc <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017a4:	78fb      	ldrb	r3, [r7, #3]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	212c      	movs	r1, #44	; 0x2c
 80017aa:	fb01 f303 	mul.w	r3, r1, r3
 80017ae:	4413      	add	r3, r2
 80017b0:	3342      	adds	r3, #66	; 0x42
 80017b2:	2202      	movs	r2, #2
 80017b4:	701a      	strb	r2, [r3, #0]
      break;
 80017b6:	e089      	b.n	80018cc <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80017b8:	78bb      	ldrb	r3, [r7, #2]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11d      	bne.n	80017fa <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	212c      	movs	r1, #44	; 0x2c
 80017c4:	fb01 f303 	mul.w	r3, r1, r3
 80017c8:	4413      	add	r3, r2
 80017ca:	3355      	adds	r3, #85	; 0x55
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	212c      	movs	r1, #44	; 0x2c
 80017d8:	fb01 f303 	mul.w	r3, r1, r3
 80017dc:	4413      	add	r3, r2
 80017de:	3342      	adds	r3, #66	; 0x42
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017e4:	e073      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	212c      	movs	r1, #44	; 0x2c
 80017ec:	fb01 f303 	mul.w	r3, r1, r3
 80017f0:	4413      	add	r3, r2
 80017f2:	3342      	adds	r3, #66	; 0x42
 80017f4:	2202      	movs	r2, #2
 80017f6:	701a      	strb	r2, [r3, #0]
      break;
 80017f8:	e069      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017fa:	78fb      	ldrb	r3, [r7, #3]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	212c      	movs	r1, #44	; 0x2c
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	3354      	adds	r3, #84	; 0x54
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	212c      	movs	r1, #44	; 0x2c
 8001814:	fb01 f303 	mul.w	r3, r1, r3
 8001818:	4413      	add	r3, r2
 800181a:	3342      	adds	r3, #66	; 0x42
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
      break;
 8001820:	e055      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	212c      	movs	r1, #44	; 0x2c
 8001828:	fb01 f303 	mul.w	r3, r1, r3
 800182c:	4413      	add	r3, r2
 800182e:	3342      	adds	r3, #66	; 0x42
 8001830:	2202      	movs	r2, #2
 8001832:	701a      	strb	r2, [r3, #0]
      break;
 8001834:	e04b      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001836:	78bb      	ldrb	r3, [r7, #2]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d11d      	bne.n	8001878 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800183c:	78fb      	ldrb	r3, [r7, #3]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	212c      	movs	r1, #44	; 0x2c
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	3355      	adds	r3, #85	; 0x55
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d109      	bne.n	8001864 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	212c      	movs	r1, #44	; 0x2c
 8001856:	fb01 f303 	mul.w	r3, r1, r3
 800185a:	4413      	add	r3, r2
 800185c:	3342      	adds	r3, #66	; 0x42
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001862:	e034      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3342      	adds	r3, #66	; 0x42
 8001872:	2202      	movs	r2, #2
 8001874:	701a      	strb	r2, [r3, #0]
      break;
 8001876:	e02a      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3354      	adds	r3, #84	; 0x54
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800188c:	78fb      	ldrb	r3, [r7, #3]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	212c      	movs	r1, #44	; 0x2c
 8001892:	fb01 f303 	mul.w	r3, r1, r3
 8001896:	4413      	add	r3, r2
 8001898:	3342      	adds	r3, #66	; 0x42
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e016      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	212c      	movs	r1, #44	; 0x2c
 80018a6:	fb01 f303 	mul.w	r3, r1, r3
 80018aa:	4413      	add	r3, r2
 80018ac:	3342      	adds	r3, #66	; 0x42
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
      break;
 80018b2:	e00c      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	212c      	movs	r1, #44	; 0x2c
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	4413      	add	r3, r2
 80018c0:	3342      	adds	r3, #66	; 0x42
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
      break;
 80018c6:	e002      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80018c8:	bf00      	nop
 80018ca:	e000      	b.n	80018ce <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80018cc:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	212c      	movs	r1, #44	; 0x2c
 80018d4:	fb01 f303 	mul.w	r3, r1, r3
 80018d8:	4413      	add	r3, r2
 80018da:	3344      	adds	r3, #68	; 0x44
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	8b3a      	ldrh	r2, [r7, #24]
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	202c      	movs	r0, #44	; 0x2c
 80018e8:	fb00 f303 	mul.w	r3, r0, r3
 80018ec:	440b      	add	r3, r1
 80018ee:	334c      	adds	r3, #76	; 0x4c
 80018f0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	212c      	movs	r1, #44	; 0x2c
 80018f8:	fb01 f303 	mul.w	r3, r1, r3
 80018fc:	4413      	add	r3, r2
 80018fe:	3360      	adds	r3, #96	; 0x60
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001904:	78fb      	ldrb	r3, [r7, #3]
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	212c      	movs	r1, #44	; 0x2c
 800190a:	fb01 f303 	mul.w	r3, r1, r3
 800190e:	4413      	add	r3, r2
 8001910:	3350      	adds	r3, #80	; 0x50
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	212c      	movs	r1, #44	; 0x2c
 800191c:	fb01 f303 	mul.w	r3, r1, r3
 8001920:	4413      	add	r3, r2
 8001922:	3339      	adds	r3, #57	; 0x39
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	212c      	movs	r1, #44	; 0x2c
 800192e:	fb01 f303 	mul.w	r3, r1, r3
 8001932:	4413      	add	r3, r2
 8001934:	3361      	adds	r3, #97	; 0x61
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	222c      	movs	r2, #44	; 0x2c
 8001942:	fb02 f303 	mul.w	r3, r2, r3
 8001946:	3338      	adds	r3, #56	; 0x38
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	18d1      	adds	r1, r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	b2db      	uxtb	r3, r3
 8001952:	461a      	mov	r2, r3
 8001954:	f002 fd98 	bl	8004488 <USB_HC_StartXfer>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop

08001964 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fab1 	bl	8003ee2 <USB_GetMode>
 8001980:	4603      	mov	r3, r0
 8001982:	2b01      	cmp	r3, #1
 8001984:	f040 80ef 	bne.w	8001b66 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fa95 	bl	8003ebc <USB_ReadInterrupts>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 80e5 	beq.w	8001b64 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f002 fa8c 	bl	8003ebc <USB_ReadInterrupts>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019ae:	d104      	bne.n	80019ba <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 fa7c 	bl	8003ebc <USB_ReadInterrupts>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ce:	d104      	bne.n	80019da <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80019d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 fa6c 	bl	8003ebc <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019ee:	d104      	bne.n	80019fa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 fa5c 	bl	8003ebc <USB_ReadInterrupts>
 8001a04:	4603      	mov	r3, r0
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d103      	bne.n	8001a16 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2202      	movs	r2, #2
 8001a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fa4e 	bl	8003ebc <USB_ReadInterrupts>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a2a:	d115      	bne.n	8001a58 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a34:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d108      	bne.n	8001a58 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 faa4 	bl	8006f94 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2101      	movs	r1, #1
 8001a52:	4618      	mov	r0, r3
 8001a54:	f002 fb44 	bl	80040e0 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fa2d 	bl	8003ebc <USB_ReadInterrupts>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d102      	bne.n	8001a74 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f001 f9ff 	bl	8002e72 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fa1f 	bl	8003ebc <USB_ReadInterrupts>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d106      	bne.n	8001a96 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f005 fa67 	bl	8006f5c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2208      	movs	r2, #8
 8001a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f002 fa0e 	bl	8003ebc <USB_ReadInterrupts>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d101      	bne.n	8001aae <HAL_HCD_IRQHandler+0x14a>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_HCD_IRQHandler+0x14c>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d012      	beq.n	8001ada <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0210 	bic.w	r2, r2, #16
 8001ac2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f001 f902 	bl	8002cce <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	699a      	ldr	r2, [r3, #24]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f042 0210 	orr.w	r2, r2, #16
 8001ad8:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 f9ec 	bl	8003ebc <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aee:	d13a      	bne.n	8001b66 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fe09 	bl	800470c <USB_HC_ReadInterrupt>
 8001afa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	e025      	b.n	8001b4e <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d018      	beq.n	8001b48 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b2c:	d106      	bne.n	8001b3c <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	4619      	mov	r1, r3
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f8ab 	bl	8001c90 <HCD_HC_IN_IRQHandler>
 8001b3a:	e005      	b.n	8001b48 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4619      	mov	r1, r3
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fcc6 	bl	80024d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3d4      	bcc.n	8001b02 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b60:	615a      	str	r2, [r3, #20]
 8001b62:	e000      	b.n	8001b66 <HAL_HCD_IRQHandler+0x202>
      return;
 8001b64:	bf00      	nop
    }
  }
}
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_HCD_Start+0x16>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e013      	b.n	8001baa <HAL_HCD_Start+0x3e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 f8a1 	bl	8003cd6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f002 fb04 	bl	80041a8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_HCD_Stop+0x16>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e00d      	b.n	8001be4 <HAL_HCD_Stop+0x32>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f002 ff03 	bl	80049e0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 faab 	bl	8004154 <USB_ResetPort>
 8001bfe:	4603      	mov	r3, r0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	212c      	movs	r1, #44	; 0x2c
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3360      	adds	r3, #96	; 0x60
 8001c22:	781b      	ldrb	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	212c      	movs	r1, #44	; 0x2c
 8001c42:	fb01 f303 	mul.w	r3, r1, r3
 8001c46:	4413      	add	r3, r2
 8001c48:	3350      	adds	r3, #80	; 0x50
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 faef 	bl	8004248 <USB_GetCurrentFrame>
 8001c6a:	4603      	mov	r3, r0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f002 faca 	bl	800421a <USB_GetHostSpeed>
 8001c86:	4603      	mov	r3, r0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001ca6:	78fb      	ldrb	r3, [r7, #3]
 8001ca8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d119      	bne.n	8001cf4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	015a      	lsls	r2, r3, #5
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2304      	movs	r3, #4
 8001cd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	015a      	lsls	r2, r3, #5
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	4413      	add	r3, r2
 8001cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	0151      	lsls	r1, r2, #5
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	440a      	add	r2, r1
 8001ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	60d3      	str	r3, [r2, #12]
 8001cf2:	e101      	b.n	8001ef8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d0a:	d12b      	bne.n	8001d64 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	212c      	movs	r1, #44	; 0x2c
 8001d26:	fb01 f303 	mul.w	r3, r1, r3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	3361      	adds	r3, #97	; 0x61
 8001d2e:	2207      	movs	r2, #7
 8001d30:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	015a      	lsls	r2, r3, #5
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	0151      	lsls	r1, r2, #5
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	440a      	add	r2, r1
 8001d48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f002 fce6 	bl	800472e <USB_HC_Halt>
 8001d62:	e0c9      	b.n	8001ef8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	015a      	lsls	r2, r3, #5
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d109      	bne.n	8001d8e <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	015a      	lsls	r2, r3, #5
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d86:	461a      	mov	r2, r3
 8001d88:	2320      	movs	r3, #32
 8001d8a:	6093      	str	r3, [r2, #8]
 8001d8c:	e0b4      	b.n	8001ef8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	015a      	lsls	r2, r3, #5
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4413      	add	r3, r2
 8001d96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d133      	bne.n	8001e0c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	0151      	lsls	r1, r2, #5
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	440a      	add	r2, r1
 8001dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dbe:	f043 0302 	orr.w	r3, r3, #2
 8001dc2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	212c      	movs	r1, #44	; 0x2c
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	4413      	add	r3, r2
 8001dd0:	3361      	adds	r3, #97	; 0x61
 8001dd2:	2205      	movs	r2, #5
 8001dd4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de2:	461a      	mov	r2, r3
 8001de4:	2310      	movs	r3, #16
 8001de6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df4:	461a      	mov	r2, r3
 8001df6:	2308      	movs	r3, #8
 8001df8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 fc92 	bl	800472e <USB_HC_Halt>
 8001e0a:	e075      	b.n	8001ef8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e22:	d134      	bne.n	8001e8e <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	015a      	lsls	r2, r3, #5
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	0151      	lsls	r1, r2, #5
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	440a      	add	r2, r1
 8001e3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	212c      	movs	r1, #44	; 0x2c
 8001e4a:	fb01 f303 	mul.w	r3, r1, r3
 8001e4e:	4413      	add	r3, r2
 8001e50:	3361      	adds	r3, #97	; 0x61
 8001e52:	2208      	movs	r2, #8
 8001e54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e62:	461a      	mov	r2, r3
 8001e64:	2310      	movs	r3, #16
 8001e66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e74:	461a      	mov	r2, r3
 8001e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e7a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f002 fc51 	bl	800472e <USB_HC_Halt>
 8001e8c:	e034      	b.n	8001ef8 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d129      	bne.n	8001ef8 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	0151      	lsls	r1, r2, #5
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	440a      	add	r2, r1
 8001eba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ebe:	f043 0302 	orr.w	r3, r3, #2
 8001ec2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	212c      	movs	r1, #44	; 0x2c
 8001eca:	fb01 f303 	mul.w	r3, r1, r3
 8001ece:	4413      	add	r3, r2
 8001ed0:	3361      	adds	r3, #97	; 0x61
 8001ed2:	2206      	movs	r2, #6
 8001ed4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fc24 	bl	800472e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	015a      	lsls	r2, r3, #5
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4413      	add	r3, r2
 8001f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0e:	d122      	bne.n	8001f56 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	015a      	lsls	r2, r3, #5
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4413      	add	r3, r2
 8001f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	0151      	lsls	r1, r2, #5
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	440a      	add	r2, r1
 8001f26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f002 fbf7 	bl	800472e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f52:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001f54:	e2ba      	b.n	80024cc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	f040 811b 	bne.w	80021a4 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d019      	beq.n	8001faa <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3348      	adds	r3, #72	; 0x48
 8001f84:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	0159      	lsls	r1, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001f98:	1ad2      	subs	r2, r2, r3
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	202c      	movs	r0, #44	; 0x2c
 8001fa0:	fb00 f303 	mul.w	r3, r0, r3
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3350      	adds	r3, #80	; 0x50
 8001fa8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3361      	adds	r3, #97	; 0x61
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	212c      	movs	r1, #44	; 0x2c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	335c      	adds	r3, #92	; 0x5c
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2301      	movs	r3, #1
 8001fde:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	333f      	adds	r3, #63	; 0x3f
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	333f      	adds	r3, #63	; 0x3f
 8002002:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002004:	2b02      	cmp	r3, #2
 8002006:	d121      	bne.n	800204c <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	0151      	lsls	r1, r2, #5
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	440a      	add	r2, r1
 800201e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	4611      	mov	r1, r2
 8002032:	4618      	mov	r0, r3
 8002034:	f002 fb7b 	bl	800472e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	4413      	add	r3, r2
 8002040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002044:	461a      	mov	r2, r3
 8002046:	2310      	movs	r3, #16
 8002048:	6093      	str	r3, [r2, #8]
 800204a:	e066      	b.n	800211a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	212c      	movs	r1, #44	; 0x2c
 8002052:	fb01 f303 	mul.w	r3, r1, r3
 8002056:	4413      	add	r3, r2
 8002058:	333f      	adds	r3, #63	; 0x3f
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d127      	bne.n	80020b0 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	015a      	lsls	r2, r3, #5
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	4413      	add	r3, r2
 8002068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	0151      	lsls	r1, r2, #5
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	440a      	add	r2, r1
 8002076:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800207a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800207e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3360      	adds	r3, #96	; 0x60
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	b2d9      	uxtb	r1, r3
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	202c      	movs	r0, #44	; 0x2c
 800209c:	fb00 f303 	mul.w	r3, r0, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	3360      	adds	r3, #96	; 0x60
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f004 ff81 	bl	8006fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80020ae:	e034      	b.n	800211a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80020b0:	687a      	ldr	r2, [r7, #4]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	212c      	movs	r1, #44	; 0x2c
 80020b6:	fb01 f303 	mul.w	r3, r1, r3
 80020ba:	4413      	add	r3, r2
 80020bc:	333f      	adds	r3, #63	; 0x3f
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d12a      	bne.n	800211a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3360      	adds	r3, #96	; 0x60
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	212c      	movs	r1, #44	; 0x2c
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3354      	adds	r3, #84	; 0x54
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2d8      	uxtb	r0, r3
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	212c      	movs	r1, #44	; 0x2c
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	3354      	adds	r3, #84	; 0x54
 80020fa:	4602      	mov	r2, r0
 80020fc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	b2d9      	uxtb	r1, r3
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	202c      	movs	r0, #44	; 0x2c
 8002108:	fb00 f303 	mul.w	r3, r0, r3
 800210c:	4413      	add	r3, r2
 800210e:	3360      	adds	r3, #96	; 0x60
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f004 ff4b 	bl	8006fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12b      	bne.n	800217a <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	3348      	adds	r3, #72	; 0x48
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	202c      	movs	r0, #44	; 0x2c
 8002138:	fb00 f202 	mul.w	r2, r0, r2
 800213c:	440a      	add	r2, r1
 800213e:	3240      	adds	r2, #64	; 0x40
 8002140:	8812      	ldrh	r2, [r2, #0]
 8002142:	fbb3 f3f2 	udiv	r3, r3, r2
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 81be 	beq.w	80024cc <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	212c      	movs	r1, #44	; 0x2c
 8002156:	fb01 f303 	mul.w	r3, r1, r3
 800215a:	4413      	add	r3, r2
 800215c:	3354      	adds	r3, #84	; 0x54
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2d8      	uxtb	r0, r3
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3354      	adds	r3, #84	; 0x54
 8002174:	4602      	mov	r2, r0
 8002176:	701a      	strb	r2, [r3, #0]
}
 8002178:	e1a8      	b.n	80024cc <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3354      	adds	r3, #84	; 0x54
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f083 0301 	eor.w	r3, r3, #1
 800218e:	b2d8      	uxtb	r0, r3
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	212c      	movs	r1, #44	; 0x2c
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	3354      	adds	r3, #84	; 0x54
 800219e:	4602      	mov	r2, r0
 80021a0:	701a      	strb	r2, [r3, #0]
}
 80021a2:	e193      	b.n	80024cc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	f040 8106 	bne.w	80023c8 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	015a      	lsls	r2, r3, #5
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4413      	add	r3, r2
 80021c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	0151      	lsls	r1, r2, #5
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	440a      	add	r2, r1
 80021d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021d6:	f023 0302 	bic.w	r3, r3, #2
 80021da:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3361      	adds	r3, #97	; 0x61
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d109      	bne.n	8002204 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	212c      	movs	r1, #44	; 0x2c
 80021f6:	fb01 f303 	mul.w	r3, r1, r3
 80021fa:	4413      	add	r3, r2
 80021fc:	3360      	adds	r3, #96	; 0x60
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
 8002202:	e0c9      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	212c      	movs	r1, #44	; 0x2c
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	3361      	adds	r3, #97	; 0x61
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b05      	cmp	r3, #5
 8002216:	d109      	bne.n	800222c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	3360      	adds	r3, #96	; 0x60
 8002226:	2205      	movs	r2, #5
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e0b5      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	3361      	adds	r3, #97	; 0x61
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b06      	cmp	r3, #6
 800223e:	d009      	beq.n	8002254 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3361      	adds	r3, #97	; 0x61
 800224e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002250:	2b08      	cmp	r3, #8
 8002252:	d150      	bne.n	80022f6 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	212c      	movs	r1, #44	; 0x2c
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4413      	add	r3, r2
 8002260:	335c      	adds	r3, #92	; 0x5c
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	202c      	movs	r0, #44	; 0x2c
 800226c:	fb00 f303 	mul.w	r3, r0, r3
 8002270:	440b      	add	r3, r1
 8002272:	335c      	adds	r3, #92	; 0x5c
 8002274:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	335c      	adds	r3, #92	; 0x5c
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b02      	cmp	r3, #2
 8002288:	d912      	bls.n	80022b0 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	335c      	adds	r3, #92	; 0x5c
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	3360      	adds	r3, #96	; 0x60
 80022aa:	2204      	movs	r2, #4
 80022ac:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ae:	e073      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	3360      	adds	r3, #96	; 0x60
 80022be:	2202      	movs	r2, #2
 80022c0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	015a      	lsls	r2, r3, #5
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4413      	add	r3, r2
 80022ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022d8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022e0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022f4:	e050      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3361      	adds	r3, #97	; 0x61
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b03      	cmp	r3, #3
 8002308:	d122      	bne.n	8002350 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	3360      	adds	r3, #96	; 0x60
 8002318:	2202      	movs	r2, #2
 800231a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002332:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800233a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e023      	b.n	8002398 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	212c      	movs	r1, #44	; 0x2c
 8002356:	fb01 f303 	mul.w	r3, r1, r3
 800235a:	4413      	add	r3, r2
 800235c:	3361      	adds	r3, #97	; 0x61
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b07      	cmp	r3, #7
 8002362:	d119      	bne.n	8002398 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	212c      	movs	r1, #44	; 0x2c
 800236a:	fb01 f303 	mul.w	r3, r1, r3
 800236e:	4413      	add	r3, r2
 8002370:	335c      	adds	r3, #92	; 0x5c
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	202c      	movs	r0, #44	; 0x2c
 800237c:	fb00 f303 	mul.w	r3, r0, r3
 8002380:	440b      	add	r3, r1
 8002382:	335c      	adds	r3, #92	; 0x5c
 8002384:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	3360      	adds	r3, #96	; 0x60
 8002394:	2204      	movs	r2, #4
 8002396:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a4:	461a      	mov	r2, r3
 80023a6:	2302      	movs	r3, #2
 80023a8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	b2d9      	uxtb	r1, r3
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	202c      	movs	r0, #44	; 0x2c
 80023b4:	fb00 f303 	mul.w	r3, r0, r3
 80023b8:	4413      	add	r3, r2
 80023ba:	3360      	adds	r3, #96	; 0x60
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f004 fdf5 	bl	8006fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023c6:	e081      	b.n	80024cc <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d176      	bne.n	80024cc <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	212c      	movs	r1, #44	; 0x2c
 80023e4:	fb01 f303 	mul.w	r3, r1, r3
 80023e8:	4413      	add	r3, r2
 80023ea:	333f      	adds	r3, #63	; 0x3f
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d121      	bne.n	8002436 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	335c      	adds	r3, #92	; 0x5c
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4413      	add	r3, r2
 800240c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	0151      	lsls	r1, r2, #5
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	440a      	add	r2, r1
 800241a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	4611      	mov	r1, r2
 800242e:	4618      	mov	r0, r3
 8002430:	f002 f97d 	bl	800472e <USB_HC_Halt>
 8002434:	e041      	b.n	80024ba <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	212c      	movs	r1, #44	; 0x2c
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	333f      	adds	r3, #63	; 0x3f
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	333f      	adds	r3, #63	; 0x3f
 8002458:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800245a:	2b02      	cmp	r3, #2
 800245c:	d12d      	bne.n	80024ba <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	212c      	movs	r1, #44	; 0x2c
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	335c      	adds	r3, #92	; 0x5c
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d120      	bne.n	80024ba <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	212c      	movs	r1, #44	; 0x2c
 800247e:	fb01 f303 	mul.w	r3, r1, r3
 8002482:	4413      	add	r3, r2
 8002484:	3361      	adds	r3, #97	; 0x61
 8002486:	2203      	movs	r2, #3
 8002488:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	015a      	lsls	r2, r3, #5
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4413      	add	r3, r2
 8002492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	0151      	lsls	r1, r2, #5
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	440a      	add	r2, r1
 80024a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 f93a 	bl	800472e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	2310      	movs	r3, #16
 80024ca:	6093      	str	r3, [r2, #8]
}
 80024cc:	bf00      	nop
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b04      	cmp	r3, #4
 8002502:	d119      	bne.n	8002538 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	461a      	mov	r2, r3
 8002512:	2304      	movs	r3, #4
 8002514:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	0151      	lsls	r1, r2, #5
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	440a      	add	r2, r1
 800252c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002536:	e3c6      	b.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 0320 	and.w	r3, r3, #32
 800254a:	2b20      	cmp	r3, #32
 800254c:	d13e      	bne.n	80025cc <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	461a      	mov	r2, r3
 800255c:	2320      	movs	r3, #32
 800255e:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	212c      	movs	r1, #44	; 0x2c
 8002566:	fb01 f303 	mul.w	r3, r1, r3
 800256a:	4413      	add	r3, r2
 800256c:	333d      	adds	r3, #61	; 0x3d
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 83a8 	bne.w	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	212c      	movs	r1, #44	; 0x2c
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4413      	add	r3, r2
 8002582:	333d      	adds	r3, #61	; 0x3d
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	0151      	lsls	r1, r2, #5
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	440a      	add	r2, r1
 80025b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f002 f8b2 	bl	800472e <USB_HC_Halt>
}
 80025ca:	e37c      	b.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e2:	d122      	bne.n	800262a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	0151      	lsls	r1, r2, #5
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	440a      	add	r2, r1
 80025fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	4611      	mov	r1, r2
 800260e:	4618      	mov	r0, r3
 8002610:	f002 f88d 	bl	800472e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	461a      	mov	r2, r3
 8002622:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002626:	6093      	str	r3, [r2, #8]
}
 8002628:	e34d      	b.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b01      	cmp	r3, #1
 800263e:	d150      	bne.n	80026e2 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	335c      	adds	r3, #92	; 0x5c
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b40      	cmp	r3, #64	; 0x40
 8002666:	d111      	bne.n	800268c <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	212c      	movs	r1, #44	; 0x2c
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	333d      	adds	r3, #61	; 0x3d
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	015a      	lsls	r2, r3, #5
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002686:	461a      	mov	r2, r3
 8002688:	2340      	movs	r3, #64	; 0x40
 800268a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	0151      	lsls	r1, r2, #5
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	440a      	add	r2, r1
 80026a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a6:	f043 0302 	orr.w	r3, r3, #2
 80026aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 f839 	bl	800472e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	2301      	movs	r3, #1
 80026cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	212c      	movs	r1, #44	; 0x2c
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	4413      	add	r3, r2
 80026da:	3361      	adds	r3, #97	; 0x61
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
}
 80026e0:	e2f1      	b.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f4:	2b40      	cmp	r3, #64	; 0x40
 80026f6:	d13c      	bne.n	8002772 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3361      	adds	r3, #97	; 0x61
 8002706:	2204      	movs	r2, #4
 8002708:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	333d      	adds	r3, #61	; 0x3d
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	212c      	movs	r1, #44	; 0x2c
 8002722:	fb01 f303 	mul.w	r3, r1, r3
 8002726:	4413      	add	r3, r2
 8002728:	335c      	adds	r3, #92	; 0x5c
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	0151      	lsls	r1, r2, #5
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	440a      	add	r2, r1
 8002744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f001 ffe8 	bl	800472e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2340      	movs	r3, #64	; 0x40
 800276e:	6093      	str	r3, [r2, #8]
}
 8002770:	e2a9      	b.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	015a      	lsls	r2, r3, #5
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	4413      	add	r3, r2
 800277a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b08      	cmp	r3, #8
 8002786:	d12a      	bne.n	80027de <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	461a      	mov	r2, r3
 8002796:	2308      	movs	r3, #8
 8002798:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f001 ffb2 	bl	800472e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	212c      	movs	r1, #44	; 0x2c
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3361      	adds	r3, #97	; 0x61
 80027d8:	2205      	movs	r2, #5
 80027da:	701a      	strb	r2, [r3, #0]
}
 80027dc:	e273      	b.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d150      	bne.n	8002896 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	212c      	movs	r1, #44	; 0x2c
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	4413      	add	r3, r2
 8002800:	335c      	adds	r3, #92	; 0x5c
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	212c      	movs	r1, #44	; 0x2c
 800280c:	fb01 f303 	mul.w	r3, r1, r3
 8002810:	4413      	add	r3, r2
 8002812:	3361      	adds	r3, #97	; 0x61
 8002814:	2203      	movs	r2, #3
 8002816:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	333d      	adds	r3, #61	; 0x3d
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d112      	bne.n	8002852 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	333c      	adds	r3, #60	; 0x3c
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d108      	bne.n	8002852 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	333d      	adds	r3, #61	; 0x3d
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	015a      	lsls	r2, r3, #5
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4413      	add	r3, r2
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	0151      	lsls	r1, r2, #5
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	440a      	add	r2, r1
 8002868:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800286c:	f043 0302 	orr.w	r3, r3, #2
 8002870:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f001 ff56 	bl	800472e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	461a      	mov	r2, r3
 8002890:	2310      	movs	r3, #16
 8002892:	6093      	str	r3, [r2, #8]
}
 8002894:	e217      	b.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a8:	2b80      	cmp	r3, #128	; 0x80
 80028aa:	d174      	bne.n	8002996 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d121      	bne.n	80028f8 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3361      	adds	r3, #97	; 0x61
 80028c2:	2206      	movs	r2, #6
 80028c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	0151      	lsls	r1, r2, #5
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	440a      	add	r2, r1
 80028dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 ff1c 	bl	800472e <USB_HC_Halt>
 80028f6:	e044      	b.n	8002982 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	335c      	adds	r3, #92	; 0x5c
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	202c      	movs	r0, #44	; 0x2c
 8002910:	fb00 f303 	mul.w	r3, r0, r3
 8002914:	440b      	add	r3, r1
 8002916:	335c      	adds	r3, #92	; 0x5c
 8002918:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	335c      	adds	r3, #92	; 0x5c
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d920      	bls.n	8002970 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	212c      	movs	r1, #44	; 0x2c
 8002934:	fb01 f303 	mul.w	r3, r1, r3
 8002938:	4413      	add	r3, r2
 800293a:	335c      	adds	r3, #92	; 0x5c
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3360      	adds	r3, #96	; 0x60
 800294e:	2204      	movs	r2, #4
 8002950:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	b2d9      	uxtb	r1, r3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	202c      	movs	r0, #44	; 0x2c
 800295c:	fb00 f303 	mul.w	r3, r0, r3
 8002960:	4413      	add	r3, r2
 8002962:	3360      	adds	r3, #96	; 0x60
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f004 fb21 	bl	8006fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800296e:	e008      	b.n	8002982 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	3360      	adds	r3, #96	; 0x60
 800297e:	2202      	movs	r2, #2
 8002980:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	461a      	mov	r2, r3
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	6093      	str	r3, [r2, #8]
}
 8002994:	e197      	b.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	015a      	lsls	r2, r3, #5
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4413      	add	r3, r2
 800299e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ac:	d134      	bne.n	8002a18 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	015a      	lsls	r2, r3, #5
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4413      	add	r3, r2
 80029b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	0151      	lsls	r1, r2, #5
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	440a      	add	r2, r1
 80029c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029c8:	f043 0302 	orr.w	r3, r3, #2
 80029cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fea8 	bl	800472e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	2310      	movs	r3, #16
 80029ee:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029fc:	461a      	mov	r2, r3
 80029fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a02:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3361      	adds	r3, #97	; 0x61
 8002a12:	2208      	movs	r2, #8
 8002a14:	701a      	strb	r2, [r3, #0]
}
 8002a16:	e156      	b.n	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	f040 814b 	bne.w	8002cc6 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	0151      	lsls	r1, r2, #5
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	440a      	add	r2, r1
 8002a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a4a:	f023 0302 	bic.w	r3, r3, #2
 8002a4e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	212c      	movs	r1, #44	; 0x2c
 8002a56:	fb01 f303 	mul.w	r3, r1, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3361      	adds	r3, #97	; 0x61
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d179      	bne.n	8002b58 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	212c      	movs	r1, #44	; 0x2c
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3360      	adds	r3, #96	; 0x60
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	333f      	adds	r3, #63	; 0x3f
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d00a      	beq.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	333f      	adds	r3, #63	; 0x3f
 8002a98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	f040 80fc 	bne.w	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d142      	bne.n	8002b2e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	334c      	adds	r3, #76	; 0x4c
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80ed 	beq.w	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	334c      	adds	r3, #76	; 0x4c
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	202c      	movs	r0, #44	; 0x2c
 8002ad4:	fb00 f202 	mul.w	r2, r0, r2
 8002ad8:	440a      	add	r2, r1
 8002ada:	3240      	adds	r2, #64	; 0x40
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	202c      	movs	r0, #44	; 0x2c
 8002ae8:	fb00 f202 	mul.w	r2, r0, r2
 8002aec:	440a      	add	r2, r1
 8002aee:	3240      	adds	r2, #64	; 0x40
 8002af0:	8812      	ldrh	r2, [r2, #0]
 8002af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 80ca 	beq.w	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3355      	adds	r3, #85	; 0x55
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	f083 0301 	eor.w	r3, r3, #1
 8002b18:	b2d8      	uxtb	r0, r3
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	212c      	movs	r1, #44	; 0x2c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3355      	adds	r3, #85	; 0x55
 8002b28:	4602      	mov	r2, r0
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e0b4      	b.n	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	212c      	movs	r1, #44	; 0x2c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	3355      	adds	r3, #85	; 0x55
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	f083 0301 	eor.w	r3, r3, #1
 8002b42:	b2d8      	uxtb	r0, r3
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	212c      	movs	r1, #44	; 0x2c
 8002b4a:	fb01 f303 	mul.w	r3, r1, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	3355      	adds	r3, #85	; 0x55
 8002b52:	4602      	mov	r2, r0
 8002b54:	701a      	strb	r2, [r3, #0]
 8002b56:	e09f      	b.n	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	3361      	adds	r3, #97	; 0x61
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d109      	bne.n	8002b80 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	212c      	movs	r1, #44	; 0x2c
 8002b72:	fb01 f303 	mul.w	r3, r1, r3
 8002b76:	4413      	add	r3, r2
 8002b78:	3360      	adds	r3, #96	; 0x60
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e08b      	b.n	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3361      	adds	r3, #97	; 0x61
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d109      	bne.n	8002ba8 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	212c      	movs	r1, #44	; 0x2c
 8002b9a:	fb01 f303 	mul.w	r3, r1, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3360      	adds	r3, #96	; 0x60
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e077      	b.n	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	212c      	movs	r1, #44	; 0x2c
 8002bae:	fb01 f303 	mul.w	r3, r1, r3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3361      	adds	r3, #97	; 0x61
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d109      	bne.n	8002bd0 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3360      	adds	r3, #96	; 0x60
 8002bca:	2205      	movs	r2, #5
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e063      	b.n	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3361      	adds	r3, #97	; 0x61
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b06      	cmp	r3, #6
 8002be2:	d009      	beq.n	8002bf8 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	212c      	movs	r1, #44	; 0x2c
 8002bea:	fb01 f303 	mul.w	r3, r1, r3
 8002bee:	4413      	add	r3, r2
 8002bf0:	3361      	adds	r3, #97	; 0x61
 8002bf2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d14f      	bne.n	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	212c      	movs	r1, #44	; 0x2c
 8002bfe:	fb01 f303 	mul.w	r3, r1, r3
 8002c02:	4413      	add	r3, r2
 8002c04:	335c      	adds	r3, #92	; 0x5c
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	202c      	movs	r0, #44	; 0x2c
 8002c10:	fb00 f303 	mul.w	r3, r0, r3
 8002c14:	440b      	add	r3, r1
 8002c16:	335c      	adds	r3, #92	; 0x5c
 8002c18:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	212c      	movs	r1, #44	; 0x2c
 8002c20:	fb01 f303 	mul.w	r3, r1, r3
 8002c24:	4413      	add	r3, r2
 8002c26:	335c      	adds	r3, #92	; 0x5c
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d912      	bls.n	8002c54 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	335c      	adds	r3, #92	; 0x5c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3360      	adds	r3, #96	; 0x60
 8002c4e:	2204      	movs	r2, #4
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e021      	b.n	8002c98 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3360      	adds	r3, #96	; 0x60
 8002c62:	2202      	movs	r2, #2
 8002c64:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	015a      	lsls	r2, r3, #5
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	4413      	add	r3, r2
 8002c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c7c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c84:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	461a      	mov	r2, r3
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	b2d9      	uxtb	r1, r3
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	202c      	movs	r0, #44	; 0x2c
 8002cb4:	fb00 f303 	mul.w	r3, r0, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3360      	adds	r3, #96	; 0x60
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f004 f975 	bl	8006fb0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002cc6:	bf00      	nop
 8002cc8:	3720      	adds	r7, #32
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08a      	sub	sp, #40	; 0x28
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	0c5b      	lsrs	r3, r3, #17
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d02:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d004      	beq.n	8002d14 <HCD_RXQLVL_IRQHandler+0x46>
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	f000 80a9 	beq.w	8002e64 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d12:	e0aa      	b.n	8002e6a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 80a6 	beq.w	8002e68 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3344      	adds	r3, #68	; 0x44
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 809b 	beq.w	8002e68 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	212c      	movs	r1, #44	; 0x2c
 8002d38:	fb01 f303 	mul.w	r3, r1, r3
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3350      	adds	r3, #80	; 0x50
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	441a      	add	r2, r3
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	202c      	movs	r0, #44	; 0x2c
 8002d4c:	fb00 f303 	mul.w	r3, r0, r3
 8002d50:	440b      	add	r3, r1
 8002d52:	334c      	adds	r3, #76	; 0x4c
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d87a      	bhi.n	8002e50 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	212c      	movs	r1, #44	; 0x2c
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3344      	adds	r3, #68	; 0x44
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	b292      	uxth	r2, r2
 8002d72:	4619      	mov	r1, r3
 8002d74:	f001 f879 	bl	8003e6a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	212c      	movs	r1, #44	; 0x2c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	4413      	add	r3, r2
 8002d84:	3344      	adds	r3, #68	; 0x44
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	441a      	add	r2, r3
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	202c      	movs	r0, #44	; 0x2c
 8002d92:	fb00 f303 	mul.w	r3, r0, r3
 8002d96:	440b      	add	r3, r1
 8002d98:	3344      	adds	r3, #68	; 0x44
 8002d9a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3350      	adds	r3, #80	; 0x50
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	441a      	add	r2, r3
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	202c      	movs	r0, #44	; 0x2c
 8002db6:	fb00 f303 	mul.w	r3, r0, r3
 8002dba:	440b      	add	r3, r1
 8002dbc:	3350      	adds	r3, #80	; 0x50
 8002dbe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	015a      	lsls	r2, r3, #5
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	0cdb      	lsrs	r3, r3, #19
 8002dd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dd4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3340      	adds	r3, #64	; 0x40
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d13c      	bne.n	8002e68 <HCD_RXQLVL_IRQHandler+0x19a>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d039      	beq.n	8002e68 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	6a3b      	ldr	r3, [r7, #32]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e0a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e12:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	212c      	movs	r1, #44	; 0x2c
 8002e2c:	fb01 f303 	mul.w	r3, r1, r3
 8002e30:	4413      	add	r3, r2
 8002e32:	3354      	adds	r3, #84	; 0x54
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	f083 0301 	eor.w	r3, r3, #1
 8002e3a:	b2d8      	uxtb	r0, r3
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	212c      	movs	r1, #44	; 0x2c
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	4413      	add	r3, r2
 8002e48:	3354      	adds	r3, #84	; 0x54
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	701a      	strb	r2, [r3, #0]
      break;
 8002e4e:	e00b      	b.n	8002e68 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	212c      	movs	r1, #44	; 0x2c
 8002e56:	fb01 f303 	mul.w	r3, r1, r3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3360      	adds	r3, #96	; 0x60
 8002e5e:	2204      	movs	r2, #4
 8002e60:	701a      	strb	r2, [r3, #0]
      break;
 8002e62:	e001      	b.n	8002e68 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002e64:	bf00      	nop
 8002e66:	e000      	b.n	8002e6a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002e68:	bf00      	nop
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	3728      	adds	r7, #40	; 0x28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b086      	sub	sp, #24
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002e9e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d10b      	bne.n	8002ec2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f004 f85f 	bl	8006f78 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b08      	cmp	r3, #8
 8002eca:	d132      	bne.n	8002f32 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f043 0308 	orr.w	r3, r3, #8
 8002ed2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d126      	bne.n	8002f2c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d113      	bne.n	8002f0e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002eec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ef0:	d106      	bne.n	8002f00 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2102      	movs	r1, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 f8f1 	bl	80040e0 <USB_InitFSLSPClkSel>
 8002efe:	e011      	b.n	8002f24 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 f8ea 	bl	80040e0 <USB_InitFSLSPClkSel>
 8002f0c:	e00a      	b.n	8002f24 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d106      	bne.n	8002f24 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f22:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f004 f851 	bl	8006fcc <HAL_HCD_PortEnabled_Callback>
 8002f2a:	e002      	b.n	8002f32 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f004 f85b 	bl	8006fe8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d103      	bne.n	8002f44 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f043 0320 	orr.w	r3, r3, #32
 8002f42:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6013      	str	r3, [r2, #0]
}
 8002f50:	bf00      	nop
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e264      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d075      	beq.n	8003062 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f76:	4ba3      	ldr	r3, [pc, #652]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d00c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f82:	4ba0      	ldr	r3, [pc, #640]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d112      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8e:	4b9d      	ldr	r3, [pc, #628]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f9a:	d10b      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	4b99      	ldr	r3, [pc, #612]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d05b      	beq.n	8003060 <HAL_RCC_OscConfig+0x108>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d157      	bne.n	8003060 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e23f      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fbc:	d106      	bne.n	8002fcc <HAL_RCC_OscConfig+0x74>
 8002fbe:	4b91      	ldr	r3, [pc, #580]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a90      	ldr	r2, [pc, #576]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e01d      	b.n	8003008 <HAL_RCC_OscConfig+0xb0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fd4:	d10c      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x98>
 8002fd6:	4b8b      	ldr	r3, [pc, #556]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a8a      	ldr	r2, [pc, #552]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a87      	ldr	r2, [pc, #540]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fec:	6013      	str	r3, [r2, #0]
 8002fee:	e00b      	b.n	8003008 <HAL_RCC_OscConfig+0xb0>
 8002ff0:	4b84      	ldr	r3, [pc, #528]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a83      	ldr	r2, [pc, #524]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	4b81      	ldr	r3, [pc, #516]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a80      	ldr	r2, [pc, #512]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003006:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d013      	beq.n	8003038 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fd ff44 	bl	8000e9c <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003018:	f7fd ff40 	bl	8000e9c <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	; 0x64
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e204      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800302a:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0xc0>
 8003036:	e014      	b.n	8003062 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003038:	f7fd ff30 	bl	8000e9c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003040:	f7fd ff2c 	bl	8000e9c <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b64      	cmp	r3, #100	; 0x64
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1f0      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003052:	4b6c      	ldr	r3, [pc, #432]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f0      	bne.n	8003040 <HAL_RCC_OscConfig+0xe8>
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003060:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d063      	beq.n	8003136 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800306e:	4b65      	ldr	r3, [pc, #404]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307a:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d11c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003086:	4b5f      	ldr	r3, [pc, #380]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_RCC_OscConfig+0x152>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e1c4      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030aa:	4b56      	ldr	r3, [pc, #344]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4952      	ldr	r1, [pc, #328]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	e03a      	b.n	8003136 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d020      	beq.n	800310a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c8:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_RCC_OscConfig+0x2b0>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fd fee5 	bl	8000e9c <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fd fee1 	bl	8000e9c <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e1a5      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f4:	4b43      	ldr	r3, [pc, #268]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4940      	ldr	r1, [pc, #256]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 8003104:	4313      	orrs	r3, r2
 8003106:	600b      	str	r3, [r1, #0]
 8003108:	e015      	b.n	8003136 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310a:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <HAL_RCC_OscConfig+0x2b0>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003110:	f7fd fec4 	bl	8000e9c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003118:	f7fd fec0 	bl	8000e9c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e184      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800312a:	4b36      	ldr	r3, [pc, #216]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1f0      	bne.n	8003118 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0308 	and.w	r3, r3, #8
 800313e:	2b00      	cmp	r3, #0
 8003140:	d030      	beq.n	80031a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_RCC_OscConfig+0x2b4>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fd fea4 	bl	8000e9c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003158:	f7fd fea0 	bl	8000e9c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e164      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x200>
 8003176:	e015      	b.n	80031a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003178:	4b24      	ldr	r3, [pc, #144]	; (800320c <HAL_RCC_OscConfig+0x2b4>)
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317e:	f7fd fe8d 	bl	8000e9c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003186:	f7fd fe89 	bl	8000e9c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e14d      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 800319a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1f0      	bne.n	8003186 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a0 	beq.w	80032f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10f      	bne.n	80031e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d0:	6413      	str	r3, [r2, #64]	; 0x40
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_OscConfig+0x2ac>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031de:	2301      	movs	r3, #1
 80031e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_OscConfig+0x2b8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d121      	bne.n	8003232 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ee:	4b08      	ldr	r3, [pc, #32]	; (8003210 <HAL_RCC_OscConfig+0x2b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <HAL_RCC_OscConfig+0x2b8>)
 80031f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fa:	f7fd fe4f 	bl	8000e9c <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003200:	e011      	b.n	8003226 <HAL_RCC_OscConfig+0x2ce>
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	42470000 	.word	0x42470000
 800320c:	42470e80 	.word	0x42470e80
 8003210:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fd fe42 	bl	8000e9c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e106      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003226:	4b85      	ldr	r3, [pc, #532]	; (800343c <HAL_RCC_OscConfig+0x4e4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d106      	bne.n	8003248 <HAL_RCC_OscConfig+0x2f0>
 800323a:	4b81      	ldr	r3, [pc, #516]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	4a80      	ldr	r2, [pc, #512]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	6713      	str	r3, [r2, #112]	; 0x70
 8003246:	e01c      	b.n	8003282 <HAL_RCC_OscConfig+0x32a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b05      	cmp	r3, #5
 800324e:	d10c      	bne.n	800326a <HAL_RCC_OscConfig+0x312>
 8003250:	4b7b      	ldr	r3, [pc, #492]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003254:	4a7a      	ldr	r2, [pc, #488]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003256:	f043 0304 	orr.w	r3, r3, #4
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	4b78      	ldr	r3, [pc, #480]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4a77      	ldr	r2, [pc, #476]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	; 0x70
 8003268:	e00b      	b.n	8003282 <HAL_RCC_OscConfig+0x32a>
 800326a:	4b75      	ldr	r3, [pc, #468]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a74      	ldr	r2, [pc, #464]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	4b72      	ldr	r3, [pc, #456]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	4a71      	ldr	r2, [pc, #452]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 800327c:	f023 0304 	bic.w	r3, r3, #4
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d015      	beq.n	80032b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328a:	f7fd fe07 	bl	8000e9c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	e00a      	b.n	80032a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003292:	f7fd fe03 	bl	8000e9c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e0c5      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032a8:	4b65      	ldr	r3, [pc, #404]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ee      	beq.n	8003292 <HAL_RCC_OscConfig+0x33a>
 80032b4:	e014      	b.n	80032e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fd fdf1 	bl	8000e9c <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fd fded 	bl	8000e9c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0af      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032d4:	4b5a      	ldr	r3, [pc, #360]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1ee      	bne.n	80032be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e6:	4b56      	ldr	r3, [pc, #344]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a55      	ldr	r2, [pc, #340]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f000 809b 	beq.w	8003432 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032fc:	4b50      	ldr	r3, [pc, #320]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d05c      	beq.n	80033c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d141      	bne.n	8003394 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003310:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <HAL_RCC_OscConfig+0x4ec>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fd fdc1 	bl	8000e9c <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331e:	f7fd fdbd 	bl	8000e9c <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e081      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003330:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1f0      	bne.n	800331e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a1b      	ldr	r3, [r3, #32]
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	019b      	lsls	r3, r3, #6
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	3b01      	subs	r3, #1
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	061b      	lsls	r3, r3, #24
 8003360:	4937      	ldr	r1, [pc, #220]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003362:	4313      	orrs	r3, r2
 8003364:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003366:	4b37      	ldr	r3, [pc, #220]	; (8003444 <HAL_RCC_OscConfig+0x4ec>)
 8003368:	2201      	movs	r2, #1
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336c:	f7fd fd96 	bl	8000e9c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd fd92 	bl	8000e9c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e056      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x41c>
 8003392:	e04e      	b.n	8003432 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b2b      	ldr	r3, [pc, #172]	; (8003444 <HAL_RCC_OscConfig+0x4ec>)
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fd fd7f 	bl	8000e9c <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fd fd7b 	bl	8000e9c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e03f      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b4:	4b22      	ldr	r3, [pc, #136]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x44a>
 80033c0:	e037      	b.n	8003432 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e032      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <HAL_RCC_OscConfig+0x4e8>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d028      	beq.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d121      	bne.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d11a      	bne.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033fe:	4013      	ands	r3, r2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003404:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003406:	4293      	cmp	r3, r2
 8003408:	d111      	bne.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003414:	085b      	lsrs	r3, r3, #1
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d107      	bne.n	800342e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003428:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d001      	beq.n	8003432 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e000      	b.n	8003434 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40007000 	.word	0x40007000
 8003440:	40023800 	.word	0x40023800
 8003444:	42470060 	.word	0x42470060

08003448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0cc      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800345c:	4b68      	ldr	r3, [pc, #416]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d90c      	bls.n	8003484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b65      	ldr	r3, [pc, #404]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b63      	ldr	r3, [pc, #396]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0b8      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d020      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	4a58      	ldr	r2, [pc, #352]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a52      	ldr	r2, [pc, #328]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034c0:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	494d      	ldr	r1, [pc, #308]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d044      	beq.n	8003568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d107      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d119      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e07f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d003      	beq.n	8003506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003502:	2b03      	cmp	r3, #3
 8003504:	d107      	bne.n	8003516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003506:	4b3f      	ldr	r3, [pc, #252]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d109      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e06f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003516:	4b3b      	ldr	r3, [pc, #236]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e067      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003526:	4b37      	ldr	r3, [pc, #220]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f023 0203 	bic.w	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4934      	ldr	r1, [pc, #208]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	4313      	orrs	r3, r2
 8003536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003538:	f7fd fcb0 	bl	8000e9c <HAL_GetTick>
 800353c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800353e:	e00a      	b.n	8003556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003540:	f7fd fcac 	bl	8000e9c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	; 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e04f      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003556:	4b2b      	ldr	r3, [pc, #172]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 020c 	and.w	r2, r3, #12
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	429a      	cmp	r2, r3
 8003566:	d1eb      	bne.n	8003540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0307 	and.w	r3, r3, #7
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	429a      	cmp	r2, r3
 8003574:	d20c      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003576:	4b22      	ldr	r3, [pc, #136]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800357e:	4b20      	ldr	r3, [pc, #128]	; (8003600 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0307 	and.w	r3, r3, #7
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e032      	b.n	80035f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0304 	and.w	r3, r3, #4
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800359c:	4b19      	ldr	r3, [pc, #100]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4916      	ldr	r1, [pc, #88]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	490e      	ldr	r1, [pc, #56]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ce:	f000 f821 	bl	8003614 <HAL_RCC_GetSysClockFreq>
 80035d2:	4602      	mov	r2, r0
 80035d4:	4b0b      	ldr	r3, [pc, #44]	; (8003604 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	490a      	ldr	r1, [pc, #40]	; (8003608 <HAL_RCC_ClockConfig+0x1c0>)
 80035e0:	5ccb      	ldrb	r3, [r1, r3]
 80035e2:	fa22 f303 	lsr.w	r3, r2, r3
 80035e6:	4a09      	ldr	r2, [pc, #36]	; (800360c <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCC_ClockConfig+0x1c8>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fc10 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023c00 	.word	0x40023c00
 8003604:	40023800 	.word	0x40023800
 8003608:	080075e0 	.word	0x080075e0
 800360c:	2000000c 	.word	0x2000000c
 8003610:	20000010 	.word	0x20000010

08003614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003614:	b5b0      	push	{r4, r5, r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800361a:	2100      	movs	r1, #0
 800361c:	6079      	str	r1, [r7, #4]
 800361e:	2100      	movs	r1, #0
 8003620:	60f9      	str	r1, [r7, #12]
 8003622:	2100      	movs	r1, #0
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003626:	2100      	movs	r1, #0
 8003628:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800362a:	4952      	ldr	r1, [pc, #328]	; (8003774 <HAL_RCC_GetSysClockFreq+0x160>)
 800362c:	6889      	ldr	r1, [r1, #8]
 800362e:	f001 010c 	and.w	r1, r1, #12
 8003632:	2908      	cmp	r1, #8
 8003634:	d00d      	beq.n	8003652 <HAL_RCC_GetSysClockFreq+0x3e>
 8003636:	2908      	cmp	r1, #8
 8003638:	f200 8094 	bhi.w	8003764 <HAL_RCC_GetSysClockFreq+0x150>
 800363c:	2900      	cmp	r1, #0
 800363e:	d002      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0x32>
 8003640:	2904      	cmp	r1, #4
 8003642:	d003      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x38>
 8003644:	e08e      	b.n	8003764 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003646:	4b4c      	ldr	r3, [pc, #304]	; (8003778 <HAL_RCC_GetSysClockFreq+0x164>)
 8003648:	60bb      	str	r3, [r7, #8]
       break;
 800364a:	e08e      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800364c:	4b4b      	ldr	r3, [pc, #300]	; (800377c <HAL_RCC_GetSysClockFreq+0x168>)
 800364e:	60bb      	str	r3, [r7, #8]
      break;
 8003650:	e08b      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003652:	4948      	ldr	r1, [pc, #288]	; (8003774 <HAL_RCC_GetSysClockFreq+0x160>)
 8003654:	6849      	ldr	r1, [r1, #4]
 8003656:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800365a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800365c:	4945      	ldr	r1, [pc, #276]	; (8003774 <HAL_RCC_GetSysClockFreq+0x160>)
 800365e:	6849      	ldr	r1, [r1, #4]
 8003660:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003664:	2900      	cmp	r1, #0
 8003666:	d024      	beq.n	80036b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003668:	4942      	ldr	r1, [pc, #264]	; (8003774 <HAL_RCC_GetSysClockFreq+0x160>)
 800366a:	6849      	ldr	r1, [r1, #4]
 800366c:	0989      	lsrs	r1, r1, #6
 800366e:	4608      	mov	r0, r1
 8003670:	f04f 0100 	mov.w	r1, #0
 8003674:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003678:	f04f 0500 	mov.w	r5, #0
 800367c:	ea00 0204 	and.w	r2, r0, r4
 8003680:	ea01 0305 	and.w	r3, r1, r5
 8003684:	493d      	ldr	r1, [pc, #244]	; (800377c <HAL_RCC_GetSysClockFreq+0x168>)
 8003686:	fb01 f003 	mul.w	r0, r1, r3
 800368a:	2100      	movs	r1, #0
 800368c:	fb01 f102 	mul.w	r1, r1, r2
 8003690:	1844      	adds	r4, r0, r1
 8003692:	493a      	ldr	r1, [pc, #232]	; (800377c <HAL_RCC_GetSysClockFreq+0x168>)
 8003694:	fba2 0101 	umull	r0, r1, r2, r1
 8003698:	1863      	adds	r3, r4, r1
 800369a:	4619      	mov	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	461a      	mov	r2, r3
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	f7fc fd96 	bl	80001d4 <__aeabi_uldivmod>
 80036a8:	4602      	mov	r2, r0
 80036aa:	460b      	mov	r3, r1
 80036ac:	4613      	mov	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e04a      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b2:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_RCC_GetSysClockFreq+0x160>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	099b      	lsrs	r3, r3, #6
 80036b8:	461a      	mov	r2, r3
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036c2:	f04f 0100 	mov.w	r1, #0
 80036c6:	ea02 0400 	and.w	r4, r2, r0
 80036ca:	ea03 0501 	and.w	r5, r3, r1
 80036ce:	4620      	mov	r0, r4
 80036d0:	4629      	mov	r1, r5
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	014b      	lsls	r3, r1, #5
 80036dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036e0:	0142      	lsls	r2, r0, #5
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	1b00      	subs	r0, r0, r4
 80036e8:	eb61 0105 	sbc.w	r1, r1, r5
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	018b      	lsls	r3, r1, #6
 80036f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036fa:	0182      	lsls	r2, r0, #6
 80036fc:	1a12      	subs	r2, r2, r0
 80036fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003702:	f04f 0000 	mov.w	r0, #0
 8003706:	f04f 0100 	mov.w	r1, #0
 800370a:	00d9      	lsls	r1, r3, #3
 800370c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003710:	00d0      	lsls	r0, r2, #3
 8003712:	4602      	mov	r2, r0
 8003714:	460b      	mov	r3, r1
 8003716:	1912      	adds	r2, r2, r4
 8003718:	eb45 0303 	adc.w	r3, r5, r3
 800371c:	f04f 0000 	mov.w	r0, #0
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	0299      	lsls	r1, r3, #10
 8003726:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800372a:	0290      	lsls	r0, r2, #10
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	461a      	mov	r2, r3
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	f7fc fd4a 	bl	80001d4 <__aeabi_uldivmod>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4613      	mov	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003748:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_RCC_GetSysClockFreq+0x160>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	f003 0303 	and.w	r3, r3, #3
 8003752:	3301      	adds	r3, #1
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003760:	60bb      	str	r3, [r7, #8]
      break;
 8003762:	e002      	b.n	800376a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <HAL_RCC_GetSysClockFreq+0x164>)
 8003766:	60bb      	str	r3, [r7, #8]
      break;
 8003768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376a:	68bb      	ldr	r3, [r7, #8]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bdb0      	pop	{r4, r5, r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	017d7840 	.word	0x017d7840

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	; (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	2000000c 	.word	0x2000000c

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	080075f0 	.word	0x080075f0

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffdc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	; (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	080075f0 	.word	0x080075f0

080037e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e03f      	b.n	800387a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fd fa26 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800382a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f829 	bl	8003884 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003840:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003850:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68da      	ldr	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003860:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003888:	b09f      	sub	sp, #124	; 0x7c
 800388a:	af00      	add	r7, sp, #0
 800388c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800388e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389a:	68d9      	ldr	r1, [r3, #12]
 800389c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	ea40 0301 	orr.w	r3, r0, r1
 80038a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	431a      	orrs	r2, r3
 80038b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80038be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038c8:	f021 010c 	bic.w	r1, r1, #12
 80038cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038d2:	430b      	orrs	r3, r1
 80038d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e2:	6999      	ldr	r1, [r3, #24]
 80038e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	ea40 0301 	orr.w	r3, r0, r1
 80038ec:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	4bc5      	ldr	r3, [pc, #788]	; (8003c08 <UART_SetConfig+0x384>)
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d004      	beq.n	8003902 <UART_SetConfig+0x7e>
 80038f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	4bc3      	ldr	r3, [pc, #780]	; (8003c0c <UART_SetConfig+0x388>)
 80038fe:	429a      	cmp	r2, r3
 8003900:	d103      	bne.n	800390a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003902:	f7ff ff5d 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 8003906:	6778      	str	r0, [r7, #116]	; 0x74
 8003908:	e002      	b.n	8003910 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800390a:	f7ff ff45 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 800390e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003918:	f040 80b6 	bne.w	8003a88 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800391c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800391e:	461c      	mov	r4, r3
 8003920:	f04f 0500 	mov.w	r5, #0
 8003924:	4622      	mov	r2, r4
 8003926:	462b      	mov	r3, r5
 8003928:	1891      	adds	r1, r2, r2
 800392a:	6439      	str	r1, [r7, #64]	; 0x40
 800392c:	415b      	adcs	r3, r3
 800392e:	647b      	str	r3, [r7, #68]	; 0x44
 8003930:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003934:	1912      	adds	r2, r2, r4
 8003936:	eb45 0303 	adc.w	r3, r5, r3
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	00d9      	lsls	r1, r3, #3
 8003944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003948:	00d0      	lsls	r0, r2, #3
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	1911      	adds	r1, r2, r4
 8003950:	6639      	str	r1, [r7, #96]	; 0x60
 8003952:	416b      	adcs	r3, r5
 8003954:	667b      	str	r3, [r7, #100]	; 0x64
 8003956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	461a      	mov	r2, r3
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	1891      	adds	r1, r2, r2
 8003962:	63b9      	str	r1, [r7, #56]	; 0x38
 8003964:	415b      	adcs	r3, r3
 8003966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003968:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800396c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003970:	f7fc fc30 	bl	80001d4 <__aeabi_uldivmod>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4ba5      	ldr	r3, [pc, #660]	; (8003c10 <UART_SetConfig+0x38c>)
 800397a:	fba3 2302 	umull	r2, r3, r3, r2
 800397e:	095b      	lsrs	r3, r3, #5
 8003980:	011e      	lsls	r6, r3, #4
 8003982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003984:	461c      	mov	r4, r3
 8003986:	f04f 0500 	mov.w	r5, #0
 800398a:	4622      	mov	r2, r4
 800398c:	462b      	mov	r3, r5
 800398e:	1891      	adds	r1, r2, r2
 8003990:	6339      	str	r1, [r7, #48]	; 0x30
 8003992:	415b      	adcs	r3, r3
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
 8003996:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800399a:	1912      	adds	r2, r2, r4
 800399c:	eb45 0303 	adc.w	r3, r5, r3
 80039a0:	f04f 0000 	mov.w	r0, #0
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	00d9      	lsls	r1, r3, #3
 80039aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039ae:	00d0      	lsls	r0, r2, #3
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	1911      	adds	r1, r2, r4
 80039b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80039b8:	416b      	adcs	r3, r5
 80039ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	461a      	mov	r2, r3
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	1891      	adds	r1, r2, r2
 80039c8:	62b9      	str	r1, [r7, #40]	; 0x28
 80039ca:	415b      	adcs	r3, r3
 80039cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039d2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80039d6:	f7fc fbfd 	bl	80001d4 <__aeabi_uldivmod>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4b8c      	ldr	r3, [pc, #560]	; (8003c10 <UART_SetConfig+0x38c>)
 80039e0:	fba3 1302 	umull	r1, r3, r3, r2
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	2164      	movs	r1, #100	; 0x64
 80039e8:	fb01 f303 	mul.w	r3, r1, r3
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	3332      	adds	r3, #50	; 0x32
 80039f2:	4a87      	ldr	r2, [pc, #540]	; (8003c10 <UART_SetConfig+0x38c>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	095b      	lsrs	r3, r3, #5
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a00:	441e      	add	r6, r3
 8003a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a04:	4618      	mov	r0, r3
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	1894      	adds	r4, r2, r2
 8003a10:	623c      	str	r4, [r7, #32]
 8003a12:	415b      	adcs	r3, r3
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a1a:	1812      	adds	r2, r2, r0
 8003a1c:	eb41 0303 	adc.w	r3, r1, r3
 8003a20:	f04f 0400 	mov.w	r4, #0
 8003a24:	f04f 0500 	mov.w	r5, #0
 8003a28:	00dd      	lsls	r5, r3, #3
 8003a2a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a2e:	00d4      	lsls	r4, r2, #3
 8003a30:	4622      	mov	r2, r4
 8003a32:	462b      	mov	r3, r5
 8003a34:	1814      	adds	r4, r2, r0
 8003a36:	653c      	str	r4, [r7, #80]	; 0x50
 8003a38:	414b      	adcs	r3, r1
 8003a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	461a      	mov	r2, r3
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	1891      	adds	r1, r2, r2
 8003a48:	61b9      	str	r1, [r7, #24]
 8003a4a:	415b      	adcs	r3, r3
 8003a4c:	61fb      	str	r3, [r7, #28]
 8003a4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a52:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003a56:	f7fc fbbd 	bl	80001d4 <__aeabi_uldivmod>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4b6c      	ldr	r3, [pc, #432]	; (8003c10 <UART_SetConfig+0x38c>)
 8003a60:	fba3 1302 	umull	r1, r3, r3, r2
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	2164      	movs	r1, #100	; 0x64
 8003a68:	fb01 f303 	mul.w	r3, r1, r3
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	3332      	adds	r3, #50	; 0x32
 8003a72:	4a67      	ldr	r2, [pc, #412]	; (8003c10 <UART_SetConfig+0x38c>)
 8003a74:	fba2 2303 	umull	r2, r3, r2, r3
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	f003 0207 	and.w	r2, r3, #7
 8003a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4432      	add	r2, r6
 8003a84:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a86:	e0b9      	b.n	8003bfc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a8a:	461c      	mov	r4, r3
 8003a8c:	f04f 0500 	mov.w	r5, #0
 8003a90:	4622      	mov	r2, r4
 8003a92:	462b      	mov	r3, r5
 8003a94:	1891      	adds	r1, r2, r2
 8003a96:	6139      	str	r1, [r7, #16]
 8003a98:	415b      	adcs	r3, r3
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003aa0:	1912      	adds	r2, r2, r4
 8003aa2:	eb45 0303 	adc.w	r3, r5, r3
 8003aa6:	f04f 0000 	mov.w	r0, #0
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	00d9      	lsls	r1, r3, #3
 8003ab0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ab4:	00d0      	lsls	r0, r2, #3
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	eb12 0804 	adds.w	r8, r2, r4
 8003abe:	eb43 0905 	adc.w	r9, r3, r5
 8003ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	f04f 0300 	mov.w	r3, #0
 8003ad4:	008b      	lsls	r3, r1, #2
 8003ad6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ada:	0082      	lsls	r2, r0, #2
 8003adc:	4640      	mov	r0, r8
 8003ade:	4649      	mov	r1, r9
 8003ae0:	f7fc fb78 	bl	80001d4 <__aeabi_uldivmod>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4b49      	ldr	r3, [pc, #292]	; (8003c10 <UART_SetConfig+0x38c>)
 8003aea:	fba3 2302 	umull	r2, r3, r3, r2
 8003aee:	095b      	lsrs	r3, r3, #5
 8003af0:	011e      	lsls	r6, r3, #4
 8003af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af4:	4618      	mov	r0, r3
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	1894      	adds	r4, r2, r2
 8003b00:	60bc      	str	r4, [r7, #8]
 8003b02:	415b      	adcs	r3, r3
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b0a:	1812      	adds	r2, r2, r0
 8003b0c:	eb41 0303 	adc.w	r3, r1, r3
 8003b10:	f04f 0400 	mov.w	r4, #0
 8003b14:	f04f 0500 	mov.w	r5, #0
 8003b18:	00dd      	lsls	r5, r3, #3
 8003b1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b1e:	00d4      	lsls	r4, r2, #3
 8003b20:	4622      	mov	r2, r4
 8003b22:	462b      	mov	r3, r5
 8003b24:	1814      	adds	r4, r2, r0
 8003b26:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b28:	414b      	adcs	r3, r1
 8003b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f04f 0100 	mov.w	r1, #0
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	008b      	lsls	r3, r1, #2
 8003b40:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b44:	0082      	lsls	r2, r0, #2
 8003b46:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003b4a:	f7fc fb43 	bl	80001d4 <__aeabi_uldivmod>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <UART_SetConfig+0x38c>)
 8003b54:	fba3 1302 	umull	r1, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2164      	movs	r1, #100	; 0x64
 8003b5c:	fb01 f303 	mul.w	r3, r1, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	3332      	adds	r3, #50	; 0x32
 8003b66:	4a2a      	ldr	r2, [pc, #168]	; (8003c10 <UART_SetConfig+0x38c>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b72:	441e      	add	r6, r3
 8003b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b76:	4618      	mov	r0, r3
 8003b78:	f04f 0100 	mov.w	r1, #0
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	1894      	adds	r4, r2, r2
 8003b82:	603c      	str	r4, [r7, #0]
 8003b84:	415b      	adcs	r3, r3
 8003b86:	607b      	str	r3, [r7, #4]
 8003b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b8c:	1812      	adds	r2, r2, r0
 8003b8e:	eb41 0303 	adc.w	r3, r1, r3
 8003b92:	f04f 0400 	mov.w	r4, #0
 8003b96:	f04f 0500 	mov.w	r5, #0
 8003b9a:	00dd      	lsls	r5, r3, #3
 8003b9c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ba0:	00d4      	lsls	r4, r2, #3
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	eb12 0a00 	adds.w	sl, r2, r0
 8003baa:	eb43 0b01 	adc.w	fp, r3, r1
 8003bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f04f 0100 	mov.w	r1, #0
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	008b      	lsls	r3, r1, #2
 8003bc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003bc6:	0082      	lsls	r2, r0, #2
 8003bc8:	4650      	mov	r0, sl
 8003bca:	4659      	mov	r1, fp
 8003bcc:	f7fc fb02 	bl	80001d4 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <UART_SetConfig+0x38c>)
 8003bd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2164      	movs	r1, #100	; 0x64
 8003bde:	fb01 f303 	mul.w	r3, r1, r3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	3332      	adds	r3, #50	; 0x32
 8003be8:	4a09      	ldr	r2, [pc, #36]	; (8003c10 <UART_SetConfig+0x38c>)
 8003bea:	fba2 2303 	umull	r2, r3, r2, r3
 8003bee:	095b      	lsrs	r3, r3, #5
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4432      	add	r2, r6
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	377c      	adds	r7, #124	; 0x7c
 8003c00:	46bd      	mov	sp, r7
 8003c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c06:	bf00      	nop
 8003c08:	40011000 	.word	0x40011000
 8003c0c:	40011400 	.word	0x40011400
 8003c10:	51eb851f 	.word	0x51eb851f

08003c14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c14:	b084      	sub	sp, #16
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	f107 001c 	add.w	r0, r7, #28
 8003c22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d122      	bne.n	8003c72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f94a 	bl	8003f00 <USB_CoreReset>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	73fb      	strb	r3, [r7, #15]
 8003c70:	e01a      	b.n	8003ca8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f93e 	bl	8003f00 <USB_CoreReset>
 8003c84:	4603      	mov	r3, r0
 8003c86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
 8003c9a:	e005      	b.n	8003ca8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10b      	bne.n	8003cc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f043 0206 	orr.w	r2, r3, #6
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cd2:	b004      	add	sp, #16
 8003cd4:	4770      	bx	lr

08003cd6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f043 0201 	orr.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f023 0201 	bic.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	460b      	mov	r3, r1
 8003d24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d106      	bne.n	8003d46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]
 8003d44:	e00b      	b.n	8003d5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d106      	bne.n	8003d5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]
 8003d58:	e001      	b.n	8003d5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e003      	b.n	8003d66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003d5e:	2032      	movs	r0, #50	; 0x32
 8003d60:	f7fd f8a8 	bl	8000eb4 <HAL_Delay>

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	019b      	lsls	r3, r3, #6
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <USB_FlushTxFifo+0x48>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e006      	b.n	8003daa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d0f0      	beq.n	8003d8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	00030d40 	.word	0x00030d40

08003dbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2210      	movs	r2, #16
 8003dcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a09      	ldr	r2, [pc, #36]	; (8003dfc <USB_FlushRxFifo+0x40>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e006      	b.n	8003dee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b10      	cmp	r3, #16
 8003dea:	d0f0      	beq.n	8003dce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	00030d40 	.word	0x00030d40

08003e00 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	460b      	mov	r3, r1
 8003e10:	71fb      	strb	r3, [r7, #7]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003e1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d11a      	bne.n	8003e5c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e26:	88bb      	ldrh	r3, [r7, #4]
 8003e28:	3303      	adds	r3, #3
 8003e2a:	089b      	lsrs	r3, r3, #2
 8003e2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
 8003e32:	e00f      	b.n	8003e54 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	031a      	lsls	r2, r3, #12
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e40:	461a      	mov	r2, r3
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	3301      	adds	r3, #1
 8003e52:	61bb      	str	r3, [r7, #24]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d3eb      	bcc.n	8003e34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3724      	adds	r7, #36	; 0x24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b089      	sub	sp, #36	; 0x24
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	4613      	mov	r3, r2
 8003e76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003e80:	88fb      	ldrh	r3, [r7, #6]
 8003e82:	3303      	adds	r3, #3
 8003e84:	089b      	lsrs	r3, r3, #2
 8003e86:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61bb      	str	r3, [r7, #24]
 8003e8c:	e00b      	b.n	8003ea6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	601a      	str	r2, [r3, #0]
    pDest++;
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	3304      	adds	r3, #4
 8003e9e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	61bb      	str	r3, [r7, #24]
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d3ef      	bcc.n	8003e8e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003eae:	69fb      	ldr	r3, [r7, #28]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3724      	adds	r7, #36	; 0x24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0301 	and.w	r3, r3, #1
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <USB_CoreReset+0x64>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e01b      	b.n	8003f56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	daf2      	bge.n	8003f0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a09      	ldr	r2, [pc, #36]	; (8003f64 <USB_CoreReset+0x64>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d901      	bls.n	8003f48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e006      	b.n	8003f56 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d0f0      	beq.n	8003f36 <USB_CoreReset+0x36>

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	00030d40 	.word	0x00030d40

08003f68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f68:	b084      	sub	sp, #16
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	f107 001c 	add.w	r0, r7, #28
 8003f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f84:	461a      	mov	r2, r3
 8003f86:	2300      	movs	r3, #0
 8003f88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d018      	beq.n	8003fec <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10a      	bne.n	8003fd6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fce:	f043 0304 	orr.w	r3, r3, #4
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	e014      	b.n	8004000 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e009      	b.n	8004000 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ffa:	f023 0304 	bic.w	r3, r3, #4
 8003ffe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004000:	2110      	movs	r1, #16
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f7ff feb4 	bl	8003d70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fed7 	bl	8003dbc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e015      	b.n	8004040 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	4413      	add	r3, r2
 800401c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004020:	461a      	mov	r2, r3
 8004022:	f04f 33ff 	mov.w	r3, #4294967295
 8004026:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	461a      	mov	r2, r3
 8004036:	2300      	movs	r3, #0
 8004038:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3301      	adds	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	429a      	cmp	r2, r3
 8004046:	d3e5      	bcc.n	8004014 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004048:	2101      	movs	r1, #1
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f8ac 	bl	80041a8 <USB_DriveVbus>

  HAL_Delay(200U);
 8004050:	20c8      	movs	r0, #200	; 0xc8
 8004052:	f7fc ff2f 	bl	8000eb4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f04f 32ff 	mov.w	r2, #4294967295
 8004062:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00b      	beq.n	8004088 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004076:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a14      	ldr	r2, [pc, #80]	; (80040cc <USB_HostInit+0x164>)
 800407c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a13      	ldr	r2, [pc, #76]	; (80040d0 <USB_HostInit+0x168>)
 8004082:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004086:	e009      	b.n	800409c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2280      	movs	r2, #128	; 0x80
 800408c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <USB_HostInit+0x16c>)
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <USB_HostInit+0x170>)
 8004098:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d105      	bne.n	80040ae <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f043 0210 	orr.w	r2, r3, #16
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <USB_HostInit+0x174>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040c6:	b004      	add	sp, #16
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	01000200 	.word	0x01000200
 80040d0:	00e00300 	.word	0x00e00300
 80040d4:	00600080 	.word	0x00600080
 80040d8:	004000e0 	.word	0x004000e0
 80040dc:	a3200008 	.word	0xa3200008

080040e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	68f9      	ldr	r1, [r7, #12]
 8004114:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d107      	bne.n	8004132 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004128:	461a      	mov	r2, r3
 800412a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800412e:	6053      	str	r3, [r2, #4]
 8004130:	e009      	b.n	8004146 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d106      	bne.n	8004146 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800413e:	461a      	mov	r2, r3
 8004140:	f241 7370 	movw	r3, #6000	; 0x1770
 8004144:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004174:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800417e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004182:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004184:	2064      	movs	r0, #100	; 0x64
 8004186:	f7fc fe95 	bl	8000eb4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004192:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004196:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004198:	200a      	movs	r0, #10
 800419a:	f7fc fe8b 	bl	8000eb4 <HAL_Delay>

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80041cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <USB_DriveVbus+0x44>
 80041d8:	78fb      	ldrb	r3, [r7, #3]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d106      	bne.n	80041ec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80041e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041ea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f6:	d109      	bne.n	800420c <USB_DriveVbus+0x64>
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d106      	bne.n	800420c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004206:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800420a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800421a:	b480      	push	{r7}
 800421c:	b085      	sub	sp, #20
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	0c5b      	lsrs	r3, r3, #17
 8004238:	f003 0303 	and.w	r3, r3, #3
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	b29b      	uxth	r3, r3
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	4608      	mov	r0, r1
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	4603      	mov	r3, r0
 800427c:	70fb      	strb	r3, [r7, #3]
 800427e:	460b      	mov	r3, r1
 8004280:	70bb      	strb	r3, [r7, #2]
 8004282:	4613      	mov	r3, r2
 8004284:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	461a      	mov	r2, r3
 800429c:	f04f 33ff 	mov.w	r3, #4294967295
 80042a0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80042a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042a6:	2b03      	cmp	r3, #3
 80042a8:	d87e      	bhi.n	80043a8 <USB_HC_Init+0x13c>
 80042aa:	a201      	add	r2, pc, #4	; (adr r2, 80042b0 <USB_HC_Init+0x44>)
 80042ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	0800436b 	.word	0x0800436b
 80042b8:	080042c1 	.word	0x080042c1
 80042bc:	0800432d 	.word	0x0800432d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	015a      	lsls	r2, r3, #5
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	4413      	add	r3, r2
 80042c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042cc:	461a      	mov	r2, r3
 80042ce:	f240 439d 	movw	r3, #1181	; 0x49d
 80042d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80042d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	da10      	bge.n	80042fe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	0151      	lsls	r1, r2, #5
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	440a      	add	r2, r1
 80042f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80042fc:	e057      	b.n	80043ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d051      	beq.n	80043ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	0151      	lsls	r1, r2, #5
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	440a      	add	r2, r1
 8004320:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004324:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004328:	60d3      	str	r3, [r2, #12]
      break;
 800432a:	e040      	b.n	80043ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	4413      	add	r3, r2
 8004334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004338:	461a      	mov	r2, r3
 800433a:	f240 639d 	movw	r3, #1693	; 0x69d
 800433e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004340:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004344:	2b00      	cmp	r3, #0
 8004346:	da34      	bge.n	80043b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	0151      	lsls	r1, r2, #5
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	440a      	add	r2, r1
 800435e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004366:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004368:	e023      	b.n	80043b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004376:	461a      	mov	r2, r3
 8004378:	f240 2325 	movw	r3, #549	; 0x225
 800437c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800437e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da17      	bge.n	80043b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	0151      	lsls	r1, r2, #5
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	440a      	add	r2, r1
 800439c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80043a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80043a6:	e006      	b.n	80043b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	77fb      	strb	r3, [r7, #31]
      break;
 80043ac:	e004      	b.n	80043b8 <USB_HC_Init+0x14c>
      break;
 80043ae:	bf00      	nop
 80043b0:	e002      	b.n	80043b8 <USB_HC_Init+0x14c>
      break;
 80043b2:	bf00      	nop
 80043b4:	e000      	b.n	80043b8 <USB_HC_Init+0x14c>
      break;
 80043b6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043be:	699a      	ldr	r2, [r3, #24]
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	2101      	movs	r1, #1
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	6939      	ldr	r1, [r7, #16]
 80043ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80043d2:	4313      	orrs	r3, r2
 80043d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80043e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	da03      	bge.n	80043f2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80043ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	e001      	b.n	80043f6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff ff0f 	bl	800421a <USB_GetHostSpeed>
 80043fc:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80043fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004402:	2b02      	cmp	r3, #2
 8004404:	d106      	bne.n	8004414 <USB_HC_Init+0x1a8>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d003      	beq.n	8004414 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800440c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	e001      	b.n	8004418 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004418:	787b      	ldrb	r3, [r7, #1]
 800441a:	059b      	lsls	r3, r3, #22
 800441c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004420:	78bb      	ldrb	r3, [r7, #2]
 8004422:	02db      	lsls	r3, r3, #11
 8004424:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004428:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800442a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800442e:	049b      	lsls	r3, r3, #18
 8004430:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004434:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004436:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004438:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800443c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	0159      	lsls	r1, r3, #5
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	440b      	add	r3, r1
 800444a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004454:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004456:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800445a:	2b03      	cmp	r3, #3
 800445c:	d10f      	bne.n	800447e <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800445e:	78fb      	ldrb	r3, [r7, #3]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	0151      	lsls	r1, r2, #5
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	440a      	add	r2, r1
 8004474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800447c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800447e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3720      	adds	r7, #32
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	; 0x30
 800448c:	af02      	add	r7, sp, #8
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	4613      	mov	r3, r2
 8004494:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80044a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044a4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d02d      	beq.n	800450e <USB_HC_StartXfer+0x86>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	791b      	ldrb	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d129      	bne.n	800450e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d117      	bne.n	80044f0 <USB_HC_StartXfer+0x68>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	79db      	ldrb	r3, [r3, #7]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <USB_HC_StartXfer+0x48>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	79db      	ldrb	r3, [r3, #7]
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d10f      	bne.n	80044f0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ee:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <USB_HC_StartXfer+0x86>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	795b      	ldrb	r3, [r3, #5]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d107      	bne.n	800450e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	785b      	ldrb	r3, [r3, #1]
 8004502:	4619      	mov	r1, r3
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 fa2f 	bl	8004968 <USB_DoPing>
      return HAL_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e0f8      	b.n	8004700 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d018      	beq.n	8004548 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	8912      	ldrh	r2, [r2, #8]
 800451e:	4413      	add	r3, r2
 8004520:	3b01      	subs	r3, #1
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	8912      	ldrh	r2, [r2, #8]
 8004526:	fbb3 f3f2 	udiv	r3, r3, r2
 800452a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800452c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800452e:	8b7b      	ldrh	r3, [r7, #26]
 8004530:	429a      	cmp	r2, r3
 8004532:	d90b      	bls.n	800454c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004534:	8b7b      	ldrh	r3, [r7, #26]
 8004536:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004538:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	8912      	ldrh	r2, [r2, #8]
 800453e:	fb02 f203 	mul.w	r2, r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	611a      	str	r2, [r3, #16]
 8004546:	e001      	b.n	800454c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004548:	2301      	movs	r3, #1
 800454a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	78db      	ldrb	r3, [r3, #3]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	8912      	ldrh	r2, [r2, #8]
 800455a:	fb02 f203 	mul.w	r2, r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	611a      	str	r2, [r3, #16]
 8004562:	e003      	b.n	800456c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004574:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004576:	04d9      	lsls	r1, r3, #19
 8004578:	4b63      	ldr	r3, [pc, #396]	; (8004708 <USB_HC_StartXfer+0x280>)
 800457a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800457c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	7a9b      	ldrb	r3, [r3, #10]
 8004582:	075b      	lsls	r3, r3, #29
 8004584:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004588:	69f9      	ldr	r1, [r7, #28]
 800458a:	0148      	lsls	r0, r1, #5
 800458c:	6a39      	ldr	r1, [r7, #32]
 800458e:	4401      	add	r1, r0
 8004590:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004594:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8004596:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	68d9      	ldr	r1, [r3, #12]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ae:	460a      	mov	r2, r1
 80045b0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	bf0c      	ite	eq
 80045c2:	2301      	moveq	r3, #1
 80045c4:	2300      	movne	r3, #0
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	6a3b      	ldr	r3, [r7, #32]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	0151      	lsls	r1, r2, #5
 80045dc:	6a3a      	ldr	r2, [r7, #32]
 80045de:	440a      	add	r2, r1
 80045e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80045e8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	4413      	add	r3, r2
 80045f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	7e7b      	ldrb	r3, [r7, #25]
 80045fa:	075b      	lsls	r3, r3, #29
 80045fc:	69f9      	ldr	r1, [r7, #28]
 80045fe:	0148      	lsls	r0, r1, #5
 8004600:	6a39      	ldr	r1, [r7, #32]
 8004602:	4401      	add	r1, r0
 8004604:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004622:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	78db      	ldrb	r3, [r3, #3]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	e003      	b.n	800463e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800463c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004644:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	4413      	add	r3, r2
 800464e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004652:	461a      	mov	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	e04e      	b.n	8004700 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	78db      	ldrb	r3, [r3, #3]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d149      	bne.n	80046fe <USB_HC_StartXfer+0x276>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d045      	beq.n	80046fe <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	79db      	ldrb	r3, [r3, #7]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d830      	bhi.n	80046dc <USB_HC_StartXfer+0x254>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <USB_HC_StartXfer+0x1f8>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	08004691 	.word	0x08004691
 8004684:	080046b5 	.word	0x080046b5
 8004688:	08004691 	.word	0x08004691
 800468c:	080046b5 	.word	0x080046b5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	3303      	adds	r3, #3
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800469a:	8afa      	ldrh	r2, [r7, #22]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d91c      	bls.n	80046e0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80046b2:	e015      	b.n	80046e0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	3303      	adds	r3, #3
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80046be:	8afa      	ldrh	r2, [r7, #22]
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d90a      	bls.n	80046e4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	619a      	str	r2, [r3, #24]
        }
        break;
 80046da:	e003      	b.n	80046e4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80046dc:	bf00      	nop
 80046de:	e002      	b.n	80046e6 <USB_HC_StartXfer+0x25e>
        break;
 80046e0:	bf00      	nop
 80046e2:	e000      	b.n	80046e6 <USB_HC_StartXfer+0x25e>
        break;
 80046e4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	68d9      	ldr	r1, [r3, #12]
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	785a      	ldrb	r2, [r3, #1]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2000      	movs	r0, #0
 80046f6:	9000      	str	r0, [sp, #0]
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7ff fb81 	bl	8003e00 <USB_WritePacket>
  }

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3728      	adds	r7, #40	; 0x28
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	1ff80000 	.word	0x1ff80000

0800470c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	b29b      	uxth	r3, r3
}
 8004722:	4618      	mov	r0, r3
 8004724:	3714      	adds	r7, #20
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr

0800472e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800472e:	b480      	push	{r7}
 8004730:	b089      	sub	sp, #36	; 0x24
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800473e:	78fb      	ldrb	r3, [r7, #3]
 8004740:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	4413      	add	r3, r2
 800474e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	0c9b      	lsrs	r3, r3, #18
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	4413      	add	r3, r2
 8004764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	0fdb      	lsrs	r3, r3, #31
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b20      	cmp	r3, #32
 800477c:	d104      	bne.n	8004788 <USB_HC_Halt+0x5a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d101      	bne.n	8004788 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8004784:	2300      	movs	r3, #0
 8004786:	e0e8      	b.n	800495a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <USB_HC_Halt+0x66>
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d173      	bne.n	800487c <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	4413      	add	r3, r2
 800479c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 80cb 	bne.w	8004958 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d143      	bne.n	8004856 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80047e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047ec:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	440a      	add	r2, r1
 8004804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800480c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	015a      	lsls	r2, r3, #5
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	4413      	add	r3, r2
 8004816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	0151      	lsls	r1, r2, #5
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	440a      	add	r2, r1
 8004824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004828:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800482c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3301      	adds	r3, #1
 8004832:	61fb      	str	r3, [r7, #28]
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800483a:	d81d      	bhi.n	8004878 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	4413      	add	r3, r2
 8004844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800484e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004852:	d0ec      	beq.n	800482e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004854:	e080      	b.n	8004958 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	4413      	add	r3, r2
 800485e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	0151      	lsls	r1, r2, #5
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	440a      	add	r2, r1
 800486c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004874:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004876:	e06f      	b.n	8004958 <USB_HC_Halt+0x22a>
            break;
 8004878:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800487a:	e06d      	b.n	8004958 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	4413      	add	r3, r2
 8004884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	440a      	add	r2, r1
 8004892:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004896:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800489a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d143      	bne.n	8004934 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	0151      	lsls	r1, r2, #5
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	440a      	add	r2, r1
 80048c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80048ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	0151      	lsls	r1, r2, #5
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	440a      	add	r2, r1
 80048e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048ea:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	015a      	lsls	r2, r3, #5
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	4413      	add	r3, r2
 80048f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	0151      	lsls	r1, r2, #5
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	440a      	add	r2, r1
 8004902:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004906:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800490a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	3301      	adds	r3, #1
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004918:	d81d      	bhi.n	8004956 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800492c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004930:	d0ec      	beq.n	800490c <USB_HC_Halt+0x1de>
 8004932:	e011      	b.n	8004958 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	4413      	add	r3, r2
 800493c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	440a      	add	r2, r1
 800494a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800494e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	e000      	b.n	8004958 <USB_HC_Halt+0x22a>
          break;
 8004956:	bf00      	nop
    }
  }

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800497c:	2301      	movs	r3, #1
 800497e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	04da      	lsls	r2, r3, #19
 8004984:	4b15      	ldr	r3, [pc, #84]	; (80049dc <USB_DoPing+0x74>)
 8004986:	4013      	ands	r3, r2
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	440a      	add	r2, r1
 8004990:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004994:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004998:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049b0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049b8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c6:	461a      	mov	r2, r3
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	1ff80000 	.word	0x1ff80000

080049e0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff f981 	bl	8003cf8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80049f6:	2110      	movs	r1, #16
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff f9b9 	bl	8003d70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff f9dc 	bl	8003dbc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004a04:	2300      	movs	r3, #0
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	e01f      	b.n	8004a4a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	015a      	lsls	r2, r3, #5
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4413      	add	r3, r2
 8004a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a20:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a28:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a30:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3e:	461a      	mov	r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	3301      	adds	r3, #1
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b0f      	cmp	r3, #15
 8004a4e:	d9dc      	bls.n	8004a0a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	e034      	b.n	8004ac0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a6c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a74:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a7c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	3301      	adds	r3, #1
 8004a94:	617b      	str	r3, [r7, #20]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a9c:	d80c      	bhi.n	8004ab8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab4:	d0ec      	beq.n	8004a90 <USB_StopHost+0xb0>
 8004ab6:	e000      	b.n	8004aba <USB_StopHost+0xda>
        break;
 8004ab8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3301      	adds	r3, #1
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	2b0f      	cmp	r3, #15
 8004ac4:	d9c7      	bls.n	8004a56 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004acc:	461a      	mov	r2, r3
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ada:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff f8fa 	bl	8003cd6 <USB_EnableGlobalInt>

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b08b      	sub	sp, #44	; 0x2c
 8004af0:	af04      	add	r7, sp, #16
 8004af2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint8_t max_ep;
  uint8_t num = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004afe:	7919      	ldrb	r1, [r3, #4]
 8004b00:	23ff      	movs	r3, #255	; 0xff
 8004b02:	2201      	movs	r2, #1
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 ff17 	bl	8005938 <USBH_FindInterface>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004b0e:	7dbb      	ldrb	r3, [r7, #22]
 8004b10:	2bff      	cmp	r3, #255	; 0xff
 8004b12:	d002      	beq.n	8004b1a <USBH_HID_InterfaceInit+0x2e>
 8004b14:	7dbb      	ldrb	r3, [r7, #22]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d901      	bls.n	8004b1e <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e108      	b.n	8004d30 <USBH_HID_InterfaceInit+0x244>
  }

  status = USBH_SelectInterface(phost, interface);
 8004b1e:	7dbb      	ldrb	r3, [r7, #22]
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 feec 	bl	8005900 <USBH_SelectInterface>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8004b2c:	7d7b      	ldrb	r3, [r7, #21]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8004b32:	2302      	movs	r3, #2
 8004b34:	e0fc      	b.n	8004d30 <USBH_HID_InterfaceInit+0x244>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004b3c:	2034      	movs	r0, #52	; 0x34
 8004b3e:	f002 fc53 	bl	80073e8 <malloc>
 8004b42:	4603      	mov	r3, r0
 8004b44:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8004b56:	2302      	movs	r3, #2
 8004b58:	e0ea      	b.n	8004d30 <USBH_HID_InterfaceInit+0x244>
  }

  /* Initialize hid handler */
  USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8004b5a:	2234      	movs	r2, #52	; 0x34
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	6938      	ldr	r0, [r7, #16]
 8004b60:	f002 fc52 	bl	8007408 <memset>

  HID_Handle->state = HID_ERROR;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2207      	movs	r2, #7
 8004b68:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8004b6a:	7dbb      	ldrb	r3, [r7, #22]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	211a      	movs	r1, #26
 8004b70:	fb01 f303 	mul.w	r3, r1, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d103      	bne.n	8004b88 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4a6d      	ldr	r2, [pc, #436]	; (8004d38 <USBH_HID_InterfaceInit+0x24c>)
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
 8004b86:	e010      	b.n	8004baa <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8004b88:	7dbb      	ldrb	r3, [r7, #22]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	211a      	movs	r1, #26
 8004b8e:	fb01 f303 	mul.w	r3, r1, r3
 8004b92:	4413      	add	r3, r2
 8004b94:	f203 3349 	addw	r3, r3, #841	; 0x349
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d103      	bne.n	8004ba6 <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4a66      	ldr	r2, [pc, #408]	; (8004d3c <USBH_HID_InterfaceInit+0x250>)
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ba4:	e001      	b.n	8004baa <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e0c2      	b.n	8004d30 <USBH_HID_InterfaceInit+0x244>
  }

  HID_Handle->state     = HID_INIT;
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	2200      	movs	r2, #0
 8004bae:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004bb6:	7dbb      	ldrb	r3, [r7, #22]
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	211a      	movs	r1, #26
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004bc6:	781a      	ldrb	r2, [r3, #0]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004bcc:	7dbb      	ldrb	r3, [r7, #22]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	211a      	movs	r1, #26
 8004bd2:	fb01 f303 	mul.w	r3, r1, r3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004bdc:	881a      	ldrh	r2, [r3, #0]
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8004be2:	7dbb      	ldrb	r3, [r7, #22]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	211a      	movs	r1, #26
 8004be8:	fb01 f303 	mul.w	r3, r1, r3
 8004bec:	4413      	add	r3, r2
 8004bee:	f203 3352 	addw	r3, r3, #850	; 0x352
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll  < HID_MIN_POLL)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	8b9b      	ldrh	r3, [r3, #28]
 8004bfe:	2b09      	cmp	r3, #9
 8004c00:	d802      	bhi.n	8004c08 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	220a      	movs	r2, #10
 8004c06:	839a      	strh	r2, [r3, #28]
  }

  /* Check fo available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8004c08:	7dbb      	ldrb	r3, [r7, #22]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	211a      	movs	r1, #26
 8004c0e:	fb01 f303 	mul.w	r3, r1, r3
 8004c12:	4413      	add	r3, r2
 8004c14:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	bf28      	it	cs
 8004c1e:	2302      	movcs	r3, #2
 8004c20:	73fb      	strb	r3, [r7, #15]
             phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8004c22:	2300      	movs	r3, #0
 8004c24:	75fb      	strb	r3, [r7, #23]
 8004c26:	e07d      	b.n	8004d24 <USBH_HID_InterfaceInit+0x238>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U)
 8004c28:	7dbb      	ldrb	r3, [r7, #22]
 8004c2a:	7df9      	ldrb	r1, [r7, #23]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	3101      	adds	r1, #1
 8004c30:	00c9      	lsls	r1, r1, #3
 8004c32:	201a      	movs	r0, #26
 8004c34:	fb00 f303 	mul.w	r3, r0, r3
 8004c38:	440b      	add	r3, r1
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da35      	bge.n	8004cb4 <USBH_HID_InterfaceInit+0x1c8>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004c48:	7dbb      	ldrb	r3, [r7, #22]
 8004c4a:	7df9      	ldrb	r1, [r7, #23]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	3101      	adds	r1, #1
 8004c50:	00c9      	lsls	r1, r1, #3
 8004c52:	201a      	movs	r0, #26
 8004c54:	fb00 f303 	mul.w	r3, r0, r3
 8004c58:	440b      	add	r3, r1
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	791b      	ldrb	r3, [r3, #4]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f002 f860 	bl	8006d32 <USBH_AllocPipe>
 8004c72:	4603      	mov	r3, r0
 8004c74:	461a      	mov	r2, r3
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	705a      	strb	r2, [r3, #1]

      /* Open pipe for IN endpoint */
      USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	7859      	ldrb	r1, [r3, #1]
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	7918      	ldrb	r0, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	8b12      	ldrh	r2, [r2, #24]
 8004c92:	9202      	str	r2, [sp, #8]
 8004c94:	2203      	movs	r2, #3
 8004c96:	9201      	str	r2, [sp, #4]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4623      	mov	r3, r4
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f002 f818 	bl	8006cd4 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f002 fb10 	bl	80072d2 <USBH_LL_SetToggle>
 8004cb2:	e034      	b.n	8004d1e <USBH_HID_InterfaceInit+0x232>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8004cb4:	7dbb      	ldrb	r3, [r7, #22]
 8004cb6:	7df9      	ldrb	r1, [r7, #23]
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	3101      	adds	r1, #1
 8004cbc:	00c9      	lsls	r1, r1, #3
 8004cbe:	201a      	movs	r0, #26
 8004cc0:	fb00 f303 	mul.w	r3, r0, r3
 8004cc4:	440b      	add	r3, r1
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f203 3346 	addw	r3, r3, #838	; 0x346
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	78db      	ldrb	r3, [r3, #3]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f002 f82a 	bl	8006d32 <USBH_AllocPipe>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	701a      	strb	r2, [r3, #0]

      /* Open pipe for OUT endpoint */
      USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	7819      	ldrb	r1, [r3, #0]
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	78d8      	ldrb	r0, [r3, #3]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	8b12      	ldrh	r2, [r2, #24]
 8004cfe:	9202      	str	r2, [sp, #8]
 8004d00:	2203      	movs	r2, #3
 8004d02:	9201      	str	r2, [sp, #4]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	4623      	mov	r3, r4
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 ffe2 	bl	8006cd4 <USBH_OpenPipe>
                    phost->device.speed, USB_EP_TYPE_INTR, HID_Handle->length);

      USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2200      	movs	r2, #0
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f002 fada 	bl	80072d2 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8004d1e:	7dfb      	ldrb	r3, [r7, #23]
 8004d20:	3301      	adds	r3, #1
 8004d22:	75fb      	strb	r3, [r7, #23]
 8004d24:	7dfa      	ldrb	r2, [r7, #23]
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	f4ff af7d 	bcc.w	8004c28 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd90      	pop	{r4, r7, pc}
 8004d38:	0800543d 	.word	0x0800543d
 8004d3c:	080054ed 	.word	0x080054ed

08004d40 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	785b      	ldrb	r3, [r3, #1]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00e      	beq.n	8004d78 <USBH_HID_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, HID_Handle->InPipe);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	785b      	ldrb	r3, [r3, #1]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f001 ffd6 	bl	8006d12 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->InPipe);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f002 f801 	bl	8006d74 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00e      	beq.n	8004d9e <USBH_HID_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f001 ffc3 	bl	8006d12 <USBH_ClosePipe>
    USBH_FreePipe(phost, HID_Handle->OutPipe);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	4619      	mov	r1, r3
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 ffee 	bl	8006d74 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
  }

  if (phost->pActiveClass->pData)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f002 fb20 	bl	80073f8 <free>
    phost->pActiveClass->pData = 0U;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	795b      	ldrb	r3, [r3, #5]
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d860      	bhi.n	8004eb0 <USBH_HID_ClassRequest+0xe4>
 8004dee:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <USBH_HID_ClassRequest+0x28>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004eb1 	.word	0x08004eb1
 8004dfc:	08004e27 	.word	0x08004e27
 8004e00:	08004e0d 	.word	0x08004e0d
 8004e04:	08004e51 	.word	0x08004e51
 8004e08:	08004e7b 	.word	0x08004e7b
  {
  case HID_REQ_INIT:
  case HID_REQ_GET_HID_DESC:

    USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	331c      	adds	r3, #28
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f000 f9cd 	bl	80051b8 <USBH_HID_ParseHIDDesc>

    HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2202      	movs	r2, #2
 8004e22:	715a      	strb	r2, [r3, #5]

    break;
 8004e24:	e04b      	b.n	8004ebe <USBH_HID_ClassRequest+0xf2>
  case HID_REQ_GET_REPORT_DESC:

    /* Get Report Desc */
    classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f930 	bl	8005092 <USBH_HID_GetHIDReportDescriptor>
 8004e32:	4603      	mov	r3, r0
 8004e34:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8004e36:	7bbb      	ldrb	r3, [r7, #14]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d103      	bne.n	8004e44 <USBH_HID_ClassRequest+0x78>
    {
      /* The descriptor is available in phost->device.Data */
      HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	2204      	movs	r2, #4
 8004e40:	715a      	strb	r2, [r3, #5]
    else
    {
      /* .. */
    }

    break;
 8004e42:	e037      	b.n	8004eb4 <USBH_HID_ClassRequest+0xe8>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004e44:	7bbb      	ldrb	r3, [r7, #14]
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d134      	bne.n	8004eb4 <USBH_HID_ClassRequest+0xe8>
      status = USBH_FAIL;
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8004e4e:	e031      	b.n	8004eb4 <USBH_HID_ClassRequest+0xe8>

  case HID_REQ_SET_IDLE:

    classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8004e50:	2200      	movs	r2, #0
 8004e52:	2100      	movs	r1, #0
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f935 	bl	80050c4 <USBH_HID_SetIdle>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73bb      	strb	r3, [r7, #14]

    /* set Idle */
    if (classReqStatus == USBH_OK)
 8004e5e:	7bbb      	ldrb	r3, [r7, #14]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <USBH_HID_ClassRequest+0xa0>
    {
      HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2205      	movs	r2, #5
 8004e68:	715a      	strb	r2, [r3, #5]
      if (classReqStatus == USBH_NOT_SUPPORTED)
      {
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
      }
    }
    break;
 8004e6a:	e025      	b.n	8004eb8 <USBH_HID_ClassRequest+0xec>
      if (classReqStatus == USBH_NOT_SUPPORTED)
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d122      	bne.n	8004eb8 <USBH_HID_ClassRequest+0xec>
        HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2205      	movs	r2, #5
 8004e76:	715a      	strb	r2, [r3, #5]
    break;
 8004e78:	e01e      	b.n	8004eb8 <USBH_HID_ClassRequest+0xec>

  case HID_REQ_SET_PROTOCOL:
    /* set protocol */
    classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f975 	bl	800516c <USBH_HID_SetProtocol>
 8004e82:	4603      	mov	r3, r0
 8004e84:	73bb      	strb	r3, [r7, #14]
    if (classReqStatus == USBH_OK)
 8004e86:	7bbb      	ldrb	r3, [r7, #14]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <USBH_HID_ClassRequest+0xd8>
    {
      HID_Handle->ctl_state = HID_REQ_IDLE;
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	715a      	strb	r2, [r3, #5]

      /* all requests performed*/
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e98:	2102      	movs	r1, #2
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	4798      	blx	r3
      status = USBH_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]
    }
    else
    {
      /* .. */
    }
    break;
 8004ea2:	e00b      	b.n	8004ebc <USBH_HID_ClassRequest+0xf0>
    else if (classReqStatus == USBH_NOT_SUPPORTED)
 8004ea4:	7bbb      	ldrb	r3, [r7, #14]
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d108      	bne.n	8004ebc <USBH_HID_ClassRequest+0xf0>
      status = USBH_FAIL;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	73fb      	strb	r3, [r7, #15]
    break;
 8004eae:	e005      	b.n	8004ebc <USBH_HID_ClassRequest+0xf0>

  case HID_REQ_IDLE:
  default:
    break;
 8004eb0:	bf00      	nop
 8004eb2:	e004      	b.n	8004ebe <USBH_HID_ClassRequest+0xf2>
    break;
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <USBH_HID_ClassRequest+0xf2>
    break;
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <USBH_HID_ClassRequest+0xf2>
    break;
 8004ebc:	bf00      	nop
  }

  return status;
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	789b      	ldrb	r3, [r3, #2]
 8004ee2:	2b06      	cmp	r3, #6
 8004ee4:	f200 80a9 	bhi.w	800503a <USBH_HID_Process+0x172>
 8004ee8:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <USBH_HID_Process+0x28>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f0d 	.word	0x08004f0d
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	0800503b 	.word	0x0800503b
 8004efc:	0800503b 	.word	0x0800503b
 8004f00:	08004f8d 	.word	0x08004f8d
 8004f04:	08004f77 	.word	0x08004f77
 8004f08:	08004fbb 	.word	0x08004fbb
  {
    case HID_INIT:
      HID_Handle->Init(phost);
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2201      	movs	r2, #1
 8004f18:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f1a:	e093      	b.n	8005044 <USBH_HID_Process+0x17c>

    case HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	695a      	ldr	r2, [r3, #20]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	8b1b      	ldrh	r3, [r3, #24]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f8f0 	bl	8005114 <USBH_HID_GetReport>
 8004f34:	4603      	mov	r3, r0
 8004f36:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <USBH_HID_Process+0x7e>
      {
        HID_Handle->state = HID_SYNC;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	2205      	movs	r2, #5
 8004f42:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f44:	e07e      	b.n	8005044 <USBH_HID_Process+0x17c>
      else if (status == USBH_BUSY)
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <USBH_HID_Process+0x90>
        HID_Handle->state = HID_IDLE;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004f52:	2300      	movs	r3, #0
 8004f54:	75fb      	strb	r3, [r7, #23]
      break;
 8004f56:	e075      	b.n	8005044 <USBH_HID_Process+0x17c>
      else if (status == USBH_NOT_SUPPORTED)
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d105      	bne.n	8004f6a <USBH_HID_Process+0xa2>
        HID_Handle->state = HID_SYNC;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2205      	movs	r2, #5
 8004f62:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	75fb      	strb	r3, [r7, #23]
      break;
 8004f68:	e06c      	b.n	8005044 <USBH_HID_Process+0x17c>
        HID_Handle->state = HID_ERROR;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2207      	movs	r2, #7
 8004f6e:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8004f70:	2302      	movs	r3, #2
 8004f72:	75fb      	strb	r3, [r7, #23]
      break;
 8004f74:	e066      	b.n	8005044 <USBH_HID_Process+0x17c>

    case HID_SYNC:
      /* Sync with start of Even Frame */
      if (phost->Timer & 1U)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05c      	beq.n	800503e <USBH_HID_Process+0x176>
      {
        HID_Handle->state = HID_GET_DATA;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2204      	movs	r2, #4
 8004f88:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f8a:	e058      	b.n	800503e <USBH_HID_Process+0x176>

    case HID_GET_DATA:
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6959      	ldr	r1, [r3, #20]
                                (uint8_t)HID_Handle->length,
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	8b1b      	ldrh	r3, [r3, #24]
      USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f001 fe7b 	bl	8006c96 <USBH_InterruptReceiveData>
                                HID_Handle->InPipe);

      HID_Handle->state = HID_POLL;
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2206      	movs	r2, #6
 8004fa4:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      break;
 8004fb8:	e044      	b.n	8005044 <USBH_HID_Process+0x17c>

    case HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	785b      	ldrb	r3, [r3, #1]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f002 f965 	bl	8007290 <USBH_LL_GetURBState>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d120      	bne.n	800500e <USBH_HID_Process+0x146>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f002 f8ca 	bl	800716c <USBH_LL_GetLastXferSize>
 8004fd8:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d12e      	bne.n	8005042 <USBH_HID_Process+0x17a>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d02b      	beq.n	8005042 <USBH_HID_Process+0x17a>
        {
          USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f103 0008 	add.w	r0, r3, #8
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	6959      	ldr	r1, [r3, #20]
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	8b1b      	ldrh	r3, [r3, #24]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f000 f9ca 	bl	8005392 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fb fab4 	bl	8000574 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = HID_GET_DATA;
          }
        }
      }
      break;
 800500c:	e019      	b.n	8005042 <USBH_HID_Process+0x17a>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f002 f93b 	bl	8007290 <USBH_LL_GetURBState>
 800501a:	4603      	mov	r3, r0
 800501c:	2b05      	cmp	r3, #5
 800501e:	d110      	bne.n	8005042 <USBH_HID_Process+0x17a>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	7e9b      	ldrb	r3, [r3, #26]
 8005024:	4619      	mov	r1, r3
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 fa47 	bl	80064ba <USBH_ClrFeature>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <USBH_HID_Process+0x17a>
            HID_Handle->state = HID_GET_DATA;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	2204      	movs	r2, #4
 8005036:	709a      	strb	r2, [r3, #2]
      break;
 8005038:	e003      	b.n	8005042 <USBH_HID_Process+0x17a>

    default:
      break;
 800503a:	bf00      	nop
 800503c:	e002      	b.n	8005044 <USBH_HID_Process+0x17c>
      break;
 800503e:	bf00      	nop
 8005040:	e000      	b.n	8005044 <USBH_HID_Process+0x17c>
      break;
 8005042:	bf00      	nop
  }

  return status;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop

08005050 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == HID_POLL)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	789b      	ldrb	r3, [r3, #2]
 8005066:	2b06      	cmp	r3, #6
 8005068:	d10c      	bne.n	8005084 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	8b92      	ldrh	r2, [r2, #28]
 800507a:	4293      	cmp	r3, r2
 800507c:	d302      	bcc.n	8005084 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = HID_GET_DATA;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2204      	movs	r2, #4
 8005082:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
  }
  return USBH_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b086      	sub	sp, #24
 8005096:	af02      	add	r7, sp, #8
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 80050ae:	2101      	movs	r1, #1
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 f962 	bl	800637a <USBH_GetDescriptor>
 80050b6:	4603      	mov	r3, r0
 80050b8:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	70fb      	strb	r3, [r7, #3]
 80050d0:	4613      	mov	r3, r2
 80050d2:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2221      	movs	r2, #33	; 0x21
 80050d8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	220a      	movs	r2, #10
 80050de:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80050e0:	78fb      	ldrb	r3, [r7, #3]
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	021b      	lsls	r3, r3, #8
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	78bb      	ldrb	r3, [r7, #2]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 8005100:	2200      	movs	r2, #0
 8005102:	2100      	movs	r1, #0
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f001 fbb8 	bl	800687a <USBH_CtlReq>
 800510a:	4603      	mov	r3, r0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	607b      	str	r3, [r7, #4]
 800511e:	460b      	mov	r3, r1
 8005120:	72fb      	strb	r3, [r7, #11]
 8005122:	4613      	mov	r3, r2
 8005124:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	22a1      	movs	r2, #161	; 0xa1
 800512a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8005132:	7afb      	ldrb	r3, [r7, #11]
 8005134:	b29b      	uxth	r3, r3
 8005136:	021b      	lsls	r3, r3, #8
 8005138:	b29a      	uxth	r2, r3
 800513a:	7abb      	ldrb	r3, [r7, #10]
 800513c:	b29b      	uxth	r3, r3
 800513e:	4313      	orrs	r3, r2
 8005140:	b29a      	uxth	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800514c:	7e3b      	ldrb	r3, [r7, #24]
 800514e:	b29a      	uxth	r2, r3
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8005154:	7e3b      	ldrb	r3, [r7, #24]
 8005156:	b29b      	uxth	r3, r3
 8005158:	461a      	mov	r2, r3
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f001 fb8c 	bl	800687a <USBH_CtlReq>
 8005162:	4603      	mov	r3, r0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2221      	movs	r2, #33	; 0x21
 800517c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	220b      	movs	r2, #11
 8005182:	745a      	strb	r2, [r3, #17]
  if (protocol)
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	825a      	strh	r2, [r3, #18]
 8005190:	e002      	b.n	8005198 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80051a4:	2200      	movs	r2, #0
 80051a6:	2100      	movs	r1, #0
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f001 fb66 	bl	800687a <USBH_CtlReq>
 80051ae:	4603      	mov	r3, r0

}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void  USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	3302      	adds	r3, #2
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	3303      	adds	r3, #3
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	021b      	lsls	r3, r3, #8
 80051d8:	b29b      	uxth	r3, r3
 80051da:	4313      	orrs	r3, r2
 80051dc:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 80051de:	897b      	ldrh	r3, [r7, #10]
 80051e0:	2b09      	cmp	r3, #9
 80051e2:	d943      	bls.n	800526c <USBH_HID_ParseHIDDesc+0xb4>
  {
    ptr = USB_LEN_CFG_DESC;
 80051e4:	2309      	movs	r3, #9
 80051e6:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 80051e8:	e03c      	b.n	8005264 <USBH_HID_ParseHIDDesc+0xac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	4619      	mov	r1, r3
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f001 fb27 	bl	8006844 <USBH_GetNextDesc>
 80051f6:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	2b21      	cmp	r3, #33	; 0x21
 80051fe:	d131      	bne.n	8005264 <USBH_HID_ParseHIDDesc+0xac>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	781a      	ldrb	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	785a      	ldrb	r2, [r3, #1]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3302      	adds	r3, #2
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3303      	adds	r3, #3
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	b29b      	uxth	r3, r3
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	b29b      	uxth	r3, r3
 8005224:	4313      	orrs	r3, r2
 8005226:	b29a      	uxth	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	791a      	ldrb	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	795a      	ldrb	r2, [r3, #5]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	799a      	ldrb	r2, [r3, #6]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3307      	adds	r3, #7
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3308      	adds	r3, #8
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	021b      	lsls	r3, r3, #8
 8005256:	b29b      	uxth	r3, r3
 8005258:	4313      	orrs	r3, r2
 800525a:	b29a      	uxth	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	811a      	strh	r2, [r3, #8]
        break;
 8005260:	bf00      	nop
      }
    }
  }
}
 8005262:	e003      	b.n	800526c <USBH_HID_ParseHIDDesc+0xb4>
    while (ptr < CfgDescLen)
 8005264:	893b      	ldrh	r3, [r7, #8]
 8005266:	897a      	ldrh	r2, [r7, #10]
 8005268:	429a      	cmp	r2, r3
 800526a:	d8be      	bhi.n	80051ea <USBH_HID_ParseHIDDesc+0x32>
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <USBH_HID_GetDeviceType>:
  *         Return Device function.
  * @param  phost: Host handle
  * @retval HID function: HID_MOUSE / HID_KEYBOARD
  */
HID_TypeTypeDef USBH_HID_GetDeviceType(USBH_HandleTypeDef *phost)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  HID_TypeTypeDef   type = HID_UNKNOWN;
 800527c:	23ff      	movs	r3, #255	; 0xff
 800527e:	73fb      	strb	r3, [r7, #15]
  uint8_t InterfaceProtocol;

  if (phost->gState == HOST_CLASS)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b0b      	cmp	r3, #11
 8005288:	d117      	bne.n	80052ba <USBH_HID_GetDeviceType+0x46>
  {
    InterfaceProtocol = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].bInterfaceProtocol;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3324 	ldrb.w	r3, [r3, #804]	; 0x324
 8005290:	4619      	mov	r1, r3
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	231a      	movs	r3, #26
 8005296:	fb03 f301 	mul.w	r3, r3, r1
 800529a:	4413      	add	r3, r2
 800529c:	f203 3349 	addw	r3, r3, #841	; 0x349
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	73bb      	strb	r3, [r7, #14]
    if (InterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 80052a4:	7bbb      	ldrb	r3, [r7, #14]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d102      	bne.n	80052b0 <USBH_HID_GetDeviceType+0x3c>
    {
      type = HID_KEYBOARD;
 80052aa:	2302      	movs	r3, #2
 80052ac:	73fb      	strb	r3, [r7, #15]
 80052ae:	e004      	b.n	80052ba <USBH_HID_GetDeviceType+0x46>
    }
    else
    {
      if (InterfaceProtocol == HID_MOUSE_BOOT_CODE)
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d101      	bne.n	80052ba <USBH_HID_GetDeviceType+0x46>
      {
        type = HID_MOUSE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  return type;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	88fa      	ldrh	r2, [r7, #6]
 80052ec:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	601a      	str	r2, [r3, #0]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <USBH_HID_FifoRead>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to read
  * @retval number of read items
  */
uint16_t USBH_HID_FifoRead(FIFO_TypeDef *f, void *buf, uint16_t nbytes)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	7a9b      	ldrb	r3, [r3, #10]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d131      	bne.n	800537e <USBH_HID_FifoRead+0x7e>
  {
    f->lock = 1U;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8005320:	2300      	movs	r3, #0
 8005322:	82fb      	strh	r3, [r7, #22]
 8005324:	e027      	b.n	8005376 <USBH_HID_FifoRead+0x76>
    {
      if (f->tail != f->head)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	88da      	ldrh	r2, [r3, #6]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	889b      	ldrh	r3, [r3, #4]
 800532e:	429a      	cmp	r2, r3
 8005330:	d019      	beq.n	8005366 <USBH_HID_FifoRead+0x66>
      {
        *p++ = f->buf[f->tail];
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	88d2      	ldrh	r2, [r2, #6]
 800533a:	441a      	add	r2, r3
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1c59      	adds	r1, r3, #1
 8005340:	6139      	str	r1, [r7, #16]
 8005342:	7812      	ldrb	r2, [r2, #0]
 8005344:	701a      	strb	r2, [r3, #0]
        f->tail++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	88db      	ldrh	r3, [r3, #6]
 800534a:	3301      	adds	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	80da      	strh	r2, [r3, #6]

        if (f->tail == f->size)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	88da      	ldrh	r2, [r3, #6]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	891b      	ldrh	r3, [r3, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d108      	bne.n	8005370 <USBH_HID_FifoRead+0x70>
        {
          f->tail = 0U;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	80da      	strh	r2, [r3, #6]
 8005364:	e004      	b.n	8005370 <USBH_HID_FifoRead+0x70>
        }
      }
      else
      {
        f->lock = 0U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	729a      	strb	r2, [r3, #10]
        return i;
 800536c:	8afb      	ldrh	r3, [r7, #22]
 800536e:	e00a      	b.n	8005386 <USBH_HID_FifoRead+0x86>
    for (i = 0U; i < nbytes; i++)
 8005370:	8afb      	ldrh	r3, [r7, #22]
 8005372:	3301      	adds	r3, #1
 8005374:	82fb      	strh	r3, [r7, #22]
 8005376:	8afa      	ldrh	r2, [r7, #22]
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	429a      	cmp	r2, r3
 800537c:	d3d3      	bcc.n	8005326 <USBH_HID_FifoRead+0x26>
      }
    }
  }

  f->lock = 0U;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8005384:	88fb      	ldrh	r3, [r7, #6]
}
 8005386:	4618      	mov	r0, r3
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8005392:	b480      	push	{r7}
 8005394:	b087      	sub	sp, #28
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	4613      	mov	r3, r2
 800539e:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	7a9b      	ldrb	r3, [r3, #10]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d13c      	bne.n	8005426 <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80053b2:	2300      	movs	r3, #0
 80053b4:	82fb      	strh	r3, [r7, #22]
 80053b6:	e032      	b.n	800541e <USBH_HID_FifoWrite+0x8c>
    {
      if ((f->head + 1U == f->tail) ||
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	889b      	ldrh	r3, [r3, #4]
 80053bc:	3301      	adds	r3, #1
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	88d2      	ldrh	r2, [r2, #6]
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00a      	beq.n	80053dc <USBH_HID_FifoWrite+0x4a>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	889b      	ldrh	r3, [r3, #4]
 80053ca:	3301      	adds	r3, #1
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	8912      	ldrh	r2, [r2, #8]
      if ((f->head + 1U == f->tail) ||
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d108      	bne.n	80053e6 <USBH_HID_FifoWrite+0x54>
          ((f->head + 1U == f->size) && (f->tail == 0U)))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88db      	ldrh	r3, [r3, #6]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	729a      	strb	r2, [r3, #10]
        return i;
 80053e2:	8afb      	ldrh	r3, [r7, #22]
 80053e4:	e023      	b.n	800542e <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	613a      	str	r2, [r7, #16]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	6812      	ldr	r2, [r2, #0]
 80053f0:	68f9      	ldr	r1, [r7, #12]
 80053f2:	8889      	ldrh	r1, [r1, #4]
 80053f4:	440a      	add	r2, r1
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	7013      	strb	r3, [r2, #0]
        f->head++;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	889b      	ldrh	r3, [r3, #4]
 80053fe:	3301      	adds	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	889a      	ldrh	r2, [r3, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	891b      	ldrh	r3, [r3, #8]
 800540e:	429a      	cmp	r2, r3
 8005410:	d102      	bne.n	8005418 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8005418:	8afb      	ldrh	r3, [r7, #22]
 800541a:	3301      	adds	r3, #1
 800541c:	82fb      	strh	r3, [r7, #22]
 800541e:	8afa      	ldrh	r2, [r7, #22]
 8005420:	88fb      	ldrh	r3, [r7, #6]
 8005422:	429a      	cmp	r2, r3
 8005424:	d3c8      	bcc.n	80053b8 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	729a      	strb	r2, [r3, #10]

  return nbytes;
 800542c:	88fb      	ldrh	r3, [r7, #6]
}
 800542e:	4618      	mov	r0, r3
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = keybd_info.lshift = 0U;
 800544e:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 8005450:	2200      	movs	r2, #0
 8005452:	709a      	strb	r2, [r3, #2]
 8005454:	4b22      	ldr	r3, [pc, #136]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 8005456:	789a      	ldrb	r2, [r3, #2]
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 800545a:	705a      	strb	r2, [r3, #1]
  keybd_info.lalt = keybd_info.lgui = 0U;
 800545c:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 800545e:	2200      	movs	r2, #0
 8005460:	711a      	strb	r2, [r3, #4]
 8005462:	4b1f      	ldr	r3, [pc, #124]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 8005464:	791a      	ldrb	r2, [r3, #4]
 8005466:	4b1e      	ldr	r3, [pc, #120]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 8005468:	70da      	strb	r2, [r3, #3]
  keybd_info.rctrl = keybd_info.rshift = 0U;
 800546a:	4b1d      	ldr	r3, [pc, #116]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 800546c:	2200      	movs	r2, #0
 800546e:	719a      	strb	r2, [r3, #6]
 8005470:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 8005472:	799a      	ldrb	r2, [r3, #6]
 8005474:	4b1a      	ldr	r3, [pc, #104]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 8005476:	715a      	strb	r2, [r3, #5]
  keybd_info.ralt = keybd_info.rgui = 0U;
 8005478:	4b19      	ldr	r3, [pc, #100]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 800547a:	2200      	movs	r2, #0
 800547c:	721a      	strb	r2, [r3, #8]
 800547e:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 8005480:	7a1a      	ldrb	r2, [r3, #8]
 8005482:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <USBH_HID_KeybdInit+0xa4>)
 8005484:	71da      	strb	r2, [r3, #7]


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	e00c      	b.n	80054a6 <USBH_HID_KeybdInit+0x6a>
  {
    keybd_report_data[x] = 0U;
 800548c:	4a15      	ldr	r2, [pc, #84]	; (80054e4 <USBH_HID_KeybdInit+0xa8>)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2100      	movs	r1, #0
 8005492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    keybd_rx_report_buf[x] = 0U;
 8005496:	4a14      	ldr	r2, [pc, #80]	; (80054e8 <USBH_HID_KeybdInit+0xac>)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2100      	movs	r1, #0
 800549c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3301      	adds	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d9ef      	bls.n	800548c <USBH_HID_KeybdInit+0x50>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	8b1b      	ldrh	r3, [r3, #24]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d902      	bls.n	80054ba <USBH_HID_KeybdInit+0x7e>
  {
    HID_Handle->length = (sizeof(keybd_report_data));
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2208      	movs	r2, #8
 80054b8:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4a0a      	ldr	r2, [pc, #40]	; (80054e8 <USBH_HID_KeybdInit+0xac>)
 80054be:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(keybd_report_data));
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f103 0008 	add.w	r0, r3, #8
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80054cc:	2250      	movs	r2, #80	; 0x50
 80054ce:	4619      	mov	r1, r3
 80054d0:	f7ff fefa 	bl	80052c8 <USBH_HID_FifoInit>

  return USBH_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000194 	.word	0x20000194
 80054e4:	20000184 	.word	0x20000184
 80054e8:	2000018c 	.word	0x2000018c

080054ec <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80054fe:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <USBH_HID_MouseInit+0x88>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8005504:	4b1b      	ldr	r3, [pc, #108]	; (8005574 <USBH_HID_MouseInit+0x88>)
 8005506:	2200      	movs	r2, #0
 8005508:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800550a:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <USBH_HID_MouseInit+0x88>)
 800550c:	2200      	movs	r2, #0
 800550e:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8005510:	4b18      	ldr	r3, [pc, #96]	; (8005574 <USBH_HID_MouseInit+0x88>)
 8005512:	2200      	movs	r2, #0
 8005514:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 8005516:	4b17      	ldr	r3, [pc, #92]	; (8005574 <USBH_HID_MouseInit+0x88>)
 8005518:	2200      	movs	r2, #0
 800551a:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e00c      	b.n	800553c <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8005522:	4a15      	ldr	r2, [pc, #84]	; (8005578 <USBH_HID_MouseInit+0x8c>)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2100      	movs	r1, #0
 8005528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    mouse_rx_report_buf[i] = 0U;
 800552c:	4a13      	ldr	r2, [pc, #76]	; (800557c <USBH_HID_MouseInit+0x90>)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2100      	movs	r1, #0
 8005532:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	3301      	adds	r3, #1
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d9ef      	bls.n	8005522 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	8b1b      	ldrh	r3, [r3, #24]
 8005546:	2b08      	cmp	r3, #8
 8005548:	d902      	bls.n	8005550 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = sizeof(mouse_report_data);
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	2208      	movs	r2, #8
 800554e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4a0a      	ldr	r2, [pc, #40]	; (800557c <USBH_HID_MouseInit+0x90>)
 8005554:	615a      	str	r2, [r3, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, HID_QUEUE_SIZE * sizeof(mouse_report_data));
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f103 0008 	add.w	r0, r3, #8
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005562:	2250      	movs	r2, #80	; 0x50
 8005564:	4619      	mov	r1, r3
 8005566:	f7ff feaf 	bl	80052c8 <USBH_HID_FifoInit>

  return USBH_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	200001a4 	.word	0x200001a4
 8005578:	200001ac 	.word	0x200001ac
 800557c:	200001b4 	.word	0x200001b4

08005580 <USBH_HID_GetMouseInfo>:
  *         The function return mouse information.
  * @param  phost: Host handle
  * @retval mouse information
  */
HID_MOUSE_Info_TypeDef *USBH_HID_GetMouseInfo(USBH_HandleTypeDef *phost)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  if (USBH_HID_MouseDecode(phost) == USBH_OK)
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f80d 	bl	80055a8 <USBH_HID_MouseDecode>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d101      	bne.n	8005598 <USBH_HID_GetMouseInfo+0x18>
  {
    return &mouse_info;
 8005594:	4b03      	ldr	r3, [pc, #12]	; (80055a4 <USBH_HID_GetMouseInfo+0x24>)
 8005596:	e000      	b.n	800559a <USBH_HID_GetMouseInfo+0x1a>
  }
  else
  {
    return NULL;
 8005598:	2300      	movs	r3, #0
  }
}
 800559a:	4618      	mov	r0, r3
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	200001a4 	.word	0x200001a4

080055a8 <USBH_HID_MouseDecode>:
  *         The function decode mouse data.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_MouseDecode(USBH_HandleTypeDef *phost)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->length == 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8b1b      	ldrh	r3, [r3, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <USBH_HID_MouseDecode+0x1e>
  {
    return USBH_FAIL;
 80055c2:	2302      	movs	r3, #2
 80055c4:	e039      	b.n	800563a <USBH_HID_MouseDecode+0x92>
  }
  /*Fill report */
  if (USBH_HID_FifoRead(&HID_Handle->fifo, &mouse_report_data, HID_Handle->length) ==  HID_Handle->length)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f103 0008 	add.w	r0, r3, #8
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8b1b      	ldrh	r3, [r3, #24]
 80055d0:	461a      	mov	r2, r3
 80055d2:	491c      	ldr	r1, [pc, #112]	; (8005644 <USBH_HID_MouseDecode+0x9c>)
 80055d4:	f7ff fe94 	bl	8005300 <USBH_HID_FifoRead>
 80055d8:	4603      	mov	r3, r0
 80055da:	461a      	mov	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8b1b      	ldrh	r3, [r3, #24]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d129      	bne.n	8005638 <USBH_HID_MouseDecode+0x90>
  {
    /*Decode report */
    mouse_info.x = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_x, 0U);
 80055e4:	2100      	movs	r1, #0
 80055e6:	4818      	ldr	r0, [pc, #96]	; (8005648 <USBH_HID_MouseDecode+0xa0>)
 80055e8:	f000 f83a 	bl	8005660 <HID_ReadItem>
 80055ec:	4603      	mov	r3, r0
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <USBH_HID_MouseDecode+0xa4>)
 80055f2:	701a      	strb	r2, [r3, #0]
    mouse_info.y = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_y, 0U);
 80055f4:	2100      	movs	r1, #0
 80055f6:	4816      	ldr	r0, [pc, #88]	; (8005650 <USBH_HID_MouseDecode+0xa8>)
 80055f8:	f000 f832 	bl	8005660 <HID_ReadItem>
 80055fc:	4603      	mov	r3, r0
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	4b12      	ldr	r3, [pc, #72]	; (800564c <USBH_HID_MouseDecode+0xa4>)
 8005602:	705a      	strb	r2, [r3, #1]

    mouse_info.buttons[0] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b1, 0U);
 8005604:	2100      	movs	r1, #0
 8005606:	4813      	ldr	r0, [pc, #76]	; (8005654 <USBH_HID_MouseDecode+0xac>)
 8005608:	f000 f82a 	bl	8005660 <HID_ReadItem>
 800560c:	4603      	mov	r3, r0
 800560e:	b2da      	uxtb	r2, r3
 8005610:	4b0e      	ldr	r3, [pc, #56]	; (800564c <USBH_HID_MouseDecode+0xa4>)
 8005612:	709a      	strb	r2, [r3, #2]
    mouse_info.buttons[1] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b2, 0U);
 8005614:	2100      	movs	r1, #0
 8005616:	4810      	ldr	r0, [pc, #64]	; (8005658 <USBH_HID_MouseDecode+0xb0>)
 8005618:	f000 f822 	bl	8005660 <HID_ReadItem>
 800561c:	4603      	mov	r3, r0
 800561e:	b2da      	uxtb	r2, r3
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <USBH_HID_MouseDecode+0xa4>)
 8005622:	70da      	strb	r2, [r3, #3]
    mouse_info.buttons[2] = (uint8_t)HID_ReadItem((HID_Report_ItemTypedef *) &prop_b3, 0U);
 8005624:	2100      	movs	r1, #0
 8005626:	480d      	ldr	r0, [pc, #52]	; (800565c <USBH_HID_MouseDecode+0xb4>)
 8005628:	f000 f81a 	bl	8005660 <HID_ReadItem>
 800562c:	4603      	mov	r3, r0
 800562e:	b2da      	uxtb	r2, r3
 8005630:	4b06      	ldr	r3, [pc, #24]	; (800564c <USBH_HID_MouseDecode+0xa4>)
 8005632:	711a      	strb	r2, [r3, #4]

    return USBH_OK;
 8005634:	2300      	movs	r3, #0
 8005636:	e000      	b.n	800563a <USBH_HID_MouseDecode+0x92>
  }
  return   USBH_FAIL;
 8005638:	2302      	movs	r3, #2
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	200001ac 	.word	0x200001ac
 8005648:	08007658 	.word	0x08007658
 800564c:	200001a4 	.word	0x200001a4
 8005650:	08007678 	.word	0x08007678
 8005654:	080075f8 	.word	0x080075f8
 8005658:	08007618 	.word	0x08007618
 800565c:	08007638 	.word	0x08007638

08005660 <HID_ReadItem>:
  * @param  ri: report item
  * @param  ndx: report index
* @retval status (0 : fail / otherwise: item value)
  */
uint32_t HID_ReadItem(HID_Report_ItemTypedef *ri, uint8_t ndx)
{
 8005660:	b480      	push	{r7}
 8005662:	b089      	sub	sp, #36	; 0x24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  uint32_t val = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
  uint32_t bofs;
  uint8_t *data = ri->data;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]
  uint8_t shift = ri->shift;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	7a1b      	ldrb	r3, [r3, #8]
 800567e:	74fb      	strb	r3, [r7, #19]

  /* get the logical value of the item */

  /* if this is an array, wee may need to offset ri->data.*/
  if (ri->count > 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	7a5b      	ldrb	r3, [r3, #9]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d01a      	beq.n	80056be <HID_ReadItem+0x5e>
  {
    /* If app tries to read outside of the array. */
    if (ri->count <= ndx)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7a5b      	ldrb	r3, [r3, #9]
 800568c:	78fa      	ldrb	r2, [r7, #3]
 800568e:	429a      	cmp	r2, r3
 8005690:	d301      	bcc.n	8005696 <HID_ReadItem+0x36>
    {
      return (0U);
 8005692:	2300      	movs	r3, #0
 8005694:	e076      	b.n	8005784 <HID_ReadItem+0x124>
    }

    /* calculate bit offset */
    bofs = ndx * ri->size;
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6852      	ldr	r2, [r2, #4]
 800569c:	fb02 f303 	mul.w	r3, r2, r3
 80056a0:	60fb      	str	r3, [r7, #12]
    bofs += shift;
 80056a2:	7cfb      	ldrb	r3, [r7, #19]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
    /* calculate byte offset + shift pair from bit offset. */
    data += bofs / 8U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	08db      	lsrs	r3, r3, #3
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4413      	add	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]
    shift = (uint8_t)(bofs % 8U);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	74fb      	strb	r3, [r7, #19]
  }
  /* read data bytes in little endian order */
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80056be:	2300      	movs	r3, #0
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e00a      	b.n	80056da <HID_ReadItem+0x7a>
  {
    val = (uint32_t)((uint32_t)(*data) << (x * 8U));
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	61fb      	str	r3, [r7, #28]
  for (x = 0U; x < ((ri->size & 0x7U) ? (ri->size / 8U) + 1U : (ri->size / 8U)); x++)
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	3301      	adds	r3, #1
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d004      	beq.n	80056f0 <HID_ReadItem+0x90>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	08db      	lsrs	r3, r3, #3
 80056ec:	3301      	adds	r3, #1
 80056ee:	e002      	b.n	80056f6 <HID_ReadItem+0x96>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	08db      	lsrs	r3, r3, #3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d8e3      	bhi.n	80056c4 <HID_ReadItem+0x64>
  }
  val = (val >> shift) & ((1U << ri->size) - 1U);
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	40da      	lsrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2101      	movs	r1, #1
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	4013      	ands	r3, r2
 8005710:	61fb      	str	r3, [r7, #28]

  if (val < ri->logical_min || val > ri->logical_max)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	429a      	cmp	r2, r3
 800571a:	d304      	bcc.n	8005726 <HID_ReadItem+0xc6>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	429a      	cmp	r2, r3
 8005724:	d901      	bls.n	800572a <HID_ReadItem+0xca>
  {
    return (0U);
 8005726:	2300      	movs	r3, #0
 8005728:	e02c      	b.n	8005784 <HID_ReadItem+0x124>
  }

  /* convert logical value to physical value */
  /* See if the number is negative or not. */
  if ((ri->sign) && (val & (1U << (ri->size - 1U))))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	7a9b      	ldrb	r3, [r3, #10]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d01d      	beq.n	800576e <HID_ReadItem+0x10e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	3b01      	subs	r3, #1
 8005738:	2201      	movs	r2, #1
 800573a:	409a      	lsls	r2, r3
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d014      	beq.n	800576e <HID_ReadItem+0x10e>
  {
    /* yes, so sign extend value to 32 bits. */
    uint32_t vs = (uint32_t)((0xffffffffU & ~((1U << (ri->size)) - 1U)) | val);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	425b      	negs	r3, r3
 8005750:	69fa      	ldr	r2, [r7, #28]
 8005752:	4313      	orrs	r3, r2
 8005754:	60bb      	str	r3, [r7, #8]

    if (ri->resolution == 1U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HID_ReadItem+0x102>
    {
      return ((uint32_t)vs);
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	e010      	b.n	8005784 <HID_ReadItem+0x124>
    }
    return ((uint32_t)(vs * ri->resolution));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	68ba      	ldr	r2, [r7, #8]
 8005768:	fb02 f303 	mul.w	r3, r2, r3
 800576c:	e00a      	b.n	8005784 <HID_ReadItem+0x124>
  }
  else
  {
    if (ri->resolution == 1U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HID_ReadItem+0x11a>
    {
      return (val);
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	e004      	b.n	8005784 <HID_ReadItem+0x124>
    }
    return (val * ri->resolution);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	fb02 f303 	mul.w	r3, r2, r3
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3724      	adds	r7, #36	; 0x24
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	4613      	mov	r3, r2
 800579c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80057a4:	2302      	movs	r3, #2
 80057a6:	e029      	b.n	80057fc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	79fa      	ldrb	r2, [r7, #7]
 80057ac:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f81f 	bl	8005804 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f001 fc05 	bl	8007004 <USBH_LL_Init>

  return USBH_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005810:	2300      	movs	r3, #0
 8005812:	60fb      	str	r3, [r7, #12]
 8005814:	e009      	b.n	800582a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	33e0      	adds	r3, #224	; 0xe0
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	2200      	movs	r2, #0
 8005822:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b0e      	cmp	r3, #14
 800582e:	d9f2      	bls.n	8005816 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005830:	2300      	movs	r3, #0
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	e009      	b.n	800584a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005850:	d3f1      	bcc.n	8005836 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2240      	movs	r2, #64	; 0x40
 8005876:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d016      	beq.n	80058ee <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10e      	bne.n	80058e8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80058d0:	1c59      	adds	r1, r3, #1
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	33de      	adds	r3, #222	; 0xde
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
 80058e6:	e004      	b.n	80058f2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80058e8:	2302      	movs	r3, #2
 80058ea:	73fb      	strb	r3, [r7, #15]
 80058ec:	e001      	b.n	80058f2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80058ee:	2302      	movs	r3, #2
 80058f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	460b      	mov	r3, r1
 800590a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005916:	78fa      	ldrb	r2, [r7, #3]
 8005918:	429a      	cmp	r2, r3
 800591a:	d204      	bcs.n	8005926 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	78fa      	ldrb	r2, [r7, #3]
 8005920:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005924:	e001      	b.n	800592a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005926:	2302      	movs	r3, #2
 8005928:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	4608      	mov	r0, r1
 8005942:	4611      	mov	r1, r2
 8005944:	461a      	mov	r2, r3
 8005946:	4603      	mov	r3, r0
 8005948:	70fb      	strb	r3, [r7, #3]
 800594a:	460b      	mov	r3, r1
 800594c:	70bb      	strb	r3, [r7, #2]
 800594e:	4613      	mov	r3, r2
 8005950:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005960:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005962:	e025      	b.n	80059b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005964:	7dfb      	ldrb	r3, [r7, #23]
 8005966:	221a      	movs	r2, #26
 8005968:	fb02 f303 	mul.w	r3, r2, r3
 800596c:	3308      	adds	r3, #8
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	3302      	adds	r3, #2
 8005974:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	795b      	ldrb	r3, [r3, #5]
 800597a:	78fa      	ldrb	r2, [r7, #3]
 800597c:	429a      	cmp	r2, r3
 800597e:	d002      	beq.n	8005986 <USBH_FindInterface+0x4e>
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	2bff      	cmp	r3, #255	; 0xff
 8005984:	d111      	bne.n	80059aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800598a:	78ba      	ldrb	r2, [r7, #2]
 800598c:	429a      	cmp	r2, r3
 800598e:	d002      	beq.n	8005996 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005990:	78bb      	ldrb	r3, [r7, #2]
 8005992:	2bff      	cmp	r3, #255	; 0xff
 8005994:	d109      	bne.n	80059aa <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800599a:	787a      	ldrb	r2, [r7, #1]
 800599c:	429a      	cmp	r2, r3
 800599e:	d002      	beq.n	80059a6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80059a0:	787b      	ldrb	r3, [r7, #1]
 80059a2:	2bff      	cmp	r3, #255	; 0xff
 80059a4:	d101      	bne.n	80059aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80059a6:	7dfb      	ldrb	r3, [r7, #23]
 80059a8:	e006      	b.n	80059b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80059aa:	7dfb      	ldrb	r3, [r7, #23]
 80059ac:	3301      	adds	r3, #1
 80059ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d9d6      	bls.n	8005964 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80059b6:	23ff      	movs	r3, #255	; 0xff
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fb55 	bl	800707c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80059d2:	2101      	movs	r1, #1
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f001 fc6e 	bl	80072b6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af04      	add	r7, sp, #16
 80059ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80059ec:	2302      	movs	r3, #2
 80059ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d102      	bne.n	8005a06 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2203      	movs	r2, #3
 8005a04:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b0b      	cmp	r3, #11
 8005a0e:	f200 81b3 	bhi.w	8005d78 <USBH_Process+0x394>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <USBH_Process+0x34>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005a49 	.word	0x08005a49
 8005a1c:	08005a7b 	.word	0x08005a7b
 8005a20:	08005ae3 	.word	0x08005ae3
 8005a24:	08005d13 	.word	0x08005d13
 8005a28:	08005d79 	.word	0x08005d79
 8005a2c:	08005b87 	.word	0x08005b87
 8005a30:	08005cb9 	.word	0x08005cb9
 8005a34:	08005bbd 	.word	0x08005bbd
 8005a38:	08005bdd 	.word	0x08005bdd
 8005a3c:	08005bfd 	.word	0x08005bfd
 8005a40:	08005c2b 	.word	0x08005c2b
 8005a44:	08005cfb 	.word	0x08005cfb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 8193 	beq.w	8005d7c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005a5c:	20c8      	movs	r0, #200	; 0xc8
 8005a5e:	f001 fc68 	bl	8007332 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f001 fb67 	bl	8007136 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005a78:	e180      	b.n	8005d7c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d107      	bne.n	8005a94 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005a92:	e182      	b.n	8005d9a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a9e:	d914      	bls.n	8005aca <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d903      	bls.n	8005ac2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	220d      	movs	r2, #13
 8005abe:	701a      	strb	r2, [r3, #0]
      break;
 8005ac0:	e16b      	b.n	8005d9a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
      break;
 8005ac8:	e167      	b.n	8005d9a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005ad0:	f103 020a 	add.w	r2, r3, #10
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8005ada:	200a      	movs	r0, #10
 8005adc:	f001 fc29 	bl	8007332 <USBH_Delay>
      break;
 8005ae0:	e15b      	b.n	8005d9a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005af2:	2104      	movs	r1, #4
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8005af8:	2064      	movs	r0, #100	; 0x64
 8005afa:	f001 fc1a 	bl	8007332 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f001 faf2 	bl	80070e8 <USBH_LL_GetSpeed>
 8005b04:	4603      	mov	r3, r0
 8005b06:	461a      	mov	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2205      	movs	r2, #5
 8005b12:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005b14:	2100      	movs	r1, #0
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 f90b 	bl	8006d32 <USBH_AllocPipe>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	461a      	mov	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005b24:	2180      	movs	r1, #128	; 0x80
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f001 f903 	bl	8006d32 <USBH_AllocPipe>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	7919      	ldrb	r1, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8005b48:	b292      	uxth	r2, r2
 8005b4a:	9202      	str	r2, [sp, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	9201      	str	r2, [sp, #4]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	4603      	mov	r3, r0
 8005b54:	2280      	movs	r2, #128	; 0x80
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f001 f8bc 	bl	8006cd4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	7959      	ldrb	r1, [r3, #5]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8005b70:	b292      	uxth	r2, r2
 8005b72:	9202      	str	r2, [sp, #8]
 8005b74:	2200      	movs	r2, #0
 8005b76:	9201      	str	r2, [sp, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 f8a8 	bl	8006cd4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005b84:	e109      	b.n	8005d9a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f90c 	bl	8005da4 <USBH_HandleEnum>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8005b90:	7bbb      	ldrb	r3, [r7, #14]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f040 80f3 	bne.w	8005d80 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d103      	bne.n	8005bb4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2208      	movs	r2, #8
 8005bb0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005bb2:	e0e5      	b.n	8005d80 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2207      	movs	r2, #7
 8005bb8:	701a      	strb	r2, [r3, #0]
      break;
 8005bba:	e0e1      	b.n	8005d80 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 80de 	beq.w	8005d84 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005bce:	2101      	movs	r1, #1
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2208      	movs	r2, #8
 8005bd8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005bda:	e0d3      	b.n	8005d84 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	4619      	mov	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fc20 	bl	800642c <USBH_SetCfg>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 80ca 	bne.w	8005d88 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2209      	movs	r2, #9
 8005bf8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005bfa:	e0c5      	b.n	8005d88 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8005c02:	f003 0320 	and.w	r3, r3, #32
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00b      	beq.n	8005c22 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fc30 	bl	8006472 <USBH_SetFeature>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f040 80b9 	bne.w	8005d8c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	220a      	movs	r2, #10
 8005c1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005c20:	e0b4      	b.n	8005d8c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	220a      	movs	r2, #10
 8005c26:	701a      	strb	r2, [r3, #0]
      break;
 8005c28:	e0b0      	b.n	8005d8c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 80ad 	beq.w	8005d90 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005c3e:	2300      	movs	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]
 8005c42:	e016      	b.n	8005c72 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8005c44:	7bfa      	ldrb	r2, [r7, #15]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	32de      	adds	r2, #222	; 0xde
 8005c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4e:	791a      	ldrb	r2, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d108      	bne.n	8005c6c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8005c5a:	7bfa      	ldrb	r2, [r7, #15]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	32de      	adds	r2, #222	; 0xde
 8005c60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8005c6a:	e005      	b.n	8005c78 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0e5      	beq.n	8005c44 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2206      	movs	r2, #6
 8005c98:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ca0:	2103      	movs	r1, #3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ca6:	e073      	b.n	8005d90 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	220d      	movs	r2, #13
 8005cac:	701a      	strb	r2, [r3, #0]
      break;
 8005cae:	e06f      	b.n	8005d90 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	220d      	movs	r2, #13
 8005cb4:	701a      	strb	r2, [r3, #0]
      break;
 8005cb6:	e06b      	b.n	8005d90 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d017      	beq.n	8005cf2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	4798      	blx	r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d103      	bne.n	8005ce2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	220b      	movs	r2, #11
 8005cde:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005ce0:	e058      	b.n	8005d94 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005ce2:	7bbb      	ldrb	r3, [r7, #14]
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d154      	bne.n	8005d94 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	220d      	movs	r2, #13
 8005cee:	701a      	strb	r2, [r3, #0]
      break;
 8005cf0:	e050      	b.n	8005d94 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	220d      	movs	r2, #13
 8005cf6:	701a      	strb	r2, [r3, #0]
      break;
 8005cf8:	e04c      	b.n	8005d94 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d049      	beq.n	8005d98 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	4798      	blx	r3
      }
      break;
 8005d10:	e042      	b.n	8005d98 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff fd72 	bl	8005804 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d005      	beq.n	8005d54 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d4e:	2105      	movs	r1, #5
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d107      	bne.n	8005d70 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fe2b 	bl	80059c4 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005d6e:	e014      	b.n	8005d9a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f001 f983 	bl	800707c <USBH_LL_Start>
      break;
 8005d76:	e010      	b.n	8005d9a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005d78:	bf00      	nop
 8005d7a:	e00e      	b.n	8005d9a <USBH_Process+0x3b6>
      break;
 8005d7c:	bf00      	nop
 8005d7e:	e00c      	b.n	8005d9a <USBH_Process+0x3b6>
      break;
 8005d80:	bf00      	nop
 8005d82:	e00a      	b.n	8005d9a <USBH_Process+0x3b6>
    break;
 8005d84:	bf00      	nop
 8005d86:	e008      	b.n	8005d9a <USBH_Process+0x3b6>
      break;
 8005d88:	bf00      	nop
 8005d8a:	e006      	b.n	8005d9a <USBH_Process+0x3b6>
      break;
 8005d8c:	bf00      	nop
 8005d8e:	e004      	b.n	8005d9a <USBH_Process+0x3b6>
      break;
 8005d90:	bf00      	nop
 8005d92:	e002      	b.n	8005d9a <USBH_Process+0x3b6>
      break;
 8005d94:	bf00      	nop
 8005d96:	e000      	b.n	8005d9a <USBH_Process+0x3b6>
      break;
 8005d98:	bf00      	nop
  }
  return USBH_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af04      	add	r7, sp, #16
 8005daa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005dac:	2301      	movs	r3, #1
 8005dae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b07      	cmp	r3, #7
 8005dba:	f200 81c1 	bhi.w	8006140 <USBH_HandleEnum+0x39c>
 8005dbe:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <USBH_HandleEnum+0x20>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005de5 	.word	0x08005de5
 8005dc8:	08005ea3 	.word	0x08005ea3
 8005dcc:	08005f0d 	.word	0x08005f0d
 8005dd0:	08005f9b 	.word	0x08005f9b
 8005dd4:	08006005 	.word	0x08006005
 8005dd8:	08006075 	.word	0x08006075
 8005ddc:	080060bb 	.word	0x080060bb
 8005de0:	08006101 	.word	0x08006101
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005de4:	2108      	movs	r1, #8
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa50 	bl	800628c <USBH_Get_DevDesc>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005df0:	7bbb      	ldrb	r3, [r7, #14]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d130      	bne.n	8005e58 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	7919      	ldrb	r1, [r3, #4]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8005e1a:	b292      	uxth	r2, r2
 8005e1c:	9202      	str	r2, [sp, #8]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	9201      	str	r2, [sp, #4]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4603      	mov	r3, r0
 8005e26:	2280      	movs	r2, #128	; 0x80
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 ff53 	bl	8006cd4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	7959      	ldrb	r1, [r3, #5]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005e42:	b292      	uxth	r2, r2
 8005e44:	9202      	str	r2, [sp, #8]
 8005e46:	2200      	movs	r2, #0
 8005e48:	9201      	str	r2, [sp, #4]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2200      	movs	r2, #0
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 ff3f 	bl	8006cd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005e56:	e175      	b.n	8006144 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	2b03      	cmp	r3, #3
 8005e5c:	f040 8172 	bne.w	8006144 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e66:	3301      	adds	r3, #1
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e76:	2b03      	cmp	r3, #3
 8005e78:	d903      	bls.n	8005e82 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	220d      	movs	r2, #13
 8005e7e:	701a      	strb	r2, [r3, #0]
      break;
 8005e80:	e160      	b.n	8006144 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	795b      	ldrb	r3, [r3, #5]
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 ff73 	bl	8006d74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	791b      	ldrb	r3, [r3, #4]
 8005e92:	4619      	mov	r1, r3
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 ff6d 	bl	8006d74 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
      break;
 8005ea0:	e150      	b.n	8006144 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005ea2:	2112      	movs	r1, #18
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f9f1 	bl	800628c <USBH_Get_DevDesc>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005eba:	e145      	b.n	8006148 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	f040 8142 	bne.w	8006148 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005eca:	3301      	adds	r3, #1
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d903      	bls.n	8005ee6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	220d      	movs	r2, #13
 8005ee2:	701a      	strb	r2, [r3, #0]
      break;
 8005ee4:	e130      	b.n	8006148 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	795b      	ldrb	r3, [r3, #5]
 8005eea:	4619      	mov	r1, r3
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 ff41 	bl	8006d74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	791b      	ldrb	r3, [r3, #4]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 ff3b 	bl	8006d74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	701a      	strb	r2, [r3, #0]
      break;
 8005f0a:	e11d      	b.n	8006148 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8005f0c:	2101      	movs	r1, #1
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fa68 	bl	80063e4 <USBH_SetAddress>
 8005f14:	4603      	mov	r3, r0
 8005f16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005f18:	7bbb      	ldrb	r3, [r7, #14]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d132      	bne.n	8005f84 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8005f1e:	2002      	movs	r0, #2
 8005f20:	f001 fa07 	bl	8007332 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2203      	movs	r2, #3
 8005f30:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	7919      	ldrb	r1, [r3, #4]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8005f46:	b292      	uxth	r2, r2
 8005f48:	9202      	str	r2, [sp, #8]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	9201      	str	r2, [sp, #4]
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	4603      	mov	r3, r0
 8005f52:	2280      	movs	r2, #128	; 0x80
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 febd 	bl	8006cd4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	7959      	ldrb	r1, [r3, #5]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8005f6e:	b292      	uxth	r2, r2
 8005f70:	9202      	str	r2, [sp, #8]
 8005f72:	2200      	movs	r2, #0
 8005f74:	9201      	str	r2, [sp, #4]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fea9 	bl	8006cd4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005f82:	e0e3      	b.n	800614c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005f84:	7bbb      	ldrb	r3, [r7, #14]
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	f040 80e0 	bne.w	800614c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	220d      	movs	r2, #13
 8005f90:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	705a      	strb	r2, [r3, #1]
      break;
 8005f98:	e0d8      	b.n	800614c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8005f9a:	2109      	movs	r1, #9
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f99d 	bl	80062dc <USBH_Get_CfgDesc>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005fa6:	7bbb      	ldrb	r3, [r7, #14]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d103      	bne.n	8005fb4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005fb2:	e0cd      	b.n	8006150 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005fb4:	7bbb      	ldrb	r3, [r7, #14]
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	f040 80ca 	bne.w	8006150 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	b2da      	uxtb	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d903      	bls.n	8005fde <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	220d      	movs	r2, #13
 8005fda:	701a      	strb	r2, [r3, #0]
      break;
 8005fdc:	e0b8      	b.n	8006150 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	795b      	ldrb	r3, [r3, #5]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fec5 	bl	8006d74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	791b      	ldrb	r3, [r3, #4]
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 febf 	bl	8006d74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	701a      	strb	r2, [r3, #0]
      break;
 8006002:	e0a5      	b.n	8006150 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800600a:	4619      	mov	r1, r3
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f965 	bl	80062dc <USBH_Get_CfgDesc>
 8006012:	4603      	mov	r3, r0
 8006014:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006016:	7bbb      	ldrb	r3, [r7, #14]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d103      	bne.n	8006024 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2205      	movs	r2, #5
 8006020:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006022:	e097      	b.n	8006154 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	2b03      	cmp	r3, #3
 8006028:	f040 8094 	bne.w	8006154 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006032:	3301      	adds	r3, #1
 8006034:	b2da      	uxtb	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006042:	2b03      	cmp	r3, #3
 8006044:	d903      	bls.n	800604e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	220d      	movs	r2, #13
 800604a:	701a      	strb	r2, [r3, #0]
      break;
 800604c:	e082      	b.n	8006154 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	795b      	ldrb	r3, [r3, #5]
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fe8d 	bl	8006d74 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	791b      	ldrb	r3, [r3, #4]
 800605e:	4619      	mov	r1, r3
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fe87 	bl	8006d74 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	701a      	strb	r2, [r3, #0]
      break;
 8006072:	e06f      	b.n	8006154 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800607a:	2b00      	cmp	r3, #0
 800607c:	d019      	beq.n	80060b2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800608a:	23ff      	movs	r3, #255	; 0xff
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f949 	bl	8006324 <USBH_Get_StringDesc>
 8006092:	4603      	mov	r3, r0
 8006094:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006096:	7bbb      	ldrb	r3, [r7, #14]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2206      	movs	r2, #6
 80060a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80060a2:	e059      	b.n	8006158 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060a4:	7bbb      	ldrb	r3, [r7, #14]
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d156      	bne.n	8006158 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2206      	movs	r2, #6
 80060ae:	705a      	strb	r2, [r3, #1]
      break;
 80060b0:	e052      	b.n	8006158 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2206      	movs	r2, #6
 80060b6:	705a      	strb	r2, [r3, #1]
      break;
 80060b8:	e04e      	b.n	8006158 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d019      	beq.n	80060f8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80060d0:	23ff      	movs	r3, #255	; 0xff
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f926 	bl	8006324 <USBH_Get_StringDesc>
 80060d8:	4603      	mov	r3, r0
 80060da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80060dc:	7bbb      	ldrb	r3, [r7, #14]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2207      	movs	r2, #7
 80060e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80060e8:	e038      	b.n	800615c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80060ea:	7bbb      	ldrb	r3, [r7, #14]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d135      	bne.n	800615c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2207      	movs	r2, #7
 80060f4:	705a      	strb	r2, [r3, #1]
      break;
 80060f6:	e031      	b.n	800615c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2207      	movs	r2, #7
 80060fc:	705a      	strb	r2, [r3, #1]
      break;
 80060fe:	e02d      	b.n	800615c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006106:	2b00      	cmp	r3, #0
 8006108:	d017      	beq.n	800613a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006116:	23ff      	movs	r3, #255	; 0xff
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f903 	bl	8006324 <USBH_Get_StringDesc>
 800611e:	4603      	mov	r3, r0
 8006120:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d102      	bne.n	800612e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006128:	2300      	movs	r3, #0
 800612a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800612c:	e018      	b.n	8006160 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800612e:	7bbb      	ldrb	r3, [r7, #14]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d115      	bne.n	8006160 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	73fb      	strb	r3, [r7, #15]
      break;
 8006138:	e012      	b.n	8006160 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	73fb      	strb	r3, [r7, #15]
      break;
 800613e:	e00f      	b.n	8006160 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006140:	bf00      	nop
 8006142:	e00e      	b.n	8006162 <USBH_HandleEnum+0x3be>
      break;
 8006144:	bf00      	nop
 8006146:	e00c      	b.n	8006162 <USBH_HandleEnum+0x3be>
      break;
 8006148:	bf00      	nop
 800614a:	e00a      	b.n	8006162 <USBH_HandleEnum+0x3be>
      break;
 800614c:	bf00      	nop
 800614e:	e008      	b.n	8006162 <USBH_HandleEnum+0x3be>
      break;
 8006150:	bf00      	nop
 8006152:	e006      	b.n	8006162 <USBH_HandleEnum+0x3be>
      break;
 8006154:	bf00      	nop
 8006156:	e004      	b.n	8006162 <USBH_HandleEnum+0x3be>
      break;
 8006158:	bf00      	nop
 800615a:	e002      	b.n	8006162 <USBH_HandleEnum+0x3be>
      break;
 800615c:	bf00      	nop
 800615e:	e000      	b.n	8006162 <USBH_HandleEnum+0x3be>
      break;
 8006160:	bf00      	nop
  }
  return Status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	683a      	ldr	r2, [r7, #0]
 800617a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800617e:	bf00      	nop
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f804 	bl	80061ae <USBH_HandleSof>
}
 80061a6:	bf00      	nop
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b0b      	cmp	r3, #11
 80061be:	d10a      	bne.n	80061d6 <USBH_HandleSof+0x28>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
  }
}
 80061d6:	bf00      	nop
 80061d8:	3708      	adds	r7, #8
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80061de:	b480      	push	{r7}
 80061e0:	b083      	sub	sp, #12
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80061ee:	bf00      	nop
}
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800620a:	bf00      	nop
}
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 ff24 	bl	80070b2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	791b      	ldrb	r3, [r3, #4]
 800626e:	4619      	mov	r1, r3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 fd7f 	bl	8006d74 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	795b      	ldrb	r3, [r3, #5]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fd79 	bl	8006d74 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af02      	add	r7, sp, #8
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800629e:	78fb      	ldrb	r3, [r7, #3]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062aa:	2100      	movs	r1, #0
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f864 	bl	800637a <USBH_GetDescriptor>
 80062b2:	4603      	mov	r3, r0
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d10a      	bne.n	80062d2 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f203 3026 	addw	r0, r3, #806	; 0x326
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80062c8:	78fa      	ldrb	r2, [r7, #3]
 80062ca:	b292      	uxth	r2, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	f000 f918 	bl	8006502 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af02      	add	r7, sp, #8
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	460b      	mov	r3, r1
 80062e6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	331c      	adds	r3, #28
 80062ec:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80062ee:	887b      	ldrh	r3, [r7, #2]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062f8:	2100      	movs	r1, #0
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f83d 	bl	800637a <USBH_GetDescriptor>
 8006300:	4603      	mov	r3, r0
 8006302:	72fb      	strb	r3, [r7, #11]
 8006304:	7afb      	ldrb	r3, [r7, #11]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d107      	bne.n	800631a <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006310:	887a      	ldrh	r2, [r7, #2]
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	4618      	mov	r0, r3
 8006316:	f000 f964 	bl	80065e2 <USBH_ParseCfgDesc>
  }

  return status;
 800631a:	7afb      	ldrb	r3, [r7, #11]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	607a      	str	r2, [r7, #4]
 800632e:	461a      	mov	r2, r3
 8006330:	460b      	mov	r3, r1
 8006332:	72fb      	strb	r3, [r7, #11]
 8006334:	4613      	mov	r3, r2
 8006336:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006338:	7afb      	ldrb	r3, [r7, #11]
 800633a:	b29b      	uxth	r3, r3
 800633c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006340:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006348:	893b      	ldrh	r3, [r7, #8]
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	460b      	mov	r3, r1
 800634e:	2100      	movs	r1, #0
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f812 	bl	800637a <USBH_GetDescriptor>
 8006356:	4603      	mov	r3, r0
 8006358:	75fb      	strb	r3, [r7, #23]
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d107      	bne.n	8006370 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006366:	893a      	ldrh	r2, [r7, #8]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fa37 	bl	80067de <USBH_ParseStringDesc>
  }

  return status;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	607b      	str	r3, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	72fb      	strb	r3, [r7, #11]
 8006388:	4613      	mov	r3, r2
 800638a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	789b      	ldrb	r3, [r3, #2]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d11c      	bne.n	80063ce <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006394:	7afb      	ldrb	r3, [r7, #11]
 8006396:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800639a:	b2da      	uxtb	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2206      	movs	r2, #6
 80063a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	893a      	ldrh	r2, [r7, #8]
 80063aa:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80063ac:	893b      	ldrh	r3, [r7, #8]
 80063ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80063b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b6:	d104      	bne.n	80063c2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f240 4209 	movw	r2, #1033	; 0x409
 80063be:	829a      	strh	r2, [r3, #20]
 80063c0:	e002      	b.n	80063c8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8b3a      	ldrh	r2, [r7, #24]
 80063cc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80063ce:	8b3b      	ldrh	r3, [r7, #24]
 80063d0:	461a      	mov	r2, r3
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fa50 	bl	800687a <USBH_CtlReq>
 80063da:	4603      	mov	r3, r0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	789b      	ldrb	r3, [r3, #2]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d10f      	bne.n	8006418 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2205      	movs	r2, #5
 8006402:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006404:	78fb      	ldrb	r3, [r7, #3]
 8006406:	b29a      	uxth	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006418:	2200      	movs	r2, #0
 800641a:	2100      	movs	r1, #0
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fa2c 	bl	800687a <USBH_CtlReq>
 8006422:	4603      	mov	r3, r0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	789b      	ldrb	r3, [r3, #2]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d10e      	bne.n	800645e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2209      	movs	r2, #9
 800644a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	887a      	ldrh	r2, [r7, #2]
 8006450:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800645e:	2200      	movs	r2, #0
 8006460:	2100      	movs	r1, #0
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fa09 	bl	800687a <USBH_CtlReq>
 8006468:	4603      	mov	r3, r0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	789b      	ldrb	r3, [r3, #2]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d10f      	bne.n	80064a6 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2203      	movs	r2, #3
 8006490:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	b29a      	uxth	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80064a6:	2200      	movs	r2, #0
 80064a8:	2100      	movs	r1, #0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9e5 	bl	800687a <USBH_CtlReq>
 80064b0:	4603      	mov	r3, r0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b082      	sub	sp, #8
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	789b      	ldrb	r3, [r3, #2]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10f      	bne.n	80064ee <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2202      	movs	r2, #2
 80064d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80064e0:	78fb      	ldrb	r3, [r7, #3]
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80064ee:	2200      	movs	r2, #0
 80064f0:	2100      	movs	r1, #0
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 f9c1 	bl	800687a <USBH_CtlReq>
 80064f8:	4603      	mov	r3, r0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}

08006502 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006502:	b480      	push	{r7}
 8006504:	b085      	sub	sp, #20
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	4613      	mov	r3, r2
 800650e:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	781a      	ldrb	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	785a      	ldrb	r2, [r3, #1]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	3302      	adds	r3, #2
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	b29a      	uxth	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	3303      	adds	r3, #3
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	b29b      	uxth	r3, r3
 8006530:	021b      	lsls	r3, r3, #8
 8006532:	b29b      	uxth	r3, r3
 8006534:	4313      	orrs	r3, r2
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	791a      	ldrb	r2, [r3, #4]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	795a      	ldrb	r2, [r3, #5]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	799a      	ldrb	r2, [r3, #6]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	79da      	ldrb	r2, [r3, #7]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800655c:	88fb      	ldrh	r3, [r7, #6]
 800655e:	2b08      	cmp	r3, #8
 8006560:	d939      	bls.n	80065d6 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	3308      	adds	r3, #8
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	b29a      	uxth	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	3309      	adds	r3, #9
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	021b      	lsls	r3, r3, #8
 8006574:	b29b      	uxth	r3, r3
 8006576:	4313      	orrs	r3, r2
 8006578:	b29a      	uxth	r2, r3
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	330a      	adds	r3, #10
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	b29a      	uxth	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	330b      	adds	r3, #11
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	b29b      	uxth	r3, r3
 800658e:	021b      	lsls	r3, r3, #8
 8006590:	b29b      	uxth	r3, r3
 8006592:	4313      	orrs	r3, r2
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	330c      	adds	r3, #12
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	330d      	adds	r3, #13
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	4313      	orrs	r3, r2
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	7b9a      	ldrb	r2, [r3, #14]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	7bda      	ldrb	r2, [r3, #15]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	7c1a      	ldrb	r2, [r3, #16]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	7c5a      	ldrb	r2, [r3, #17]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	745a      	strb	r2, [r3, #17]
  }
}
 80065d6:	bf00      	nop
 80065d8:	3714      	adds	r7, #20
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b08a      	sub	sp, #40	; 0x28
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	60b9      	str	r1, [r7, #8]
 80065ec:	4613      	mov	r3, r2
 80065ee:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	781a      	ldrb	r2, [r3, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	785a      	ldrb	r2, [r3, #1]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	3302      	adds	r3, #2
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	b29a      	uxth	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	3303      	adds	r3, #3
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	b29b      	uxth	r3, r3
 8006628:	4313      	orrs	r3, r2
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	791a      	ldrb	r2, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	795a      	ldrb	r2, [r3, #5]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	799a      	ldrb	r2, [r3, #6]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	79da      	ldrb	r2, [r3, #7]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	7a1a      	ldrb	r2, [r3, #8]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006658:	88fb      	ldrh	r3, [r7, #6]
 800665a:	2b09      	cmp	r3, #9
 800665c:	d95f      	bls.n	800671e <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800665e:	2309      	movs	r3, #9
 8006660:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006662:	2300      	movs	r3, #0
 8006664:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006666:	e051      	b.n	800670c <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006668:	f107 0316 	add.w	r3, r7, #22
 800666c:	4619      	mov	r1, r3
 800666e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006670:	f000 f8e8 	bl	8006844 <USBH_GetNextDesc>
 8006674:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006678:	785b      	ldrb	r3, [r3, #1]
 800667a:	2b04      	cmp	r3, #4
 800667c:	d146      	bne.n	800670c <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800667e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006682:	221a      	movs	r2, #26
 8006684:	fb02 f303 	mul.w	r3, r2, r3
 8006688:	3308      	adds	r3, #8
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	3302      	adds	r3, #2
 8006690:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006694:	69f8      	ldr	r0, [r7, #28]
 8006696:	f000 f846 	bl	8006726 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800669a:	2300      	movs	r3, #0
 800669c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80066a4:	e022      	b.n	80066ec <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80066a6:	f107 0316 	add.w	r3, r7, #22
 80066aa:	4619      	mov	r1, r3
 80066ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066ae:	f000 f8c9 	bl	8006844 <USBH_GetNextDesc>
 80066b2:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	785b      	ldrb	r3, [r3, #1]
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	d117      	bne.n	80066ec <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80066bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066c0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80066c4:	3201      	adds	r2, #1
 80066c6:	00d2      	lsls	r2, r2, #3
 80066c8:	211a      	movs	r1, #26
 80066ca:	fb01 f303 	mul.w	r3, r1, r3
 80066ce:	4413      	add	r3, r2
 80066d0:	3308      	adds	r3, #8
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	3304      	adds	r3, #4
 80066d8:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80066da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066dc:	69b8      	ldr	r0, [r7, #24]
 80066de:	f000 f851 	bl	8006784 <USBH_ParseEPDesc>
            ep_ix++;
 80066e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80066e6:	3301      	adds	r3, #1
 80066e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	791b      	ldrb	r3, [r3, #4]
 80066f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d204      	bcs.n	8006702 <USBH_ParseCfgDesc+0x120>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	885a      	ldrh	r2, [r3, #2]
 80066fc:	8afb      	ldrh	r3, [r7, #22]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d8d1      	bhi.n	80066a6 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006702:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006706:	3301      	adds	r3, #1
 8006708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800670c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006710:	2b01      	cmp	r3, #1
 8006712:	d804      	bhi.n	800671e <USBH_ParseCfgDesc+0x13c>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	885a      	ldrh	r2, [r3, #2]
 8006718:	8afb      	ldrh	r3, [r7, #22]
 800671a:	429a      	cmp	r2, r3
 800671c:	d8a4      	bhi.n	8006668 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800671e:	bf00      	nop
 8006720:	3728      	adds	r7, #40	; 0x28
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
 800672e:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781a      	ldrb	r2, [r3, #0]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	785a      	ldrb	r2, [r3, #1]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	789a      	ldrb	r2, [r3, #2]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	78da      	ldrb	r2, [r3, #3]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	791a      	ldrb	r2, [r3, #4]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	795a      	ldrb	r2, [r3, #5]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	799a      	ldrb	r2, [r3, #6]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	79da      	ldrb	r2, [r3, #7]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	7a1a      	ldrb	r2, [r3, #8]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	721a      	strb	r2, [r3, #8]
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781a      	ldrb	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	785a      	ldrb	r2, [r3, #1]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	789a      	ldrb	r2, [r3, #2]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	78da      	ldrb	r2, [r3, #3]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	3304      	adds	r3, #4
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	3305      	adds	r3, #5
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	b29b      	uxth	r3, r3
 80067be:	021b      	lsls	r3, r3, #8
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	4313      	orrs	r3, r2
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	799a      	ldrb	r2, [r3, #6]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	719a      	strb	r2, [r3, #6]
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80067de:	b480      	push	{r7}
 80067e0:	b087      	sub	sp, #28
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	4613      	mov	r3, r2
 80067ea:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3301      	adds	r3, #1
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d120      	bne.n	8006838 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	1e9a      	subs	r2, r3, #2
 80067fc:	88fb      	ldrh	r3, [r7, #6]
 80067fe:	4293      	cmp	r3, r2
 8006800:	bf28      	it	cs
 8006802:	4613      	movcs	r3, r2
 8006804:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3302      	adds	r3, #2
 800680a:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800680c:	2300      	movs	r3, #0
 800680e:	82fb      	strh	r3, [r7, #22]
 8006810:	e00b      	b.n	800682a <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006812:	8afb      	ldrh	r3, [r7, #22]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	701a      	strb	r2, [r3, #0]
      pdest++;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	3301      	adds	r3, #1
 8006822:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006824:	8afb      	ldrh	r3, [r7, #22]
 8006826:	3302      	adds	r3, #2
 8006828:	82fb      	strh	r3, [r7, #22]
 800682a:	8afa      	ldrh	r2, [r7, #22]
 800682c:	8abb      	ldrh	r3, [r7, #20]
 800682e:	429a      	cmp	r2, r3
 8006830:	d3ef      	bcc.n	8006812 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
  }
}
 8006838:	bf00      	nop
 800683a:	371c      	adds	r7, #28
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	881a      	ldrh	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	b29b      	uxth	r3, r3
 8006858:	4413      	add	r3, r2
 800685a:	b29a      	uxth	r2, r3
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4413      	add	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800686c:	68fb      	ldr	r3, [r7, #12]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b086      	sub	sp, #24
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	4613      	mov	r3, r2
 8006886:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006888:	2301      	movs	r3, #1
 800688a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	789b      	ldrb	r3, [r3, #2]
 8006890:	2b01      	cmp	r3, #1
 8006892:	d002      	beq.n	800689a <USBH_CtlReq+0x20>
 8006894:	2b02      	cmp	r3, #2
 8006896:	d00f      	beq.n	80068b8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006898:	e027      	b.n	80068ea <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	88fa      	ldrh	r2, [r7, #6]
 80068a4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2202      	movs	r2, #2
 80068b0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80068b2:	2301      	movs	r3, #1
 80068b4:	75fb      	strb	r3, [r7, #23]
      break;
 80068b6:	e018      	b.n	80068ea <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f81b 	bl	80068f4 <USBH_HandleControl>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d002      	beq.n	80068ce <USBH_CtlReq+0x54>
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d106      	bne.n	80068dc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	761a      	strb	r2, [r3, #24]
      break;
 80068da:	e005      	b.n	80068e8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b02      	cmp	r3, #2
 80068e0:	d102      	bne.n	80068e8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	709a      	strb	r2, [r3, #2]
      break;
 80068e8:	bf00      	nop
  }
  return status;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80068fc:	2301      	movs	r3, #1
 80068fe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006900:	2300      	movs	r3, #0
 8006902:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	7e1b      	ldrb	r3, [r3, #24]
 8006908:	3b01      	subs	r3, #1
 800690a:	2b0a      	cmp	r3, #10
 800690c:	f200 8156 	bhi.w	8006bbc <USBH_HandleControl+0x2c8>
 8006910:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <USBH_HandleControl+0x24>)
 8006912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006916:	bf00      	nop
 8006918:	08006945 	.word	0x08006945
 800691c:	0800695f 	.word	0x0800695f
 8006920:	080069c9 	.word	0x080069c9
 8006924:	080069ef 	.word	0x080069ef
 8006928:	08006a27 	.word	0x08006a27
 800692c:	08006a51 	.word	0x08006a51
 8006930:	08006aa3 	.word	0x08006aa3
 8006934:	08006ac5 	.word	0x08006ac5
 8006938:	08006b01 	.word	0x08006b01
 800693c:	08006b27 	.word	0x08006b27
 8006940:	08006b65 	.word	0x08006b65
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f103 0110 	add.w	r1, r3, #16
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	795b      	ldrb	r3, [r3, #5]
 800694e:	461a      	mov	r2, r3
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f943 	bl	8006bdc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	761a      	strb	r2, [r3, #24]
      break;
 800695c:	e139      	b.n	8006bd2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	795b      	ldrb	r3, [r3, #5]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc93 	bl	8007290 <USBH_LL_GetURBState>
 800696a:	4603      	mov	r3, r0
 800696c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800696e:	7bbb      	ldrb	r3, [r7, #14]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d11e      	bne.n	80069b2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	7c1b      	ldrb	r3, [r3, #16]
 8006978:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800697c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	8adb      	ldrh	r3, [r3, #22]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006986:	7b7b      	ldrb	r3, [r7, #13]
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d103      	bne.n	8006994 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2203      	movs	r2, #3
 8006990:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006992:	e115      	b.n	8006bc0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2205      	movs	r2, #5
 8006998:	761a      	strb	r2, [r3, #24]
      break;
 800699a:	e111      	b.n	8006bc0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800699c:	7b7b      	ldrb	r3, [r7, #13]
 800699e:	2b80      	cmp	r3, #128	; 0x80
 80069a0:	d103      	bne.n	80069aa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2209      	movs	r2, #9
 80069a6:	761a      	strb	r2, [r3, #24]
      break;
 80069a8:	e10a      	b.n	8006bc0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2207      	movs	r2, #7
 80069ae:	761a      	strb	r2, [r3, #24]
      break;
 80069b0:	e106      	b.n	8006bc0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	d003      	beq.n	80069c0 <USBH_HandleControl+0xcc>
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	f040 8100 	bne.w	8006bc0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	220b      	movs	r2, #11
 80069c4:	761a      	strb	r2, [r3, #24]
      break;
 80069c6:	e0fb      	b.n	8006bc0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6899      	ldr	r1, [r3, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	899a      	ldrh	r2, [r3, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	791b      	ldrb	r3, [r3, #4]
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 f93a 	bl	8006c5a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2204      	movs	r2, #4
 80069ea:	761a      	strb	r2, [r3, #24]
      break;
 80069ec:	e0f1      	b.n	8006bd2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	791b      	ldrb	r3, [r3, #4]
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fc4b 	bl	8007290 <USBH_LL_GetURBState>
 80069fa:	4603      	mov	r3, r0
 80069fc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d102      	bne.n	8006a0a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2209      	movs	r2, #9
 8006a08:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006a0a:	7bbb      	ldrb	r3, [r7, #14]
 8006a0c:	2b05      	cmp	r3, #5
 8006a0e:	d102      	bne.n	8006a16 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006a10:	2303      	movs	r3, #3
 8006a12:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006a14:	e0d6      	b.n	8006bc4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	f040 80d3 	bne.w	8006bc4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	220b      	movs	r2, #11
 8006a22:	761a      	strb	r2, [r3, #24]
      break;
 8006a24:	e0ce      	b.n	8006bc4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6899      	ldr	r1, [r3, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	899a      	ldrh	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	795b      	ldrb	r3, [r3, #5]
 8006a32:	2001      	movs	r0, #1
 8006a34:	9000      	str	r0, [sp, #0]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f8ea 	bl	8006c10 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2206      	movs	r2, #6
 8006a4c:	761a      	strb	r2, [r3, #24]
      break;
 8006a4e:	e0c0      	b.n	8006bd2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	795b      	ldrb	r3, [r3, #5]
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fc1a 	bl	8007290 <USBH_LL_GetURBState>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006a60:	7bbb      	ldrb	r3, [r7, #14]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d103      	bne.n	8006a6e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2207      	movs	r2, #7
 8006a6a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006a6c:	e0ac      	b.n	8006bc8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	2b05      	cmp	r3, #5
 8006a72:	d105      	bne.n	8006a80 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	220c      	movs	r2, #12
 8006a78:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7e:	e0a3      	b.n	8006bc8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d103      	bne.n	8006a8e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2205      	movs	r2, #5
 8006a8a:	761a      	strb	r2, [r3, #24]
      break;
 8006a8c:	e09c      	b.n	8006bc8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006a8e:	7bbb      	ldrb	r3, [r7, #14]
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	f040 8099 	bne.w	8006bc8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	220b      	movs	r2, #11
 8006a9a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8006aa0:	e092      	b.n	8006bc8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	791b      	ldrb	r3, [r3, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f8d5 	bl	8006c5a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2208      	movs	r2, #8
 8006ac0:	761a      	strb	r2, [r3, #24]

      break;
 8006ac2:	e086      	b.n	8006bd2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	791b      	ldrb	r3, [r3, #4]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fbe0 	bl	8007290 <USBH_LL_GetURBState>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d105      	bne.n	8006ae6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	220d      	movs	r2, #13
 8006ade:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006ae4:	e072      	b.n	8006bcc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006ae6:	7bbb      	ldrb	r3, [r7, #14]
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d103      	bne.n	8006af4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	220b      	movs	r2, #11
 8006af0:	761a      	strb	r2, [r3, #24]
      break;
 8006af2:	e06b      	b.n	8006bcc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006af4:	7bbb      	ldrb	r3, [r7, #14]
 8006af6:	2b05      	cmp	r3, #5
 8006af8:	d168      	bne.n	8006bcc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006afa:	2303      	movs	r3, #3
 8006afc:	73fb      	strb	r3, [r7, #15]
      break;
 8006afe:	e065      	b.n	8006bcc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	795b      	ldrb	r3, [r3, #5]
 8006b04:	2201      	movs	r2, #1
 8006b06:	9200      	str	r2, [sp, #0]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f87f 	bl	8006c10 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	220a      	movs	r2, #10
 8006b22:	761a      	strb	r2, [r3, #24]
      break;
 8006b24:	e055      	b.n	8006bd2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	795b      	ldrb	r3, [r3, #5]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fbaf 	bl	8007290 <USBH_LL_GetURBState>
 8006b32:	4603      	mov	r3, r0
 8006b34:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d105      	bne.n	8006b48 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	220d      	movs	r2, #13
 8006b44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006b46:	e043      	b.n	8006bd0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d103      	bne.n	8006b56 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2209      	movs	r2, #9
 8006b52:	761a      	strb	r2, [r3, #24]
      break;
 8006b54:	e03c      	b.n	8006bd0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d139      	bne.n	8006bd0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	220b      	movs	r2, #11
 8006b60:	761a      	strb	r2, [r3, #24]
      break;
 8006b62:	e035      	b.n	8006bd0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	7e5b      	ldrb	r3, [r3, #25]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	765a      	strb	r2, [r3, #25]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7e5b      	ldrb	r3, [r3, #25]
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	d806      	bhi.n	8006b86 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006b84:	e025      	b.n	8006bd2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b8c:	2106      	movs	r1, #6
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	795b      	ldrb	r3, [r3, #5]
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f8e8 	bl	8006d74 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	791b      	ldrb	r3, [r3, #4]
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f8e2 	bl	8006d74 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bba:	e00a      	b.n	8006bd2 <USBH_HandleControl+0x2de>

    default:
      break;
 8006bbc:	bf00      	nop
 8006bbe:	e008      	b.n	8006bd2 <USBH_HandleControl+0x2de>
      break;
 8006bc0:	bf00      	nop
 8006bc2:	e006      	b.n	8006bd2 <USBH_HandleControl+0x2de>
      break;
 8006bc4:	bf00      	nop
 8006bc6:	e004      	b.n	8006bd2 <USBH_HandleControl+0x2de>
      break;
 8006bc8:	bf00      	nop
 8006bca:	e002      	b.n	8006bd2 <USBH_HandleControl+0x2de>
      break;
 8006bcc:	bf00      	nop
 8006bce:	e000      	b.n	8006bd2 <USBH_HandleControl+0x2de>
      break;
 8006bd0:	bf00      	nop
  }

  return status;
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af04      	add	r7, sp, #16
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	60b9      	str	r1, [r7, #8]
 8006be6:	4613      	mov	r3, r2
 8006be8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006bea:	79f9      	ldrb	r1, [r7, #7]
 8006bec:	2300      	movs	r3, #0
 8006bee:	9303      	str	r3, [sp, #12]
 8006bf0:	2308      	movs	r3, #8
 8006bf2:	9302      	str	r3, [sp, #8]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	9301      	str	r3, [sp, #4]
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	9300      	str	r3, [sp, #0]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2200      	movs	r2, #0
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fb14 	bl	800722e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af04      	add	r7, sp, #16
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	60b9      	str	r1, [r7, #8]
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	460b      	mov	r3, r1
 8006c20:	80fb      	strh	r3, [r7, #6]
 8006c22:	4613      	mov	r3, r2
 8006c24:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006c34:	7979      	ldrb	r1, [r7, #5]
 8006c36:	7e3b      	ldrb	r3, [r7, #24]
 8006c38:	9303      	str	r3, [sp, #12]
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	9302      	str	r3, [sp, #8]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	2301      	movs	r3, #1
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	2300      	movs	r3, #0
 8006c48:	2200      	movs	r2, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f000 faef 	bl	800722e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b088      	sub	sp, #32
 8006c5e:	af04      	add	r7, sp, #16
 8006c60:	60f8      	str	r0, [r7, #12]
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	4611      	mov	r1, r2
 8006c66:	461a      	mov	r2, r3
 8006c68:	460b      	mov	r3, r1
 8006c6a:	80fb      	strh	r3, [r7, #6]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006c70:	7979      	ldrb	r1, [r7, #5]
 8006c72:	2300      	movs	r3, #0
 8006c74:	9303      	str	r3, [sp, #12]
 8006c76:	88fb      	ldrh	r3, [r7, #6]
 8006c78:	9302      	str	r3, [sp, #8]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	9301      	str	r3, [sp, #4]
 8006c7e:	2301      	movs	r3, #1
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	2300      	movs	r3, #0
 8006c84:	2201      	movs	r2, #1
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 fad1 	bl	800722e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006c8c:	2300      	movs	r3, #0

}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b088      	sub	sp, #32
 8006c9a:	af04      	add	r7, sp, #16
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	71fb      	strb	r3, [r7, #7]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006cac:	79fb      	ldrb	r3, [r7, #7]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	79b9      	ldrb	r1, [r7, #6]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	9203      	str	r2, [sp, #12]
 8006cb6:	9302      	str	r3, [sp, #8]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	9301      	str	r3, [sp, #4]
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 fab2 	bl	800722e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af04      	add	r7, sp, #16
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	4608      	mov	r0, r1
 8006cde:	4611      	mov	r1, r2
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	70fb      	strb	r3, [r7, #3]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	70bb      	strb	r3, [r7, #2]
 8006cea:	4613      	mov	r3, r2
 8006cec:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006cee:	7878      	ldrb	r0, [r7, #1]
 8006cf0:	78ba      	ldrb	r2, [r7, #2]
 8006cf2:	78f9      	ldrb	r1, [r7, #3]
 8006cf4:	8b3b      	ldrh	r3, [r7, #24]
 8006cf6:	9302      	str	r3, [sp, #8]
 8006cf8:	7d3b      	ldrb	r3, [r7, #20]
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	7c3b      	ldrb	r3, [r7, #16]
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	4603      	mov	r3, r0
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fa45 	bl	8007192 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b082      	sub	sp, #8
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fa64 	bl	80071f0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f836 	bl	8006db0 <USBH_GetFreePipe>
 8006d44:	4603      	mov	r3, r0
 8006d46:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00a      	beq.n	8006d68 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8006d52:	78fa      	ldrb	r2, [r7, #3]
 8006d54:	89fb      	ldrh	r3, [r7, #14]
 8006d56:	f003 030f 	and.w	r3, r3, #15
 8006d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	33e0      	adds	r3, #224	; 0xe0
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	440b      	add	r3, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006d68:	89fb      	ldrh	r3, [r7, #14]
 8006d6a:	b2db      	uxtb	r3, r3
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	2b0a      	cmp	r3, #10
 8006d84:	d80d      	bhi.n	8006da2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006d86:	78fb      	ldrb	r3, [r7, #3]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	33e0      	adds	r3, #224	; 0xe0
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006d98:	6879      	ldr	r1, [r7, #4]
 8006d9a:	33e0      	adds	r3, #224	; 0xe0
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]
 8006dc0:	e00f      	b.n	8006de2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	33e0      	adds	r3, #224	; 0xe0
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	e007      	b.n	8006dec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	3301      	adds	r3, #1
 8006de0:	73fb      	strb	r3, [r7, #15]
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	2b0a      	cmp	r3, #10
 8006de6:	d9ec      	bls.n	8006dc2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	490e      	ldr	r1, [pc, #56]	; (8006e38 <MX_USB_HOST_Init+0x40>)
 8006e00:	480e      	ldr	r0, [pc, #56]	; (8006e3c <MX_USB_HOST_Init+0x44>)
 8006e02:	f7fe fcc5 	bl	8005790 <USBH_Init>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006e0c:	f7f9 fefa 	bl	8000c04 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 8006e10:	490b      	ldr	r1, [pc, #44]	; (8006e40 <MX_USB_HOST_Init+0x48>)
 8006e12:	480a      	ldr	r0, [pc, #40]	; (8006e3c <MX_USB_HOST_Init+0x44>)
 8006e14:	f7fe fd4a 	bl	80058ac <USBH_RegisterClass>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d001      	beq.n	8006e22 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006e1e:	f7f9 fef1 	bl	8000c04 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006e22:	4806      	ldr	r0, [pc, #24]	; (8006e3c <MX_USB_HOST_Init+0x44>)
 8006e24:	f7fe fdce 	bl	80059c4 <USBH_Start>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006e2e:	f7f9 fee9 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006e32:	bf00      	nop
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	08006e59 	.word	0x08006e59
 8006e3c:	200001bc 	.word	0x200001bc
 8006e40:	20000018 	.word	0x20000018

08006e44 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006e48:	4802      	ldr	r0, [pc, #8]	; (8006e54 <MX_USB_HOST_Process+0x10>)
 8006e4a:	f7fe fdcb 	bl	80059e4 <USBH_Process>
}
 8006e4e:	bf00      	nop
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	200001bc 	.word	0x200001bc

08006e58 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	460b      	mov	r3, r1
 8006e62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d819      	bhi.n	8006ea0 <USBH_UserProcess+0x48>
 8006e6c:	a201      	add	r2, pc, #4	; (adr r2, 8006e74 <USBH_UserProcess+0x1c>)
 8006e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e72:	bf00      	nop
 8006e74:	08006ea1 	.word	0x08006ea1
 8006e78:	08006e91 	.word	0x08006e91
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006e99 	.word	0x08006e99
 8006e84:	08006e89 	.word	0x08006e89
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006e88:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <USBH_UserProcess+0x58>)
 8006e8a:	2203      	movs	r2, #3
 8006e8c:	701a      	strb	r2, [r3, #0]
  break;
 8006e8e:	e008      	b.n	8006ea2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <USBH_UserProcess+0x58>)
 8006e92:	2202      	movs	r2, #2
 8006e94:	701a      	strb	r2, [r3, #0]
  break;
 8006e96:	e004      	b.n	8006ea2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006e98:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <USBH_UserProcess+0x58>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	701a      	strb	r2, [r3, #0]
  break;
 8006e9e:	e000      	b.n	8006ea2 <USBH_UserProcess+0x4a>

  default:
  break;
 8006ea0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006ea2:	bf00      	nop
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	200000b8 	.word	0x200000b8

08006eb4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	; 0x28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ebc:	f107 0314 	add.w	r3, r7, #20
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	605a      	str	r2, [r3, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
 8006ec8:	60da      	str	r2, [r3, #12]
 8006eca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed4:	d13a      	bne.n	8006f4c <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	613b      	str	r3, [r7, #16]
 8006eda:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <HAL_HCD_MspInit+0xa0>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <HAL_HCD_MspInit+0xa0>)
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ee6:	4b1b      	ldr	r3, [pc, #108]	; (8006f54 <HAL_HCD_MspInit+0xa0>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006ef2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f00:	2303      	movs	r3, #3
 8006f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006f04:	230a      	movs	r3, #10
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4812      	ldr	r0, [pc, #72]	; (8006f58 <HAL_HCD_MspInit+0xa4>)
 8006f10:	f7fa f906 	bl	8001120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f14:	4b0f      	ldr	r3, [pc, #60]	; (8006f54 <HAL_HCD_MspInit+0xa0>)
 8006f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f18:	4a0e      	ldr	r2, [pc, #56]	; (8006f54 <HAL_HCD_MspInit+0xa0>)
 8006f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1e:	6353      	str	r3, [r2, #52]	; 0x34
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <HAL_HCD_MspInit+0xa0>)
 8006f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f28:	4a0a      	ldr	r2, [pc, #40]	; (8006f54 <HAL_HCD_MspInit+0xa0>)
 8006f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f2e:	6453      	str	r3, [r2, #68]	; 0x44
 8006f30:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <HAL_HCD_MspInit+0xa0>)
 8006f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	2100      	movs	r1, #0
 8006f40:	2043      	movs	r0, #67	; 0x43
 8006f42:	f7fa f8b6 	bl	80010b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006f46:	2043      	movs	r0, #67	; 0x43
 8006f48:	f7fa f8cf 	bl	80010ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f4c:	bf00      	nop
 8006f4e:	3728      	adds	r7, #40	; 0x28
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40023800 	.word	0x40023800
 8006f58:	40020000 	.word	0x40020000

08006f5c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff f90d 	bl	800618a <USBH_LL_IncTimer>
}
 8006f70:	bf00      	nop
 8006f72:	3708      	adds	r7, #8
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7ff f945 	bl	8006216 <USBH_LL_Connect>
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff f94e 	bl	8006244 <USBH_LL_Disconnect>
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	460b      	mov	r3, r1
 8006fba:	70fb      	strb	r3, [r7, #3]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7ff f8ff 	bl	80061de <USBH_LL_PortEnabled>
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7ff f8ff 	bl	80061fa <USBH_LL_PortDisabled>
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007012:	2b01      	cmp	r3, #1
 8007014:	d12a      	bne.n	800706c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007016:	4a18      	ldr	r2, [pc, #96]	; (8007078 <USBH_LL_Init+0x74>)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a15      	ldr	r2, [pc, #84]	; (8007078 <USBH_LL_Init+0x74>)
 8007022:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007026:	4b14      	ldr	r3, [pc, #80]	; (8007078 <USBH_LL_Init+0x74>)
 8007028:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800702c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800702e:	4b12      	ldr	r3, [pc, #72]	; (8007078 <USBH_LL_Init+0x74>)
 8007030:	2208      	movs	r2, #8
 8007032:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007034:	4b10      	ldr	r3, [pc, #64]	; (8007078 <USBH_LL_Init+0x74>)
 8007036:	2201      	movs	r2, #1
 8007038:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <USBH_LL_Init+0x74>)
 800703c:	2200      	movs	r2, #0
 800703e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007040:	4b0d      	ldr	r3, [pc, #52]	; (8007078 <USBH_LL_Init+0x74>)
 8007042:	2202      	movs	r2, #2
 8007044:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007046:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <USBH_LL_Init+0x74>)
 8007048:	2200      	movs	r2, #0
 800704a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800704c:	480a      	ldr	r0, [pc, #40]	; (8007078 <USBH_LL_Init+0x74>)
 800704e:	f7fa fa1e 	bl	800148e <HAL_HCD_Init>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007058:	f7f9 fdd4 	bl	8000c04 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800705c:	4806      	ldr	r0, [pc, #24]	; (8007078 <USBH_LL_Init+0x74>)
 800705e:	f7fa fdfb 	bl	8001c58 <HAL_HCD_GetCurrentFrame>
 8007062:	4603      	mov	r3, r0
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7ff f880 	bl	800616c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000594 	.word	0x20000594

0800707c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007092:	4618      	mov	r0, r3
 8007094:	f7fa fd6a 	bl	8001b6c <HAL_HCD_Start>
 8007098:	4603      	mov	r3, r0
 800709a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f952 	bl	8007348 <USBH_Get_USB_Status>
 80070a4:	4603      	mov	r3, r0
 80070a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fa fd72 	bl	8001bb2 <HAL_HCD_Stop>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 f937 	bl	8007348 <USBH_Get_USB_Status>
 80070da:	4603      	mov	r3, r0
 80070dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070de:	7bbb      	ldrb	r3, [r7, #14]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80070f0:	2301      	movs	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fa fdba 	bl	8001c74 <HAL_HCD_GetCurrentSpeed>
 8007100:	4603      	mov	r3, r0
 8007102:	2b02      	cmp	r3, #2
 8007104:	d00c      	beq.n	8007120 <USBH_LL_GetSpeed+0x38>
 8007106:	2b02      	cmp	r3, #2
 8007108:	d80d      	bhi.n	8007126 <USBH_LL_GetSpeed+0x3e>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <USBH_LL_GetSpeed+0x2c>
 800710e:	2b01      	cmp	r3, #1
 8007110:	d003      	beq.n	800711a <USBH_LL_GetSpeed+0x32>
 8007112:	e008      	b.n	8007126 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007114:	2300      	movs	r3, #0
 8007116:	73fb      	strb	r3, [r7, #15]
    break;
 8007118:	e008      	b.n	800712c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800711a:	2301      	movs	r3, #1
 800711c:	73fb      	strb	r3, [r7, #15]
    break;
 800711e:	e005      	b.n	800712c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007120:	2302      	movs	r3, #2
 8007122:	73fb      	strb	r3, [r7, #15]
    break;
 8007124:	e002      	b.n	800712c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007126:	2301      	movs	r3, #1
 8007128:	73fb      	strb	r3, [r7, #15]
    break;
 800712a:	bf00      	nop
  }
  return  speed;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007142:	2300      	movs	r3, #0
 8007144:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800714c:	4618      	mov	r0, r3
 800714e:	f7fa fd4d 	bl	8001bec <HAL_HCD_ResetPort>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	4618      	mov	r0, r3
 800715a:	f000 f8f5 	bl	8007348 <USBH_Get_USB_Status>
 800715e:	4603      	mov	r3, r0
 8007160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007162:	7bbb      	ldrb	r3, [r7, #14]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800717e:	78fa      	ldrb	r2, [r7, #3]
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7fa fd54 	bl	8001c30 <HAL_HCD_HC_GetXferCount>
 8007188:	4603      	mov	r3, r0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007192:	b590      	push	{r4, r7, lr}
 8007194:	b089      	sub	sp, #36	; 0x24
 8007196:	af04      	add	r7, sp, #16
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	4608      	mov	r0, r1
 800719c:	4611      	mov	r1, r2
 800719e:	461a      	mov	r2, r3
 80071a0:	4603      	mov	r3, r0
 80071a2:	70fb      	strb	r3, [r7, #3]
 80071a4:	460b      	mov	r3, r1
 80071a6:	70bb      	strb	r3, [r7, #2]
 80071a8:	4613      	mov	r3, r2
 80071aa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80071ba:	787c      	ldrb	r4, [r7, #1]
 80071bc:	78ba      	ldrb	r2, [r7, #2]
 80071be:	78f9      	ldrb	r1, [r7, #3]
 80071c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80071c2:	9302      	str	r3, [sp, #8]
 80071c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80071c8:	9301      	str	r3, [sp, #4]
 80071ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	4623      	mov	r3, r4
 80071d2:	f7fa f9be 	bl	8001552 <HAL_HCD_HC_Init>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f8b3 	bl	8007348 <USBH_Get_USB_Status>
 80071e2:	4603      	mov	r3, r0
 80071e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd90      	pop	{r4, r7, pc}

080071f0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f7fa fa2e 	bl	8001670 <HAL_HCD_HC_Halt>
 8007214:	4603      	mov	r3, r0
 8007216:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007218:	7bfb      	ldrb	r3, [r7, #15]
 800721a:	4618      	mov	r0, r3
 800721c:	f000 f894 	bl	8007348 <USBH_Get_USB_Status>
 8007220:	4603      	mov	r3, r0
 8007222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007224:	7bbb      	ldrb	r3, [r7, #14]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800722e:	b590      	push	{r4, r7, lr}
 8007230:	b089      	sub	sp, #36	; 0x24
 8007232:	af04      	add	r7, sp, #16
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	4608      	mov	r0, r1
 8007238:	4611      	mov	r1, r2
 800723a:	461a      	mov	r2, r3
 800723c:	4603      	mov	r3, r0
 800723e:	70fb      	strb	r3, [r7, #3]
 8007240:	460b      	mov	r3, r1
 8007242:	70bb      	strb	r3, [r7, #2]
 8007244:	4613      	mov	r3, r2
 8007246:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007256:	787c      	ldrb	r4, [r7, #1]
 8007258:	78ba      	ldrb	r2, [r7, #2]
 800725a:	78f9      	ldrb	r1, [r7, #3]
 800725c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007260:	9303      	str	r3, [sp, #12]
 8007262:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007264:	9302      	str	r3, [sp, #8]
 8007266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007268:	9301      	str	r3, [sp, #4]
 800726a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	4623      	mov	r3, r4
 8007272:	f7fa fa21 	bl	80016b8 <HAL_HCD_HC_SubmitRequest>
 8007276:	4603      	mov	r3, r0
 8007278:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	4618      	mov	r0, r3
 800727e:	f000 f863 	bl	8007348 <USBH_Get_USB_Status>
 8007282:	4603      	mov	r3, r0
 8007284:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007286:	7bbb      	ldrb	r3, [r7, #14]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	bd90      	pop	{r4, r7, pc}

08007290 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7fa fcae 	bl	8001c08 <HAL_HCD_HC_GetURBState>
 80072ac:	4603      	mov	r3, r0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80072c2:	20c8      	movs	r0, #200	; 0xc8
 80072c4:	f7f9 fdf6 	bl	8000eb4 <HAL_Delay>
  return USBH_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	460b      	mov	r3, r1
 80072dc:	70fb      	strb	r3, [r7, #3]
 80072de:	4613      	mov	r3, r2
 80072e0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072e8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	212c      	movs	r1, #44	; 0x2c
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	4413      	add	r3, r2
 80072f6:	333b      	adds	r3, #59	; 0x3b
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	212c      	movs	r1, #44	; 0x2c
 8007304:	fb01 f303 	mul.w	r3, r1, r3
 8007308:	4413      	add	r3, r2
 800730a:	3354      	adds	r3, #84	; 0x54
 800730c:	78ba      	ldrb	r2, [r7, #2]
 800730e:	701a      	strb	r2, [r3, #0]
 8007310:	e008      	b.n	8007324 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	212c      	movs	r1, #44	; 0x2c
 8007318:	fb01 f303 	mul.w	r3, r1, r3
 800731c:	4413      	add	r3, r2
 800731e:	3355      	adds	r3, #85	; 0x55
 8007320:	78ba      	ldrb	r2, [r7, #2]
 8007322:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7f9 fdba 	bl	8000eb4 <HAL_Delay>
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	2b03      	cmp	r3, #3
 800735a:	d817      	bhi.n	800738c <USBH_Get_USB_Status+0x44>
 800735c:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <USBH_Get_USB_Status+0x1c>)
 800735e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007362:	bf00      	nop
 8007364:	08007375 	.word	0x08007375
 8007368:	0800737b 	.word	0x0800737b
 800736c:	08007381 	.word	0x08007381
 8007370:	08007387 	.word	0x08007387
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
    break;
 8007378:	e00b      	b.n	8007392 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800737a:	2302      	movs	r3, #2
 800737c:	73fb      	strb	r3, [r7, #15]
    break;
 800737e:	e008      	b.n	8007392 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007380:	2301      	movs	r3, #1
 8007382:	73fb      	strb	r3, [r7, #15]
    break;
 8007384:	e005      	b.n	8007392 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007386:	2302      	movs	r3, #2
 8007388:	73fb      	strb	r3, [r7, #15]
    break;
 800738a:	e002      	b.n	8007392 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800738c:	2302      	movs	r3, #2
 800738e:	73fb      	strb	r3, [r7, #15]
    break;
 8007390:	bf00      	nop
  }
  return usb_status;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <__libc_init_array>:
 80073a0:	b570      	push	{r4, r5, r6, lr}
 80073a2:	4d0d      	ldr	r5, [pc, #52]	; (80073d8 <__libc_init_array+0x38>)
 80073a4:	4c0d      	ldr	r4, [pc, #52]	; (80073dc <__libc_init_array+0x3c>)
 80073a6:	1b64      	subs	r4, r4, r5
 80073a8:	10a4      	asrs	r4, r4, #2
 80073aa:	2600      	movs	r6, #0
 80073ac:	42a6      	cmp	r6, r4
 80073ae:	d109      	bne.n	80073c4 <__libc_init_array+0x24>
 80073b0:	4d0b      	ldr	r5, [pc, #44]	; (80073e0 <__libc_init_array+0x40>)
 80073b2:	4c0c      	ldr	r4, [pc, #48]	; (80073e4 <__libc_init_array+0x44>)
 80073b4:	f000 f906 	bl	80075c4 <_init>
 80073b8:	1b64      	subs	r4, r4, r5
 80073ba:	10a4      	asrs	r4, r4, #2
 80073bc:	2600      	movs	r6, #0
 80073be:	42a6      	cmp	r6, r4
 80073c0:	d105      	bne.n	80073ce <__libc_init_array+0x2e>
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
 80073c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c8:	4798      	blx	r3
 80073ca:	3601      	adds	r6, #1
 80073cc:	e7ee      	b.n	80073ac <__libc_init_array+0xc>
 80073ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80073d2:	4798      	blx	r3
 80073d4:	3601      	adds	r6, #1
 80073d6:	e7f2      	b.n	80073be <__libc_init_array+0x1e>
 80073d8:	080076a0 	.word	0x080076a0
 80073dc:	080076a0 	.word	0x080076a0
 80073e0:	080076a0 	.word	0x080076a0
 80073e4:	080076a4 	.word	0x080076a4

080073e8 <malloc>:
 80073e8:	4b02      	ldr	r3, [pc, #8]	; (80073f4 <malloc+0xc>)
 80073ea:	4601      	mov	r1, r0
 80073ec:	6818      	ldr	r0, [r3, #0]
 80073ee:	f000 b863 	b.w	80074b8 <_malloc_r>
 80073f2:	bf00      	nop
 80073f4:	20000038 	.word	0x20000038

080073f8 <free>:
 80073f8:	4b02      	ldr	r3, [pc, #8]	; (8007404 <free+0xc>)
 80073fa:	4601      	mov	r1, r0
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	f000 b80b 	b.w	8007418 <_free_r>
 8007402:	bf00      	nop
 8007404:	20000038 	.word	0x20000038

08007408 <memset>:
 8007408:	4402      	add	r2, r0
 800740a:	4603      	mov	r3, r0
 800740c:	4293      	cmp	r3, r2
 800740e:	d100      	bne.n	8007412 <memset+0xa>
 8007410:	4770      	bx	lr
 8007412:	f803 1b01 	strb.w	r1, [r3], #1
 8007416:	e7f9      	b.n	800740c <memset+0x4>

08007418 <_free_r>:
 8007418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800741a:	2900      	cmp	r1, #0
 800741c:	d048      	beq.n	80074b0 <_free_r+0x98>
 800741e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007422:	9001      	str	r0, [sp, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f1a1 0404 	sub.w	r4, r1, #4
 800742a:	bfb8      	it	lt
 800742c:	18e4      	addlt	r4, r4, r3
 800742e:	f000 f8ad 	bl	800758c <__malloc_lock>
 8007432:	4a20      	ldr	r2, [pc, #128]	; (80074b4 <_free_r+0x9c>)
 8007434:	9801      	ldr	r0, [sp, #4]
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	4615      	mov	r5, r2
 800743a:	b933      	cbnz	r3, 800744a <_free_r+0x32>
 800743c:	6063      	str	r3, [r4, #4]
 800743e:	6014      	str	r4, [r2, #0]
 8007440:	b003      	add	sp, #12
 8007442:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007446:	f000 b8a7 	b.w	8007598 <__malloc_unlock>
 800744a:	42a3      	cmp	r3, r4
 800744c:	d90b      	bls.n	8007466 <_free_r+0x4e>
 800744e:	6821      	ldr	r1, [r4, #0]
 8007450:	1862      	adds	r2, r4, r1
 8007452:	4293      	cmp	r3, r2
 8007454:	bf04      	itt	eq
 8007456:	681a      	ldreq	r2, [r3, #0]
 8007458:	685b      	ldreq	r3, [r3, #4]
 800745a:	6063      	str	r3, [r4, #4]
 800745c:	bf04      	itt	eq
 800745e:	1852      	addeq	r2, r2, r1
 8007460:	6022      	streq	r2, [r4, #0]
 8007462:	602c      	str	r4, [r5, #0]
 8007464:	e7ec      	b.n	8007440 <_free_r+0x28>
 8007466:	461a      	mov	r2, r3
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	b10b      	cbz	r3, 8007470 <_free_r+0x58>
 800746c:	42a3      	cmp	r3, r4
 800746e:	d9fa      	bls.n	8007466 <_free_r+0x4e>
 8007470:	6811      	ldr	r1, [r2, #0]
 8007472:	1855      	adds	r5, r2, r1
 8007474:	42a5      	cmp	r5, r4
 8007476:	d10b      	bne.n	8007490 <_free_r+0x78>
 8007478:	6824      	ldr	r4, [r4, #0]
 800747a:	4421      	add	r1, r4
 800747c:	1854      	adds	r4, r2, r1
 800747e:	42a3      	cmp	r3, r4
 8007480:	6011      	str	r1, [r2, #0]
 8007482:	d1dd      	bne.n	8007440 <_free_r+0x28>
 8007484:	681c      	ldr	r4, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	6053      	str	r3, [r2, #4]
 800748a:	4421      	add	r1, r4
 800748c:	6011      	str	r1, [r2, #0]
 800748e:	e7d7      	b.n	8007440 <_free_r+0x28>
 8007490:	d902      	bls.n	8007498 <_free_r+0x80>
 8007492:	230c      	movs	r3, #12
 8007494:	6003      	str	r3, [r0, #0]
 8007496:	e7d3      	b.n	8007440 <_free_r+0x28>
 8007498:	6825      	ldr	r5, [r4, #0]
 800749a:	1961      	adds	r1, r4, r5
 800749c:	428b      	cmp	r3, r1
 800749e:	bf04      	itt	eq
 80074a0:	6819      	ldreq	r1, [r3, #0]
 80074a2:	685b      	ldreq	r3, [r3, #4]
 80074a4:	6063      	str	r3, [r4, #4]
 80074a6:	bf04      	itt	eq
 80074a8:	1949      	addeq	r1, r1, r5
 80074aa:	6021      	streq	r1, [r4, #0]
 80074ac:	6054      	str	r4, [r2, #4]
 80074ae:	e7c7      	b.n	8007440 <_free_r+0x28>
 80074b0:	b003      	add	sp, #12
 80074b2:	bd30      	pop	{r4, r5, pc}
 80074b4:	200000bc 	.word	0x200000bc

080074b8 <_malloc_r>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	1ccd      	adds	r5, r1, #3
 80074bc:	f025 0503 	bic.w	r5, r5, #3
 80074c0:	3508      	adds	r5, #8
 80074c2:	2d0c      	cmp	r5, #12
 80074c4:	bf38      	it	cc
 80074c6:	250c      	movcc	r5, #12
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	4606      	mov	r6, r0
 80074cc:	db01      	blt.n	80074d2 <_malloc_r+0x1a>
 80074ce:	42a9      	cmp	r1, r5
 80074d0:	d903      	bls.n	80074da <_malloc_r+0x22>
 80074d2:	230c      	movs	r3, #12
 80074d4:	6033      	str	r3, [r6, #0]
 80074d6:	2000      	movs	r0, #0
 80074d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074da:	f000 f857 	bl	800758c <__malloc_lock>
 80074de:	4921      	ldr	r1, [pc, #132]	; (8007564 <_malloc_r+0xac>)
 80074e0:	680a      	ldr	r2, [r1, #0]
 80074e2:	4614      	mov	r4, r2
 80074e4:	b99c      	cbnz	r4, 800750e <_malloc_r+0x56>
 80074e6:	4f20      	ldr	r7, [pc, #128]	; (8007568 <_malloc_r+0xb0>)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	b923      	cbnz	r3, 80074f6 <_malloc_r+0x3e>
 80074ec:	4621      	mov	r1, r4
 80074ee:	4630      	mov	r0, r6
 80074f0:	f000 f83c 	bl	800756c <_sbrk_r>
 80074f4:	6038      	str	r0, [r7, #0]
 80074f6:	4629      	mov	r1, r5
 80074f8:	4630      	mov	r0, r6
 80074fa:	f000 f837 	bl	800756c <_sbrk_r>
 80074fe:	1c43      	adds	r3, r0, #1
 8007500:	d123      	bne.n	800754a <_malloc_r+0x92>
 8007502:	230c      	movs	r3, #12
 8007504:	6033      	str	r3, [r6, #0]
 8007506:	4630      	mov	r0, r6
 8007508:	f000 f846 	bl	8007598 <__malloc_unlock>
 800750c:	e7e3      	b.n	80074d6 <_malloc_r+0x1e>
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	1b5b      	subs	r3, r3, r5
 8007512:	d417      	bmi.n	8007544 <_malloc_r+0x8c>
 8007514:	2b0b      	cmp	r3, #11
 8007516:	d903      	bls.n	8007520 <_malloc_r+0x68>
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	441c      	add	r4, r3
 800751c:	6025      	str	r5, [r4, #0]
 800751e:	e004      	b.n	800752a <_malloc_r+0x72>
 8007520:	6863      	ldr	r3, [r4, #4]
 8007522:	42a2      	cmp	r2, r4
 8007524:	bf0c      	ite	eq
 8007526:	600b      	streq	r3, [r1, #0]
 8007528:	6053      	strne	r3, [r2, #4]
 800752a:	4630      	mov	r0, r6
 800752c:	f000 f834 	bl	8007598 <__malloc_unlock>
 8007530:	f104 000b 	add.w	r0, r4, #11
 8007534:	1d23      	adds	r3, r4, #4
 8007536:	f020 0007 	bic.w	r0, r0, #7
 800753a:	1ac2      	subs	r2, r0, r3
 800753c:	d0cc      	beq.n	80074d8 <_malloc_r+0x20>
 800753e:	1a1b      	subs	r3, r3, r0
 8007540:	50a3      	str	r3, [r4, r2]
 8007542:	e7c9      	b.n	80074d8 <_malloc_r+0x20>
 8007544:	4622      	mov	r2, r4
 8007546:	6864      	ldr	r4, [r4, #4]
 8007548:	e7cc      	b.n	80074e4 <_malloc_r+0x2c>
 800754a:	1cc4      	adds	r4, r0, #3
 800754c:	f024 0403 	bic.w	r4, r4, #3
 8007550:	42a0      	cmp	r0, r4
 8007552:	d0e3      	beq.n	800751c <_malloc_r+0x64>
 8007554:	1a21      	subs	r1, r4, r0
 8007556:	4630      	mov	r0, r6
 8007558:	f000 f808 	bl	800756c <_sbrk_r>
 800755c:	3001      	adds	r0, #1
 800755e:	d1dd      	bne.n	800751c <_malloc_r+0x64>
 8007560:	e7cf      	b.n	8007502 <_malloc_r+0x4a>
 8007562:	bf00      	nop
 8007564:	200000bc 	.word	0x200000bc
 8007568:	200000c0 	.word	0x200000c0

0800756c <_sbrk_r>:
 800756c:	b538      	push	{r3, r4, r5, lr}
 800756e:	4d06      	ldr	r5, [pc, #24]	; (8007588 <_sbrk_r+0x1c>)
 8007570:	2300      	movs	r3, #0
 8007572:	4604      	mov	r4, r0
 8007574:	4608      	mov	r0, r1
 8007576:	602b      	str	r3, [r5, #0]
 8007578:	f000 f816 	bl	80075a8 <_sbrk>
 800757c:	1c43      	adds	r3, r0, #1
 800757e:	d102      	bne.n	8007586 <_sbrk_r+0x1a>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	b103      	cbz	r3, 8007586 <_sbrk_r+0x1a>
 8007584:	6023      	str	r3, [r4, #0]
 8007586:	bd38      	pop	{r3, r4, r5, pc}
 8007588:	20000898 	.word	0x20000898

0800758c <__malloc_lock>:
 800758c:	4801      	ldr	r0, [pc, #4]	; (8007594 <__malloc_lock+0x8>)
 800758e:	f000 b809 	b.w	80075a4 <__retarget_lock_acquire_recursive>
 8007592:	bf00      	nop
 8007594:	200008a0 	.word	0x200008a0

08007598 <__malloc_unlock>:
 8007598:	4801      	ldr	r0, [pc, #4]	; (80075a0 <__malloc_unlock+0x8>)
 800759a:	f000 b804 	b.w	80075a6 <__retarget_lock_release_recursive>
 800759e:	bf00      	nop
 80075a0:	200008a0 	.word	0x200008a0

080075a4 <__retarget_lock_acquire_recursive>:
 80075a4:	4770      	bx	lr

080075a6 <__retarget_lock_release_recursive>:
 80075a6:	4770      	bx	lr

080075a8 <_sbrk>:
 80075a8:	4b04      	ldr	r3, [pc, #16]	; (80075bc <_sbrk+0x14>)
 80075aa:	6819      	ldr	r1, [r3, #0]
 80075ac:	4602      	mov	r2, r0
 80075ae:	b909      	cbnz	r1, 80075b4 <_sbrk+0xc>
 80075b0:	4903      	ldr	r1, [pc, #12]	; (80075c0 <_sbrk+0x18>)
 80075b2:	6019      	str	r1, [r3, #0]
 80075b4:	6818      	ldr	r0, [r3, #0]
 80075b6:	4402      	add	r2, r0
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	4770      	bx	lr
 80075bc:	200000c4 	.word	0x200000c4
 80075c0:	200008a8 	.word	0x200008a8

080075c4 <_init>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	bf00      	nop
 80075c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ca:	bc08      	pop	{r3}
 80075cc:	469e      	mov	lr, r3
 80075ce:	4770      	bx	lr

080075d0 <_fini>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	bf00      	nop
 80075d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d6:	bc08      	pop	{r3}
 80075d8:	469e      	mov	lr, r3
 80075da:	4770      	bx	lr
